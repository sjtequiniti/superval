    ∇ res←field Basis_ImportExport parm;parent;z;list;row;var;∆;Defaults[1]   ⍝ PARMWIN.sf#19[2]   ⍝ Function to allow user control on Basis Import/Export[3]   [4]   parent←'fmExport.' ⋄ res←0⍴'' ⍝ Default response[5]   [6]   :select parm[7]   [8]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)[9]   [10]      :select Direction[11]      :case 'Export'[12]          heading←'Exported'[13]      :case 'Import'[14]          (parent,'lvSavedParms') ⎕wi 'style' (8+(parent,'lvSavedParms') ⎕wi 'style') ⍝ Single Selection[15]          heading←'Overwritten'[16]      :endselect[17]  [18]      (Header CurrValue exportname exportlabel exportfield)←Vars_BasisImportExport[19]      CurrValue←(⊂''),CurrValue[20]  [21]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)[22]  [23]      :if 254<⍴exportname[24]          res←'Cannot export more than 254 fields simultaneously' ⋄ :return[25]      :endif[26]      parent ⎕wi '∆parm' 1 ⍝ Parameter File Lists and Descriptions[27]      :if 0∊⍴1⊃GetParmDesc InputsType ⋄ res←'NoSavedParms' ⋄ :return ⋄ :endif[28]  [29]      0 0⍴(⊂'lvSavedParms') Basis_ImportExport 'Change'[30]  [31]  :case 'Lock'[32]      :if ~0∊⍴(SSName←parent,'ssParms') ⎕wi 'self'[33]          SSName Win∆F1SSProtectCells (⊂¯1 ¯1 ¯1 ¯1)[34]      :endif[35]  [36]  :case 'Unlock'[37]      :if ~0∊⍴(SSName←parent,'ssParms') ⎕wi 'self'[38]          SSName Win∆F1SSProtectCells 'Unlock'[39]      :endif[40]  [41]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)[42]  [43]      :repeat[44]          :select ↑field[45]          :case 'lvSavedParms'[46]              Defaults←20⌿MATRIX (~exportbeyond)/'*Invalid Target*'[47]              CurrValue←CurrValue[,1;][48]              list←(parent,'lvSavedParms') ⎕wi 'list'[49]              :for z :in (parent,'lvSavedParms') ⎕wi 'value'[50]                  0 0⍴ReadModule SavedModule 'None' ⍝ Get System Defaults[51]                  row←list[;1]⍳z[52]                  0 0⍴(InputDir,⊃list[row;3]) ReadFile (1000000∣z) '' ('[' StripText ⊃exportname)[53]                  :for var :in exportname[54]                      :if ';'∊var[55]                          var←'[' StripText var[56]                          ⍎var,'←',var,' OVER Defaults'[57]                      :endif[58]                  :endfor[59]                  CurrValue←CurrValue OVER (,(list[;1]=z)⌿list[;3 4]),1↓¨DLTB¨'!',¨⍕¨(⊂⎕tcnl,'!') REPL¨execute¨exportname[60]              :endfor[61]              0 0⍴Basis_ImportExport 'Unlock'[62]              Current_Values[63]              0 0⍴Basis_ImportExport 'Lock'[64]          :endselect[65]      :until mt field←1↓field[66]  [67]  :case 'Run'[68]  [69]      :select Direction[70]      :case 'Export' ⋄ RunBasis_Export[71]      :case 'Import' ⋄ ImportDic←∆ push execute¨∆←lmt exportname,exportlabel ⍝ For import, Pass back a dictionary of imported values[72]      :endselect[73]      res←'Quit'[74]  [75]  :case 'Quit' ⍝ Deleting "other" variables[76]  [77]      0 0⍴⎕ex 'exportname exportlabel exportfield heading exportbeyond Header CurrValue'[78]  [79]  :endselect    ∇