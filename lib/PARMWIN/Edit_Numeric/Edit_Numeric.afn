    ∇ res←field Edit_Numeric parm;parent[1]   ⍝ PARMWIN.sf#10[2]   ⍝ Function to allow user control on Editing Numeric Data Defaults[3]   [4]   parent←'fmEditNum.' ⋄ res←0⍴'' ⍝ Default response[5]   [6]   :select parm[7]   [8]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)[9]       Value←DataNumValue[NEDget;][10]      DecP←DataNumDecP[NEDget;][11]      NumType←DataNumType[NEDget;][12]  [13]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)[14]      (parent,'lrDecP') ⎕wi 'caption' ('of ',⍕FieldSize)[15]      parent ⎕wi 'caption' ((parent ⎕wi 'caption'),' - [',FieldName,']')[16]  [17]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)[18]  [19]  :case 'Valid' ⍝ Routine specific validation[20]  [21]      :if '*'∊(FieldSize,ZWB DecP)⍕FormulaZWB Value[22]          res←'InvEntry' 'Possible Values overflow the Field'[23]          :if '0'=DecP[24]              Win∆SetFocus parent,'edValue' ⋄ :return[25]          :else[26]              Win∆SetFocus parent,'edDecP' ⋄ :return[27]          :endif[28]      :endif[29]  [30]  :case 'Run'[31]      Value ASSIGN∆Dict 'DataNumValue[NEDget;]'[32]      DecP ASSIGN∆Dict 'DataNumDecP[NEDget;]'[33]      NumType ASSIGN∆Dict 'DataNumType[NEDget;]'[34]      parent ⎕wi '∆modified' 1[35]      res←'Quit'[36]  [37]  :case 'Quit' ⍝ Deleting "other" variables[38]  [39]  :endselect    ∇