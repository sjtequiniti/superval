    ∇ res←field Edit_Date parm;parent[1]   ⍝ PARMWIN.sf#11[2]   ⍝ Function to allow user control on Editing Date Data Defaults[3]   [4]   parent←'fmEditDate.' ⋄ res←0⍴'' ⍝ Default response[5]   [6]   :select parm[7]   [8]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)[9]       DateAbs←DataDateAbs[NEDget;][10]      DateRel←DataDateRel[NEDget;][11]      :if uk=0[12]          DateAdj←1↑(DataDateAdj[NEDget;1]='NY')/'01'[13]      :endif[14]      (parent,'edDateAbs')⎕wi 'onChange' ((parent,'edDateAbs') ⎕wi 'onExit')[15]      (parent,'edDateRel')⎕wi 'onChange' ((parent,'edDateRel') ⎕wi 'onExit')[16]  [17]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)[18]      parent ⎕wi 'caption' ((parent ⎕wi 'caption'),' - [',FieldName,']')[19]  [20]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)[21]  [22]      :repeat[23]          :select ↑field[24]          :caselist 'edDateAbs' 'edDateRel'[25]              (parent,'edDateAbs') Win∆Alternates (parent,'edDateRel')[26]          :endselect[27]      :until mt field←1↓field[28]  [29]  :case 'Valid' ⍝ Routine specific validation[30]      :if ~0∊⍴(parent,'edDateAbs') ⎕wi 'text'[31]      :andif ~0∊⍴(parent,'edDateRel') ⎕wi 'text'[32]           res←'NotBoth' ⋄ Win∆SetFocus parent,'edDateAbs' ⋄ :return[33]      :endif[34]  [35]  :case 'Run'[36]      DateAbs ASSIGN∆Dict 'DataDateAbs[NEDget;]'[37]      DateRel ASSIGN∆Dict 'DataDateRel[NEDget;]'[38]      :if uk=0[39]          (1↑('10'=DateAdj)/'YN') ASSIGN∆Dict 'DataDateAdj[NEDget;]'[40]      :else[41]          'N' ASSIGN∆Dict 'DataDateAdj[NEDget;]'[42]      :endif[43]      parent ⎕wi '∆modified' 1[44]      res←'Quit'[45]  [46]  :case 'Quit' ⍝ Deleting "other" variables[47]  [48]  :endselect    ∇