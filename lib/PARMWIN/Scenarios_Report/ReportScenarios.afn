    ∇ htmPath←ReportScenarios;xxx;∆;CurrentGlobals;ic;sds;scenes;xml;xslPath;pt;hdg;tbl;currentGlobalsD;descs;xxx;foo;scenarioValues;ok;absrel;types;cons;bar;nlist;flists;cn;BatchedNest;NEMs;NEMSel;nems;kt;t;curr;pfx;parm;TYPES;shove;scenarioGlobals;currentGlobals;name;DefinedGlobals;warnings;i;typify;dg;tab;parms[1]   ⍝ PARMWIN.sf#41[2]   ⍝ Reads: ClientFile InputDir StyleDir ⍙FinAssdict ⍙VALUESdict[3]   ⍝ Revn: sjt13apr16 * Valuation Data for GAD[4]   ⍝       sjt14apr16 * Financial Assumptions; Mortality Assumptions; Retirement Age Assumptions[5]   ⍝       sjt21apr16 * handle mismatched sets and alternatives lengths[6]   ⍝       sjt21apr16 * Financial Assumptions[7]   ⍝       rse27apr16 * (various)[8]   ⍝       sjt30apr16 * Financial Assumptions[9]   ⍝       sjt03may16 * refactor; warnings[10]  ⍝       sjt12may16 * defaults from ⍙VALUESdict[11]  ⍝       sjt17may16 * Financial Globals Parameter Set; FinScenRel/FinScenAbs placeholders[12]  ⍝       sjt24may16 * warnings for all headings[13]  ⍝       sjt22jun16 * specification of 31may16[14]  ⍝       sjt23jun16 * message and conference of 23may16[15]  [16]  scenes←DLTB¨3⊃¨'⍺' partition¨ ⎕SPLIT 2 rnk SavedScens                           ⍝ descriptions of scenarios to be reported[17]  [18]  ic←ClientFile ReadFile 'Index'[19]  [20]  ⍝ Types: names, parms, prefixes and headings ...................................[21]  TYPES←DLTB¨⊃'∣' partition¨⎕TCNL partition ¯1↓ScriptFollowing[22]  ⍝ name                  ∣ parm    ∣ prefix  ∣ heading[23]  ⍝ Financials            ∣ Fin     ∣ Fin     ∣ Financial Assumptions[24]  ⍝ Constants             ∣ RelNum  ∣ Const   ∣ Financial Constants[25]  ⍝ Mortality_Rate        ∣ ParmsM  ∣ Mort    ∣ Mortality Assumptions[26]  ⍝ Mortality_Rate_Select ∣ ParmsMS ∣ MortS   ∣ Select Mortality Assumptions[27]  ⍝ Mort_Improvement      ∣ ParmsI  ∣ MImp    ∣ Mortality Improvement Assumptions[28]  ⍝ Retirement_Age        ∣ ParmsX  ∣ RetAge  ∣ Retirement Age Assumptions[29]  ⍝ Decrement_Rates       ∣ ParmsD  ∣ DRates  ∣ Decrement Rate Assumptions[30]  ⍝ Spouse_Parameters     ∣ ParmsW  ∣ Spouse  ∣ Spouse Parameters[31]  ⍝ Retirement_Factors    ∣ ParmsR  ∣ RetFact ∣ Retirement Factors[32]  ⍝ Commutation_Tables    ∣ ParmsT  ∣ CommT   ∣ Commutation Tables[33]  ⍝ Retirement_Cash       ∣ ParmsL  ∣ RetCash ∣ Retirement Cash[34]  ⍝ Spreading_Dates       ∣ ParmsS  ∣ SpDate  ∣ Spreading Dates[35]  ⍝ NE_Model              ∣ NEM     ∣ NEM     ∣ New Entrant Model[36]  [37]  ⍝ GPSN: Global Parameter Set Name[38]  ⍝ Defined Globals: The list of GPSNs (of a particular type) currently[39]  ⍝   defined in the Scheme Folder (the list produced by interrogating index of ClientFile).[40]  ⍝ CurrentGlobals: (dic) TYPES.prefix=>GPSNs currently in use in Scheme Folder.[41]  ⍝ For each type...[42]  ⍝  currentGlobals: (strs) List of GPSNs now in use in Scheme Folder[43]  ⍝  currentGlobalsD: (strs) display forms of currentGlobals[44]  ⍝  scenarioGlobals: (vec, ⍴scenes) Lists of GPSNs in use when scenario last saved[45]  ⍝  scenarioValues:  (scenes×currentGlobalsD) GPSNs selected when scenario last saved[46]  [47]  ⍝ Defined Globals .............................................................[48]  DefinedGlobals←ic for '∆_Name' push TYPES at 'name'[49]  :if ∨/∆←(DefinedGlobals at '∆_Name')∊⊂'Mortality_Rate_Select'                   ⍝ Special Case: Change Select Mortality to Mortality[50]      tab←DefinedGlobals for ∆[51]      tab←tab amend '∆_Name' ((rowsIn tab)/⊂'Mortality_Rate')[52]      tab←tab amend '∆_Description' ((⊂'[Select] '),¨tab at '∆_Description')[53]      DefinedGlobals←(DefinedGlobals for ~∆) append tab[54]  :endif[55]  DefinedGlobals←DefinedGlobals groupby '∆_Name' '∆_Description'[56]  DefinedGlobals←DefinedGlobals amend 'Mortality_Rate'   ((⊂'None'),DefinedGlobals at 'Mortality_Rate') ⍝ Special Case: Also "None" definition[57]  DefinedGlobals←DefinedGlobals amend 'Mort_Improvement' ((⊂'None'),DefinedGlobals at 'Mort_Improvement')[58]  [59]  ⍝ Current Globals .............................................................[60]  CurrentGlobals←(↑gucommon 1,TYPES at 'parm') at 'Type' 'value'                  ⍝ (map) Types and values of globals in common use[61]  :if ∨/∆←(parms←↑CurrentGlobals)∊⊂'ParmsMS'                                      ⍝ Special Case: Change Select Mortality to Mortality[62]      (∆/parms)←⊂'ParmsM'[63]      (1⊃CurrentGlobals)←⊂parms[64]  :endif[65]  CurrentGlobals←↑groupValues/(unique spin CurrentGlobals)/¨CurrentGlobals        ⍝ (dic) TYPES.parm=>unique GPSNs[66]  CurrentGlobals←(TYPES at 'prefix') push ↑at/CurrentGlobals TYPES 'parm'         ⍝ (dic) TYPES.prefix=>unique GPSNs[67]  TYPES←TYPES for ~(TYPES at 'parm')∊⊂'ParmsMS'                                   ⍝ Special Case: Remove Select Mortality[68]  [69]  ⍝ special case: New Entrant Model[70]  NEMs←(ic for '∆_Name' 'NE_Model') at '∆_Description'[71]  NEMSel←(⍴NEMs)/0[72]  :for cn :in (ic for '∆_Name' 'Batch_Display') at '∆_CompNo'[73]      0 0⍴ClientFile ReadFile cn '' 'BatchedNest'[74]      nems←('Y'=↑¨BatchedNest at 'New Entrants')/BatchedNest at 'New Entrant Description'[75]      NEMSel←NEMSel∨NEMs∊nems[76]  :endfor[77]  CurrentGlobals←CurrentGlobals amend 'NEM' (NEMSel/NEMs)                         ⍝ Special case (used in Batches not Bases)[78]  CurrentGlobals←nub¨DLTB¨¨⎕av[209] StripText¨¨CurrentGlobals                     ⍝ parse???[79]  [80]  ⍝ scenarios as dictionaries ...................................................[81]  sds←(⍴scenes)⍴⊂p2d ⍙VALUESdict at 'Scenarios'                                   ⍝ default values[82]  ∆←((ic for '∆_Name' 'Scenarios') at '∆_Description' '∆_CompNo') map scenes      ⍝ cn#s of scenario definitions[83]  sds←sds update¨p2d¨ ∆ file_get_cns¨⊂ClientFile,'.sf'[84]  sds←sds amend¨ (⊂'⍙FinAssdict') pr ¨GetFinList ¨sds at¨⊂'FinParms'              ⍝ List of Defined Financial Globals for each Scenario[85]  sds←sds amend¨ (⊂'empty') pr¨ 0/¨sds at¨ ⊂'FinScenRel'[86]  [87]  xxx←⎕FX⊃"Z←type typify value" "Z←type,': ',value"                               ⍝ format Financial Assumption with type[88]  [89]  ⍝ Write XML ...................................................................[90]  xml←'scenarios' xtag (⊂'scenario') xtag¨xmlEscape¨aplEscape¨scenes[91]  [92]  ⍝ ok: (flg) mark up content[93]  ⍝ currentGlobals: CurrentGlobals for pfx[94]  ⍝ currentGlobalsD: display form of currentGlobals[95]  ⍝ scenarioValues: table of alternative values (scenarios×currentGlobalsD)[96]  [97]  hdg←'Valuation Data'[98]  ∆←(⊂'{}')embrace¨(push AbsDict at 'Variable' 'Parameter') at 'vDATE' 'Actsfile' 'Defsfile' 'Pensfile'[99]  ∆←'Valuation Date' 'Main Actives Data File' 'Main Deferreds Data File' 'Main Pensioners Data File',¨' ',¨∆[100] currentGlobalsD←∆,⊂'Financial Assumptions effective at the Original Valuation Date'[101] xxx←⎕FX⊃"Z←foo v" "Z←v[1] , 3↑lmt 1↓v"                                          ⍝ helper fn[102] ∆←⊃foo¨,/m2n¨sds∘.at 'DatavDATE' 'DataScenFile' 'DataScenFormat'[103] scenarioValues←∆,(~mt¨sds at¨⊂'DatavDATE')⎕REPL¨CheckTranslate¨sds at¨⊂'TermAdjFin'[104] i←1 5 2 3 4 ⍝ special case at second place[105] ⍝xml←xml,markUp hdg (currentGlobalsD[∆]) (scenarioValues[;∆]) ''[106] ⍝ warnings to be advised[107] ∆←(⊂'alternative')xtag¨xmlEscape¨scenarioValues[;i][108] ∆←↑,/((⊂'parm-set')xattr¨(⊂'name')pr¨currentGlobalsD[i]) xtag¨ ⎕SPLIT[1] ∆[109] xml←xml,('parm-set-group' xattr 'name' hdg) xtag ∆[110] [111] :for ∆ :in spin TYPES at 'name' 'parm' 'prefix' 'heading' ⋄ (name parm pfx hdg)←∆ ⍝ loop on Types[112] [113]     :select hdg[114]     :case 'Financial Assumptions'                                               ⍝ see below[115]         :if ok←'1'∊absrel←↑¨sds∘.at'ScenAbs' 'ScenRel'[116]         :andif ok←~mt ∆←(push ic at '∆_Name' '∆_CompNo') at 'Financials_Display'[117] [118]             currentGlobalsD←,⊂'Financial Globals Parameter Set' ⋄ scenarioValues←sds∘.at,⊂'FinParms'[119]             ((absrel∨.='1')⌿scenarioValues)←⊂'FinDefault' pval ∆ file_get_cns ClientFile,'.sf' ⍝ 17may16[120] [121]             currentGlobalsD←currentGlobalsD,'Scenario Values as Relative Differences' 'Scenario Values as Absolute Differences'[122]             scenarioValues←scenarioValues,CheckTranslate¨⌽absrel[123] [124]             types←'Interest' 'Inflation' 'Revaluation' 'Increases' 'Unknown'[125]             ∆←'List' 'typ'⍪valsIn ⍙FinAssdict select 'List' 'Key'[126]             ∆←∆ amend 'Type' (((3↑¨types)(types)) map ∆ at 'typ')[127]             ∆←∆ amend spin ('key' 'value') ((∆ at 'Type') parse ∆ at 'List')[128]             kt←(∆ at 'key' 'Type'),¨'' (⊂'Unknown')                             ⍝ parmset:type map; default Unknown[129]            ⍝ current FA parm currentGlobalsD and values[130]             ∆←CurrentGlobals at 'Fin' 'Const'[131]             (2⊃∆)←DLTB¨'-' StripText¨(2⊃∆)                                      ⍝⍝⍝ parse???[132]             curr←'type' 'glob'⍪⍉⊃((tally¨∆)/'other' 'Constant') (↑,/∆)[133]             curr←curr amend spin('key' 'value')(↑parse/curr at 'type' 'glob')[134]             curr←curr for (unique curr at 'key') ^ 0∊¨⎕VI¨ curr at 'key'[135]             t←curr at 'type' ⋄ ∆←~t∊⊂'Constant' ⋄ (∆/t)←kt map ∆/curr at 'key'[136]             curr←curr amend 'type' t[137]             curr←curr sortedBy ⍋types ⍳ curr at 'type'[138]             currentGlobalsD←currentGlobalsD,DLTB¨(dg←↑typify¨/curr at 'type' 'key'),¨' ',¨(⊂'{}')embrace¨curr at 'value'[139] [140]             flists←∆[;1] typify¨¨ ↑¨parse/∆←m2n¨sds∘.at 'FinType' 'FinDesc'[141]             currentGlobalsD←currentGlobalsD,(↑nub¨,/flists)~currentGlobalsD[142] [143]             ∆←('00' '01' '10' '11')('empty' 'FinScenRel' 'FinScenAbs' 'empty') map ⎕SPLIT absrel[144]             ∆←push¨⎕SPLIT flists,[1.5]∆ accentuateThePositive¨sds at¨ ∆[145]             scenarioValues←scenarioValues,∆∘.at 3↓currentGlobalsD[146] [147]             currentGlobals←↑((⍴∆)⍴⊂'Fin')parse ∆←CurrentGlobals at 'Fin' ⍝ NB how to typify?[148] [149]             ∆←(⍙FinAssdict at 'Name' 'Key') mapp currentGlobals[150]             ((~∆∊3↑¨types)/∆)←⊂'Unk'[151]             ∆←((3↑¨types)(types)) map ∆[152]             currentGlobals←∆ typify¨currentGlobals[153] [154]             scenarioGlobals←∆[;1] typify¨¨ ↑¨parse/∆←m2n¨sds ∘.at 'FinType' 'FinDesc'[155] [156]         :endif[157]     :case 'Financial Constants'[158]         ok←0                                                                    ⍝ do nothing[159]     :else[160]         currentGlobals←CurrentGlobals at pfx[161]         scenarioGlobals←lmt¨m2n¨sds at¨⊂pfx,'Desc'[162]         ok←~mt currentGlobalsD←currentGlobals,(DefinedGlobals at name)~currentGlobals[163]     :endselect[164] [165]    ⍝ scenarioValues (⍴ ←→ tally¨scenes currentGlobals)[166]     :select hdg[167]     :case 'Financial Assumptions'                                               ⍝ already done[168]     :case 'Financial Constants'                                                 ⍝ do nothing[169]     :else[170]         ∆←push¨⎕SPLIT m2n¨sds∘.at (⊂pfx),¨'Desc' 'ScenDesc'                     ⍝ dics: Desc=>ScenDesc[171]         scenarioValues←∆∘.at currentGlobalsD[172]     :endselect[173] [174]     :if ok[175]         warnings←0 0 0[176] [177]        ⍝ Defined Globals that have been deleted from the ClientFile but are still in use either in[178]        ⍝  a Basis (a Current Global) or in a Scenario (a Scenario Value).[179]        ⍝  Warning Type 1. should colour any cell (error) red that contains any deleted Defined Global[180]        ⍝  (either a Parameter Set cell (if it is a Current Global)[181]        ⍝  or a Scenario cell (if it is a Scenario Value).[182]         :if name≡'Financials'[183]             ⍝ Test first Scenario row (FinParms) against Financials Globals Sets[184]             (1⊃warnings)←(⍴currentGlobalsD⍪scenarioValues)↑⍉MATRIX 0,~(scenarioValues[;1])∊'' push DefinedGlobals at name[185]         :else[186]             (1⊃warnings)←~(currentGlobalsD⍪scenarioValues)∊(⊂''),DefinedGlobals at name[187]         :endif[188] [189]        ⍝ New Current Globals that have been created since the Scenario was last saved.[190]        ⍝  Warning Type 2. should colour any Scenario cell (warning) yellow that does not include the[191]        ⍝  particular Current Global in the Scenario Globals.[192]        :if name≡'Financials'[193]             ⍝ NB currentGlobalsD flists both typified[194]             (2⊃warnings)←0×(mt¨scenarioValues) ^ ⍉~(⊂¨currentGlobalsD)∘.∊flists ⍝⍝⍝ FIXME: suppressed for now[195]        :else[196]             (2⊃warnings)←(mt¨scenarioValues) ^ ⍉~(⊂¨currentGlobalsD)∘.∊scenarioGlobals[197]        :endif[198] [199]        ⍝ Scenario Globals that have ceased to be used (in Bases) since the Scenario was last saved[200]        ⍝  (although they may still exist as Defined Globals in the ClientFile[201]        ⍝  - if they are no longer used in any Bases they are redundant).[202]        ⍝  Warning Type 3. should colour any Parameter Set cell and the Scenario Value cell[203]        ⍝  (warning) yellow where the Scenario Global is no longer included in the Current Globals.[204]        ⍝  Note that not all Scenario Parameter Sets will include the redundant Parameter Set).[205]        ⍝ NB for Financials either (scenarioValues scenarioGlobals currentGlobals) must be all typified or none must be[206]        :if name≡'Financials'[207]             (3⊃warnings)←0×2⊃warnings ⍝ Don't exist[208]        :else[209]             (3⊃warnings)←(⊂¨scenarioValues)∊¨(2⊃⍴scenarioValues)/,[1.5] scenarioGlobals~¨ ⊂∆←currentGlobals[210]        :endif[211] [212]         ⍝ Adjust Parameter descriptions after warning checks[213]         :select hdg[214]         :case 'Retirement Age Assumptions'[215]             ∆←scenarioGlobals push¨raScenColValue¨¨⎕SPLIT[1]¨⊃¨m2n¨¨⎕SPLIT sds∘.at 'RetAgeScenDesc' 'RetAgeScenNRA' 'RetAgeScenLRA'[216]             scenarioValues←∆∘.at currentGlobalsD[217]         :case 'Mortality Assumptions'[218]             ∆←scenarioGlobals push¨maScenColValue¨¨⎕SPLIT[1]¨⊃¨m2n¨¨⎕SPLIT sds∘.at 'MortScenDesc' 'MortScenRating' 'MortDesc' 'MortScenAge' 'MortScenLifeExp'[219]             scenarioValues←∆∘.at currentGlobalsD[220]         :endselect[221] [222]         ∆←warnings markUp scenarioValues[223]         ∆←↑,/(warnings markUp currentGlobalsD) xtag¨ ⎕SPLIT[1] ∆[224]         xml←xml,('parm-set-group' xattr 'name' hdg) xtag ∆[225] [226]     :endif[227] [228] :endfor[229] [230] htmPath←InputDir,'scenarios.',((-⍳5) tsIM ⎕TS),'.htm'[231] xslPath←StyleDir,'scenarios.xsl'[232] (htmPath xslPath) writeHtmReport xml    ∇