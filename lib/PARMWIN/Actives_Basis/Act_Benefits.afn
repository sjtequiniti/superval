    ∇ field Act_Benefits parm;page;list;i;value;type;text;BenDefs
[1]   ⍝ PARMWIN.sf#6
[2]   ⍝ Do Initialisation, Changes and Validation of Benefits
[3]   
[4]   page←'pgBenefits.'
[5]   
[6]   :select parm
[7]   :case 'Init'
[8]       list←(parent,page,'trBenefit') ⎕wi 'list'
[9]       :for i :in (3=list[;2])/list[;1]
[10]          0 0⍴(parent,page,'trBenefit') ⎕wi 'Expand' 'expandbranch' i
[11]      :endfor
[12]      :if uk=0
[13]          (parent,page,'fStandard.edBenCode') ⎕wi 'pointer' '>cur 1001 shell32.dll'
[14]          (parent,page,'fStandard.edBenCode') ⎕wi 'onMouseDown' 'GetBEN'
[15]      :endif
[16]      (parent,page,'edFunction') ⎕wi 'font' APLScreen ⍬ 0 APLScrCharSet
[17]      (parent,page,'trBenefit') ⎕wi 'onClick' 'BenefitsPrint'
[18]      :if accesslevel≥benAccess
[19]          (parent,page,'trBenefit') ⎕wi 'onDblClick' 'FunctionEdit'
[20]      :else
[21]          (parent,page,'trBenefit') ⎕wi 'onDblClick' 'BenefitsPrint'
[22]      :endif
[23]  
[24]  :case 'Change'
[25]      :select field
[26]      :case 'trBenefit'
[27]          list←(parent,page,'trBenefit') ⎕wi 'list'
[28]          value←(parent,page,'trBenefit') ⎕wi 'value'
[29]          (parent,page,'fProrate') ⎕wi 'enabled' (1=list[value;2])
[30]          :if 4=list[value;2]
[31]              type←DLTMB ⊃list[value;3]
[32]              type←DLTMB 1↓¯1↓(∨\'('=type)/type
[33]              (parent,page,'edFunction') ⎕wi 'text' (Function←⎕vr type,'∆BENEFIT')
[34]              (parent,page,'fEdit.bnActives_BasisFnEdit') ⎕wi 'enabled' ((~runtime)^accesslevel≥benAccess)
[35]              :if uk=0
[36]                  BenForm←,FunctionList[FunctionList[;⍳10] ExactTLU type;]
[37]                  BenDefs←1↓(⍎BenForm[10+⍳10]) SSINDEX zwb 20↓BenForm
[38]                  ALLparms←(-+/^\'ß'=⌽ALLparms)↓ALLparms←1↓BenDefs SSINDEX 2
[39]                  (parent,page,'fStandard') ⎕wi 'enabled' (accesslevel≥benAccess)
[40]                  (parent,page,'fStandard.edBenCode') ⎕wi 'text' (BenCode←DLTB '⍝' StripText 1↓BenDefs SSINDEX 1)
[41]                  (parent,page,'fStandard.edComment') ⎕wi 'text' (Comment←DLTB 1↓⌽'⍝' Win∆Parent ⌽1↓BenDefs SSINDEX 1)
[42]                  (parent,page,'fStandard.ckStandard') ⎕wi 'value' (×⍴,BenCode)
[43]              :endif
[44]          :else
[45]              :if uk=0
[46]                  (parent,page,'fStandard') ⎕wi 'enabled' 0
[47]                  (parent,page,'fStandard.ckStandard') ⎕wi 'value' 0
[48]                  (parent,page,'fStandard.edBenCode') ⎕wi 'text' (BenCode←'')
[49]                  (parent,page,'fStandard.edComment') ⎕wi 'text' (Comment←'')
[50]              :endif
[51]              (parent,page,'fEdit.bnActives_BasisFnEdit') ⎕wi 'enabled' 0
[52]              (parent,page,'edFunction') ⎕wi 'text' (Function←'')
[53]          :endif
[54]      :case 'ckStandard'
[55]          value←(parent,page,'fStandard.ckStandard') ⎕wi 'value'
[56]          ((⊂parent,page,'fStandard.'),¨'edBenCode' 'edComment' 'bnActives_BasisDefine') MultiWI 'enabled' (value^accesslevel≥benAccess)
[57]          (parent,page,'fEdit.bnActives_BasisFnEdit') ⎕wi 'enabled' ((~runtime)^(~value)^accesslevel≥benAccess)
[58]      :case 'edBenCode'
[59]          ⍝ Test for matched parentheses
[60]          text←'⍝' StripText (parent,page,'fStandard.edBenCode') ⎕wi 'text'
[61]          :if ≠/+/'()'∘.=text ⋄ :orif ≠/+/'[]'∘.=text
[62]              MDISPLAY 'InvEntry' 'Mismatched Parentheses'
[63]              ⎕wres←parent,page,'fStandard.edBenCode' ⋄ :return
[64]          :endif
[65]      :endselect
[66]  
[67]  :case 'Valid'
[68]  
[69]  :endselect
    ∇
