    ∇ FunctionDefine;formula;comment;BENpos;BENnos;fncode;FN;NEWparms;TableAdded;BENno
[1]   ⍝ PARMWIN.sf#6
[2]   ⍝ Define the Benefit Function from the "Standard" Coding
[3]   
[4]   :if 0∊⍴,FN←FunctionName ⋄ :return ⋄ :endif ⍝ Not a Benefit!!
[5]   
[6]   formula←'fmSV.sActives_Basis.pgBenefits.fStandard.edBenCode' ⎕wi 'text'
[7]   comment←DLTB 'fmSV.sActives_Basis.pgBenefits.fStandard.edComment' ⎕wi 'text'
[8]   BENpos←¯1+WHERE ('⍝' StripText formula) ⎕SS 'BEN'
[9]   BENnos←(formula,'   ')[BENnos←MATRIX BENpos∘.+4 5]
[10]  
[11]  :if BenCode≡formula ⋄ :andif Comment≡comment ⋄ :andif 0∊⍴BENpos
[12]      :return ⍝ No Changes made and no "standard" benefits
[13]  :endif
[14]  
[15]  :if ~^/(⎕AV⍳,BENnos)∊48+⍳10 ⍝ Numeric Benefit Number
[16]      MDISPLAY 'NoBenDef' ⋄ :return
[17]  :endif
[18]  :if ~^/(MatrixZWB BENnos)∊⍳1↑⍴1 0↓⍙POPUPSdict ReadDictFile 'BENDesc'
[19]      MDISPLAY 'NoBenDef' ⋄ :return ⍝ Only available Benefit Definitions
[20]  :endif
[21]  
[22]  fncode←0 0⍴NEWparms←''
[23]  :if ~BENnos≡(BenCode,'   ')[MATRIX (¯1+WHERE ('⍝' StripText BenCode) ⎕SS 'BEN')∘.+4 5] ⍝ Check if BENnos changed (inc order)
[24]      ALLparms←''
[25]  :endif
[26]  ALLparms←ALLparms,(0⌈(⍴,BENpos)-+/'ß'=ALLparms)/'ß'
[27]  
[28]  :if ~0∊⍴BENpos
[29]      Win∆AssignVars ControlName ⋄ TableAdded←0
[30]      'PARMWIN' CallModule 'Define_Benefit'
[31]      :if TableAdded ⋄ Assign_Inputs 0 ⋄ :endif
[32]      :if 0∊⍴,fncode ⋄ :return ⋄ :endif ⍝ User cancelled
[33]  :endif
[34]  
[35]  fn←(BenefitName CREATEFN FN) OVER fncode OVER ' '
[36]  ⍝ Convert formula to A,B,C etc.
[37]  fn←fn OVER (('∆' StripText FN),'←',BENpos BENFORM formula),(~0∊⍴comment)/' ⍝ ',comment
[38]  
[39]  :if ⎕VI ⍕1↑⎕DEF fn
[40]      MDISPLAY 'Benefit Formula in Error' ⋄ :return
[41]  :endif
[42]  WRITEDATA ⍝ Write Benefit Parameters back to ?form
[43]  0 0⍴(⊂'trBenefit') Actives_Basis 'Change'
    ∇
