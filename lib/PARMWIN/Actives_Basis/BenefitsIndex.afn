    ∇ nested←BenefitsIndex;⎕io;ben;type;TotShort;FutShort;Total;Future;NO;ben1
[1]   ⍝ PARMWIN.sf#6
[2]   ⍝ nested contains the benefit information in a form suitable for a tree
[3]   
[4]   :select uk
[5]   :case 0
[6]       type←'Lump Sum (' 'Pension 1 (' 'Pension 2 (' 'Preserved ('
[7]       TotShort←4 2⍴'TCP1P2PC' ⋄ FutShort←4 2⍴'FCF1F2FP'
[8]   :case 2
[9]       type←⊂MATRIX 'Pension 5 ('
[10]      TotShort←1 2⍴'P5' ⋄ FutShort←1 2⍴'F5'
[11]  :endselect
[12]  
[13]  ⎕io←1 ⋄ nested←0 2⍴0
[14]  :for ben :in m2n BenNames[⍳4;]
[15]      ben1←⍬⍴1↑ben
[16]      :if uk=2 ⋄ :andif ben1='W' ⋄ ben1←'L' ⋄ :endif
[17]      nested←nested⍪2,⊂ben
[18]      nested←nested⍪3,⊂'Total Service'
[19]      Total←m2n (RJUSTIFY ⊃type),ben1,TotShort,')'
[20]      nested←nested⍪4,[1.5]((⍴,type)↑1 1 1,'W'=ben1)/Total
[21]      nested←nested⍪3,⊂'Future Service'
[22]      Future←m2n (RJUSTIFY ⊃type),ben1,FutShort,')'
[23]      nested←nested⍪4,[1.5]((⍴,type)↑1 1 1,'W'=ben1)/Future
[24]      :if uk=0
[25]      :andif (⊂ben)∊'Mortality' 'Disablement'
[26]          nested←nested⍪3,⊂'Insured'
[27]          nested←nested⍪4,⊂'Lump Sum (I',ben1,'C)'
[28]      :endif
[29]  :endfor
[30]  
[31]  :if uk=0
[32]      nested←nested⍪2,⊂'Accrued'
[33]      nested←nested⍪3,⊂'Total Service'
[34]      NO←'I1' ⎕fmt ⍳7
[35]      nested←nested⍪4,[1.5]⎕split (7 8⍴'Benefit '),NO,(7 5⍴' (VAB'),NO,')'
[36]  :endif
    ∇
