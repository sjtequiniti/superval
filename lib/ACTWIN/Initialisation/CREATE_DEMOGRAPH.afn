    ∇ CREATE∆DEMOGRAPH;SImpTbl;PImpTbl;Ialpha;Ibeta;IImpTbl;Malpha;Mbeta;z;RXXbyRetAge;SIMPTBL;PIMPTBL;IMPTBL;IIMPTBL;∆;desc;rec
[1]   ⍝ ACTWIN.sf#2
[2]   ⍝ Assign the Membership and Demographic parameters specified
[3]   ReBasedIMPtab←MATRIX 'desc' 'ts' 'IMPtable'
[4]   
[5]   ⍝ Define various Retirement Ages
[6]   NRA←zwb NRA
[7]   :if ppf ⋄ :orif bencap
[8]       NRA←⌈/NRA,ppf×PPFNRAALL←(NRA×0=PPFNRAALL)+PPFNRAALL←4↑MatrixZWB PPFNRAALL
[9]   :endif
[10]  LRA←NRA⌈zwb LRA
[11]  :if 2=nrdind←0⌈¯1+('' 'Exact Birthday' 'End of Month following Birthday' 'End of Year following Birthday')⍳⊂DLTB nrdind
[12]      nrDATE←31 12
[13]      ⍝⍝⍝ nrDATE←MatrixZWB SStoMAT '/',nrDATE
[14]  :else
[15]      nrDATE←2↑VDATE
[16]  :endif
[17]  :if ~DeferNRA←(NRA≠NRA∆G←zwb NRA∆G)^(dab^('D'=DeferNRA)∨~bAltNRA)∨('A'=DeferNRA←↑DeferNRA)
[18]      NRA∆G←NRA
[19]  :endif
[20]  pRA←NRA∆G
[21]  PHIEndAge←PHI×zwb PHIEndAge ⍝⍝⍝ NRA⌊ ???
[22]  
[23]  :if uk=1
[24]      erA←erS←99 ⋄ erSind←0 ⋄ erSUM←999 ⋄ erDATE←'DOB + 0 0,NRA' ⍝ Defaults for Aust Early Retirement parameters
[25]      ProRate←1 ⋄ pucind←1
[26]  :else
[27]      erA←zwb '99 ',erA ⋄ erS←zwb '99 ',erS ⋄ erSind←zwb ' ' StripText erSind ⋄ erSUM←zwb '999 ',erSUM
[28]      :if 0∊⍴erDATE←,ConvertDates erDATE
[29]          erDATE←'NRD'
[30]      :endif
[31]  :endif
[32]  lra←(LatestAge←LatestRA←LRA⌈PHIEndAge⌈NRA∆G⌈SPA×~IsDeferred)+(uk≠1)×nrdind=2
[33]  :if IndSlices
[34]      z←×/¨⎕vi¨⎕split IndPayStart ⋄ LatestAge←⌈/LatestAge,(MatrixZWB z⌿IndPayStart),100×∨/~z
[35]  :endif
[36]  
[37]  :if newent ⋄ projTerm←zwb ProjTerm ⍝ Required for Length of Financial Assumptions
[38]  :else      ⋄ projTerm←0
[39]  :endif
[40]  :if ×DurnTerm←projTerm×'VDATE'≡DurnDate←,ConvertDates ↑⌽'Date' SwapRelFields lrDurnDate DurnDate
[41]      DurnDate←'OrigVDATE' ⋄ OrigVDATE←vDATE
[42]  :endif
[43]  
[44]  DXX←lra↑[2=⍴⍴DXX]DXX←(0,DurnTerm,0) Rate∆Create DXX
[45]  
[46]  ⍝⍝⍝ QXdef required for Annuities ⍝⍝⍝
[47]  :if 2=⍴⍴DXX ⋄ QXdef←,1↑[1](⍳120)⌽DXX ⍝⍝⍝ Assume Death Rates at Duration 0
[48]  :else       ⋄ QXdef←120↑DXX
[49]  :endif
[50]  
[51]  IXX←(0,DurnTerm,0) Rate∆Create IXX
[52]  LXX←(0,DurnTerm,0) Rate∆Create WXX
[53]  RXXbyRetAge←^/'R'=UPPERCASE 2↑DLTB RXX
[54]  RXX←(0,DurnTerm,0) Rate∆Create RXX
[55]  :if RXXbyRetAge ⋄ RXX←RXX AgeSelect NRA ⋄ :endif
[56]  :if ~×DurnTerm ⍝ Restrict to latest age
[57]      RXX←lra↑[2=⍴⍴RXX]RXX ⋄ IXX←lra↑[2=⍴⍴IXX]IXX ⋄ LXX←lra↑[2=⍴⍴LXX]LXX
[58]  :endif
[59]  TXX←(LatestRA+newent×projTerm) OVERTAKE ¯1 DEC∆CHECK TXX ⋄ TXX0←(LatestRA+newent×projTerm)⍴1
[60]  
[61]  dECR∆IND←defind←0
[62]  QXret←(0,DurnTerm,1,⍳NRA) Rate∆Create QXret
[63]  QXill←(0,DurnTerm,1,⍳NRA) Rate∆Create QXill
[64]  QY   ←(0,DurnTerm,1,⍳120) Rate∆Create QYret
[65]  
[66]  PREMEMB  ←,'Act' DescToVariableUK PREMEMB
[67]  PPOSTMEMB←,'Act' DescToVariableUK PPOSTMEMB
[68]  SPOSTMEMB←,'Act' DescToVariableUK SPOSTMEMB
[69]  ILLMEMB  ←,'Act' DescToVariableUK ILLMEMB
[70]  
[71]  ⍝⍝⍝ :if aosind ⋄ ivper←⌊0.5+(¯1↑vDATE)-¯1↑pvDATE ⋄ :endif
[72]  
[73]  ⍝ Pre Retirement Mortality Improvement
[74]  ⍝⍝⍝ :if ¯1=↑Malpha←120 OVERTAKE (¯1 DEC∆CHECK ALPHA),1 ⋄ Malpha←120/1 ⋄ :endif
[75]  :if ¯1=↑Malpha←120 OVERTAKE ¯1 DEC∆CHECK ALPHA ⋄ Malpha←120/1 ⋄ :endif
[76]  ⍝⍝⍝ :if ¯1=↑Mbeta ←120 OVERTAKE (¯1 DEC∆CHECK BETA ),0 ⋄ Mbeta ←120/0 ⋄ :endif ⍝⍝⍝ UK error Padded with zeroes
[77]  :if ¯1=↑Mbeta ←120 OVERTAKE ¯1 DEC∆CHECK BETA ⋄ Mbeta ←120/0 ⋄ :endif
[78]  BASE←zwb BASE ⋄ BETAYRS←zwb BETAYRS ⋄ CMSL←zwb CMSL ⋄ SMSL←zwb SMSL
[79]  PRERATE←(zwb RATEIMPR)×ZWB PRERATE ⋄ IMPORIG←zwb IMPORIG
[80]  
[81]  :select MORTIMPR←↑MORTIMPR
[82]  :case 'N' ⋄ PreImp←,0
[83]  :case 'A' ⋄ PreImp←PRERATE Malpha Mbeta BETAYRS BASE "¯1↑DOB"
[84]  :case 'C' ⋄ PreImp←PRERATE Malpha Mbeta BETAYRS      CMSL
[85]  :case 'S' ⋄ PreImp←PRERATE Malpha Mbeta BETAYRS BASE SMSL
[86]  :case '2'
[87]      :if MTmat IMPTBLrt[0;] ⋄ IMPTBL←READ2D IMPTBLcsv
[88]      :elseif               ¯1≡IMPTBL←¯1 DEC∆CHECK IMPTBLrt ⋄ IMPTBL←120 120⍴0
[89]      :endif
[90]      (IMPTBL rec)←(1 PREORIG IMPORIG) ReBaseMortImp IMPTBL IMPTBLcsv IMPTBLrt lrIMPTBLrt1
[91]      ReBasedIMPtab←ReBasedIMPtab OVER rec
[92]  ⍝⍝⍝    :if aosind ⋄ AllPImpTbl←(1,size←⍴AllPImpTbl)⍴AllPImpTbl←(IMPORIG,pvDATE[2]) Adjust2D IMPTBL
[93]  ⍝⍝⍝        :if 0<ivper
[94]  ⍝⍝⍝            :for idx :in 1+⍳ivper
[95]  ⍝⍝⍝                AllPImpTbl←AllPImpTbl⍪(1,size)⍴size↑(IMPORIG,pvDATE[2]+idx) Adjust2D IMPTBL
[96]  ⍝⍝⍝            :endfor
[97]  ⍝⍝⍝        :endif
[98]  ⍝⍝⍝        AllPreImp←AllPImpTbl "X0" ' ' ' ' ' ' PRERATE
[99]  ⍝⍝⍝    :else
[100]     PImpTbl←(IMPORIG,VDATE[2],DurnTerm) Adjust2D IMPTBL
[101]     PreImp←PRERATE PImpTbl
[102] ⍝⍝⍝    :endif
[103] :endselect
[104] 
[105] ⍝ Member Post Retirement Mortality Improvement
[106] ⍝⍝⍝ :if ¯1=↑Palpha←120 OVERTAKE (¯1 DEC∆CHECK PALPHA),1 ⋄ Palpha←120/1 ⋄ :endif
[107] :if ¯1=↑Palpha←120 OVERTAKE ¯1 DEC∆CHECK PALPHA ⋄ Palpha←120/1 ⋄ :endif
[108] ⍝⍝⍝ :if ¯1=↑Pbeta ←120 OVERTAKE (¯1 DEC∆CHECK PBETA ),0 ⋄ Pbeta ←120/0 ⋄ :endif ⍝⍝⍝ UK error Padded with zeroes
[109] :if ¯1=↑Pbeta ←120 OVERTAKE ¯1 DEC∆CHECK PBETA ⋄ Pbeta ←120/0 ⋄ :endif
[110] PBASE←zwb PBASE ⋄ PBETAYRS←zwb PBETAYRS ⋄ PCMSL←zwb PCMSL ⋄ PSMSL←zwb PSMSL
[111] PPOSTRATE←(zwb PRATEIMPR)×ZWB PPOSTRATE ⋄ PIMPORIG←zwb PIMPORIG
[112] 
[113] :select PMORTIMPR←↑PMORTIMPR
[114] :case 'N' ⋄ PostImpM←,0
[115] :case 'A' ⋄ PostImpM←PPOSTRATE Palpha Pbeta PBETAYRS PBASE "¯1↑DOB"
[116] :case 'C' ⋄ PostImpM←PPOSTRATE Palpha Pbeta PBETAYRS       PCMSL
[117] :case 'S' ⋄ PostImpM←PPOSTRATE Palpha Pbeta PBETAYRS PBASE PSMSL
[118] :case '2'
[119]     :if MTmat PIMPTBLrt[0;] ⋄ PIMPTBL←READ2D PIMPTBLcsv
[120]     :elseif                ¯1≡PIMPTBL←¯1 DEC∆CHECK PIMPTBLrt ⋄ PIMPTBL←120 120⍴0
[121]     :endif
[122]     (PIMPTBL rec)←(1 PPOSTORIG PIMPORIG) ReBaseMortImp PIMPTBL PIMPTBLcsv PIMPTBLrt lrPIMPTBLrt1
[123]     ReBasedIMPtab←ReBasedIMPtab OVER rec
[124] ⍝⍝⍝    :if aosind ⋄ AllPImpTbl←(1,size←⍴AllPImpTbl)⍴AllPImpTbl←(PIMPORIG,pvDATE[2]) Adjust2D PIMPTBL
[125] ⍝⍝⍝        :if 0<ivper
[126] ⍝⍝⍝            :for idx :in 1+⍳ivper
[127] ⍝⍝⍝                AllPImpTbl←AllPImpTbl⍪(1,size)⍴size↑(PIMPORIG,pvDATE[2]+idx) Adjust2D PIMPTBL
[128] ⍝⍝⍝            :endfor
[129] ⍝⍝⍝        :endif
[130] ⍝⍝⍝        AllPostImpM←AllPImpTbl "X0" ' ' ' ' ' ' PPOSTRATE
[131] ⍝⍝⍝    :else
[132]     PImpTbl←(PIMPORIG,VDATE[2],DurnTerm) Adjust2D PIMPTBL
[133]     PostImpM←PPOSTRATE PImpTbl
[134] ⍝⍝⍝    :endif
[135] :endselect
[136] 
[137] ⍝ Ill Health Retirement Mortality Improvement
[138] ⍝⍝⍝ :if ¯1=↑Ialpha←120 OVERTAKE (¯1 DEC∆CHECK IALPHA),1 ⋄ Ialpha←120/1 ⋄ :endif
[139] :if ¯1=↑Ialpha←120 OVERTAKE ¯1 DEC∆CHECK IALPHA ⋄ Ialpha←120/1 ⋄ :endif
[140] ⍝⍝⍝ :if ¯1=↑Ibeta ←120 OVERTAKE (¯1 DEC∆CHECK IBETA ),0 ⋄ Ibeta ←120/0 ⋄ :endif ⍝⍝⍝ UK error Padded with zeroes
[141] :if ¯1=↑Ibeta ←120 OVERTAKE ¯1 DEC∆CHECK IBETA ⋄ Ibeta ←120/0 ⋄ :endif
[142] IBASE←zwb IBASE ⋄ IBETAYRS←zwb IBETAYRS ⋄ ICMSL←zwb ICMSL ⋄ ISMSL←zwb ISMSL
[143] ILLRATE←(zwb IRATEIMPR)×ZWB ILLRATE ⋄ IIMPORIG←zwb IIMPORIG
[144] 
[145] :select IMORTIMPR←↑IMORTIMPR
[146] :caselist 'N' ' ' ⋄ IMORTIMPR←'N' ⋄ IllImp←,0
[147] :case 'A' ⋄ IllImp←ILLRATE Ialpha Ibeta IBETAYRS IBASE "¯1↑DOB"
[148] :case 'C' ⋄ IllImp←ILLRATE Ialpha Ibeta IBETAYRS       ICMSL
[149] :case 'S' ⋄ IllImp←ILLRATE Ialpha Ibeta IBETAYRS IBASE ISMSL
[150] :case '2'
[151]     :if MTmat IIMPTBLrt[0;] ⋄ IIMPTBL←READ2D IIMPTBLcsv
[152]     :elseif                ¯1≡IIMPTBL←¯1 DEC∆CHECK IIMPTBLrt ⋄ IIMPTBL←120 120⍴0
[153]     :endif
[154]     (IIMPTBL rec)←(1 ILLORIG IIMPORIG) ReBaseMortImp IIMPTBL IIMPTBLcsv IIMPTBLrt lrIIMPTBLrt1
[155]     ReBasedIMPtab←ReBasedIMPtab OVER rec
[156] ⍝⍝⍝    :if aosind ⋄ AllIImpTbl←(1,size←⍴AllIImpTbl)⍴AllIImpTbl←(IIMPORIG,pvDATE[2]) Adjust2D IIMPTBL
[157] ⍝⍝⍝        :if 0<ivper
[158] ⍝⍝⍝            :for idx :in 1+⍳ivper
[159] ⍝⍝⍝                AllIImpTbl←AllIImpTbl⍪(1,size)⍴size↑(IIMPORIG,pvDATE[2]+idx) Adjust2D IIMPTBL
[160] ⍝⍝⍝            :endfor
[161] ⍝⍝⍝        :endif
[162] ⍝⍝⍝        AllIllImp←AllIImpTbl "X0" ' ' ' ' ' ' ILLRATE
[163] ⍝⍝⍝    :else
[164]         IImpTbl←(IIMPORIG,VDATE[2],DurnTerm) Adjust2D IIMPTBL
[165]         IllImp←ILLRATE IImpTbl
[166] ⍝⍝⍝    :endif
[167] :endselect
[168] 
[169] SPMethod←('ERD'=↑SPMethod)/¯1 0 1 ⍝ Spouse at Exit, Retirement or Death
[170] :if mt PropMarr ⋄ HXX←(0 0 0) Rate∆Create HXX ⋄ HXX←120 OVERTAKE 100↑HXX ⍝⍝⍝ HXX←120↑HXX ⍝⍝⍝ UK Error - see also PRELIM (VALNWIN#3)
[171] :else           ⋄ HXX←120⍴0.01×zwb PropMarr
[172] :endif
[173] HMPXX←lra↑MID HXX
[174] 
[175] :if varyAge∆←∨/' '≠AGEDIFT ⋄ AGEDIF←120↑¯1 DEC∆CHECK AGEDIFT
[176] :else                      ⋄ AGEDIF←ZWB AGEDIF
[177] :endif
[178] 
[179] ⍝ Spouse Post Retirement Mortality Improvement
[180] ⍝⍝⍝ :if ¯1=↑Salpha←120 OVERTAKE (¯1 DEC∆CHECK SALPHA),1 ⋄ Salpha←120/1 ⋄ :endif
[181] :if ¯1=↑Salpha←120 OVERTAKE ¯1 DEC∆CHECK SALPHA ⋄ Salpha←120/1 ⋄ :endif
[182] ⍝⍝⍝ :if ¯1=↑Sbeta ←120 OVERTAKE (¯1 DEC∆CHECK SBETA ),0 ⋄ Sbeta ←120/0 ⋄ :endif ⍝⍝⍝ UK error Padded with zeroes
[183] :if ¯1=↑Sbeta ←120 OVERTAKE ¯1 DEC∆CHECK SBETA ⋄ Sbeta ←120/0 ⋄ :endif
[184] SBASE←zwb SBASE ⋄ SBETAYRS←zwb SBETAYRS ⋄ SCSC←zwb SCSC ⋄ SSSC←zwb SSSC ⋄ SCSSL←zwb SCSSL ⋄ SSSSL←zwb SSSSL
[185] SPOSTRATE←(zwb SRATEIMPR)×ZWB SPOSTRATE ⋄ SIMPORIG←zwb SIMPORIG
[186] 
[187] :select SMORTIMPR←↑SMORTIMPR
[188] :case 'N' ⋄ PostImpS←DisImp←DisImpDID←,0
[189] :case 'A'
[190]     :if varyAge∆ ⍝ Age related age difference
[191]         PostImpS←DisImp←SPOSTRATE Salpha Sbeta SBETAYRS SBASE "¯29+(⍳59)+¯1↑DOB"
[192]         DisImpDID←      SPOSTRATE Salpha Sbeta SBETAYRS SBASE "AGEDIF[X0]+¯1↑DOB"
[193]     :else
[194]         PostImpS←DisImp←SPOSTRATE Salpha Sbeta SBETAYRS SBASE "AGEDIF+¯1↑DOB"
[195]     :endif
[196] :case 'C'
[197]     PostImpS        ←SPOSTRATE Salpha Sbeta SBETAYRS       SCSC
[198]     DisImpDID←DisImp←SPOSTRATE Salpha Sbeta SBETAYRS       SCSSL
[199] :case 'S'
[200]     PostImpS        ←SPOSTRATE Salpha Sbeta SBETAYRS SBASE SSSC
[201]     DisImpDID←DisImp←SPOSTRATE Salpha Sbeta SBETAYRS SBASE SSSSL
[202] :case '2'
[203]     :if MTmat SIMPTBLrt[0;] ⋄ SIMPTBL←READ2D SIMPTBLcsv
[204]     :elseif                ¯1≡SIMPTBL←¯1 DEC∆CHECK SIMPTBLrt ⋄ SIMPTBL←120 120⍴0
[205]     :endif
[206]     (SIMPTBL rec)←(1 SPOSTORIG SIMPORIG) ReBaseMortImp SIMPTBL SIMPTBLcsv SIMPTBLrt lrSIMPTBLrt1
[207]     ReBasedIMPtab←ReBasedIMPtab OVER rec
[208] ⍝⍝⍝    :if aosind ⋄ AllSImpTbl←(1,size←⍴AllSImpTbl)⍴AllSImpTbl←(SIMPORIG,pvDATE[2]) Adjust2D SIMPTBL
[209] ⍝⍝⍝        :if 0<ivper
[210] ⍝⍝⍝            :for idx :in 1+⍳ivper
[211] ⍝⍝⍝                AllSImpTbl←AllSImpTbl⍪(1,size)⍴size↑(SIMPORIG,pvDATE[2]+idx) Adjust2D SIMPTBL
[212] ⍝⍝⍝            :endfor
[213] ⍝⍝⍝        :endif
[214] ⍝⍝⍝        AllPostImpS←AllDisImp←AllSImpTbl "X0-AGEDIF" ' ' ' ' ' ' SPOSTRATE
[215] ⍝⍝⍝    :else
[216]         SImpTbl←(SIMPORIG,VDATE[2],DurnTerm) Adjust2D SIMPTBL
[217]         PostImpS←DisImp←DisImpDID←SPOSTRATE SImpTbl
[218] ⍝⍝⍝    :endif
[219] :endselect
[220] 
[221] :if ppf ⋄ DXX∆PPF←DXX ⋄ :endif
[222] 
[223] ⍝⍝⍝ FIXME ⍝⍝⍝
[224] TPXX←TOXX←100⍴0
[225] transfers←∨/0≠TOXX,TPXX ⍝ Indicator of whether non-zer Transfers
    ∇
