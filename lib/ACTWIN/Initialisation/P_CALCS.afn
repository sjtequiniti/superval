    ∇ res←P∆CALCS;An;Ay;DEF;EDEF;H;L;LX;LXdef;LY;PVM;PVMdef;PVPB;RGP;Y;v;vMP;vdef
[1]   ⍝ ACTWIN.sf#2
[2]   ⍝ Calc value of the single life pension and reversion
[3]   res←⍳0
[4]   ⍝ Sets up vectors of LX and LY (Note change from standard).
[5]   LX←(121-X)↑1,×\1-X↓(def↑QXdef),def↓QXret×Palpha+(1-Palpha)×1⌊(1-Pbeta)*MBase CDIV PBETAYRS
[6]   LY←(121-X)↑1,×\1-(X-∆)↓((0⌈def-∆)↑QYdef),(0⌈def-∆)↓QY×Salpha+(1-Salpha)×1⌊(1-Sbeta)*FBase CDIV SBETAYRS
[7]   L1:Y←X-∆
[8]   REVdef←REVdef××DEF←0⌈def-X
[9]   RGP←0⌈(GP-(def≠0)×0⌈X-def)⌊EDEF←TOP-X
[10]  ⍝ OVERTAKE i, PVM to allow for sliding-scale vectors and set up vectors
[11]  v←(vdef÷1,¯1↓vdef←1÷1+(¯1+i∆l)×+\pi∆l*⍳DEF),DEF↓(120-X)OVERTAKE÷i∆l
[12]  PVM←(PVMdef←DEF OVERTAKE pvmdef∆l),DEF↓(120-X)OVERTAKE pvm∆l
[13]  ⍎(~pvmind[0]∨RGP=An←PVPB←0)/'An←ANCALC'
[14]  vMP←1↓(v←1,×\v)×PVM←(1,×\PVM)-pvmind[1]
[15]      :if pvmind[0]≠1
[16]          ⍝ Calculate the value of the single life pension
[17]          PVPB←(An×v[DEF]×PVM[DEF]+pvmind[1])+(+/(RGP+DEF)↓EDEF↑vMP×1↓LX)+penmult×-/(v×PVM×LX)[(DEF+RGP),EDEF]
[18]      :endif
[19]      :if (REV≠0)
[20]          ⍝ Calculate the value of the reversion if applic.
[21]          H←EDEF OVERTAKE HXX∆l[X+⍳DEF+1] ⍝ Proportion Married
[22]              :if (REVdef)
[23]                  ⍝ Reversion in Deferment
[24]                  Ay←DEF↑MID penmult+(⌽+\⌽L)CDIV 1,¯1↓L←(×\1-Y↓QY)××\((120-Y)OVERTAKE pvm∆l)÷(120-Y)OVERTAKE i∆l
[25]                      :if pvmind[1]
[26]                          Ay←Ay-DEF↑MID penmult+(⌽+\⌽L)CDIV 1,¯1↓L←(×\1-Y↓QY)÷×\(120-Y)OVERTAKE i∆l
[27]                      :endif
[28]                  PVPB←PVPB++/Ay×(MID 1,vdef××\PVMdef)×REV×(DEF↑H)×(-DEF↑DIFF LX)×DEF↑MID LY
[29]              :endif
[30]          LXdef←LX[DEF]
[31]          PVPB←PVPB+H[DEF]×REV×(+/(vMP×1↓L)×(120-X)OVERTAKE((DEF,RGP)/0,GPOlap),1)+penmult×(v×PVM×L←LY×LXdef-LX⌈LX[EDEF])[DEF+RGP×~GPOlap]
[32]      :endif
[33]  res←res,PVPB
[34]  LX←LX CDIV 1↑LX←1↓LX
[35]  LY←LY CDIV 1↑LY←1↓LY
[36]  →(EAGE∆l≥X←X+1)/L1
    ∇
