    ∇ INIT∆PPF;ACCPEN0;D;DX3;DX3XX;FASMPvec;I;ILLIND;LFC;LFONTOP;LONTOP;LTC;LX;OLDAGES;PMMP;PSMP;SALMPvec;TOTPEN0;∆A;ldate;⍙REVRAT;⍙grev;∆C;PRE97;PRE97∆DID;POST97;POST97∆DID;LTONTOP∆DID;PRE97W;POST97W;EXCESS;NRA∆L;capratio;captot;capall;capvector;LIST;idx;SPRE97;SPOST97;CTYPE∆L;COMSAL∆L;COMDAT∆L;COMPIND;LTONTOPPRE;LTONTOPPRE∆DID;maxNRA;∆pre97;∆pre97∆DID;LTONTOPPOST97∆DID;LTONTOPPOST09;LTONTOPPOST97;LTONTOPPOST09∆DID;POST09;cashfacs;ltontops;preposts;POST09W;factor;flag;xxx;Befr;Aftr;Pst9;aSLI;aREV;aUND;aMAX;aERF;LTONTOP;aNRA;aDYN;XMP;COMACC∆L;SRVMAXMP;DISSRVMAXMP;IHSRVMAXMP;Xret;ILLFACT;ILLFACTC;ERFAC;ERFACF;BARBFAC;BARBFACF;ERFACC;ERFACFC;BARBFACC;BARBFACFC
[1]   ⍝ ACTWIN.sf#11
[2]   ⍝ Accurate Accrued Benefit Processing ... Re-Run benefit modules
[3]   ⍝ Initialise Individual Output
[4]   
[5]   ⍝ Indices for ERPEN are:
[6]   ⍝   0 - 0 Special
[7]   ⍝       1 Main
[8]   ⍝       2 Limited
[9]   ⍝       3 PenInc4
[10]  ⍝   1 - 0 Before split
[11]  ⍝       1 After split
[12]  ⍝       2 Future
[13]  ⍝   2 - 0 Subject to Revaluation
[14]  ⍝       1 Auxrev
[15]  ⍝       2 Revrat3
[16]  ⍝   3 - 0 Include in Underpin
[17]  ⍝       1 Exclude from Underpin
[18]  ⍝   4 - 0 Include in IRMax
[19]  ⍝       1 Exclude from IRMax
[20]  ⍝   5 - 0 ER Factor 1
[21]  ⍝       1 ER Factor 2
[22]  ⍝   6 - Vector of term to NRA
[23]  ⍝
[24]  Ind∆Output←PP∆InterfaceHeader 'Ind'
[25]  ⍝
[26]  XMP←Xret←NRA⌊X
[27]  ldate←MATRIX ValDATE ⋄ SRVMAXMP←SRVMAX ⋄ DISSRVMAXMP←DISSRVMAX ⋄ IHSRVMAXMP←IHSRVMAX
[28]  ⍝
[29]  :if ~s143 ⍝ s143 depend on size of benefits and are done later
[30]      ⍝ Use un-interpolated deferment factors
[31]      DX3XX←DX3XXA ⋄ DX3←(X0↓NRA↑DX3XX),DX3XX[X0⌈NRA]
[32]  :endif
[33]  ⍝
[34]  INIT∆SERV
[35]  ILLIND←COMPIND←0
[36]  FASMPvec←FASvec ⋄ SALMPvec←SALvec
[37]  PMMP←PM ⋄ PSMP←PS
[38]  INIT∆PENS
[39]  (aDYN aSLI aREV aUND aMAX aERF aNRA)←⍳⍴⍴TPEN    ⍝ axis labels
[40]  (Befr Aftr xxx Pst9)←⍳4                         ⍝ enumerate 2nd axis: slicing
[41]  IGNOREGMP←'Y - Yes' ⍝ Code below left intact in case there is another change
[42]  GMP0←GMPE0←0
[43]  INIT∆GMP
[44]  IRCash←IRCASH←NOM×10000000000 ⍝ Stop crash in INIT∆CASH
[45]  PRE97 ←+/[aSLI]+/[aREV]+/[aUND]+/[aMAX]+/[aERF] TPEN[;,Befr;;;;;] ⍝ [aDYN;aNRA]
[46]  POST97←+/[aSLI]+/[aREV]+/[aUND]+/[aMAX]+/[aERF] TPEN[;,Aftr;;;;;]
[47]  POST09←+/[aSLI]+/[aREV]+/[aUND]+/[aMAX]+/[aERF] TPEN[;,Pst9;;;;;]
[48]  
[49]  RedefinePre97:
[50]  :if 0≠↑∆pre97←+⌿PRE97 ⍝ sum across dynamism - [aNRA]
[51]      EXCESS←1+(0⌈GMP0+GMPE0-∆pre97) CDIV ∆pre97
[52]      PRE97←EXCESS×[⎕io+1] PRE97
[53]  :else
[54]      PRE97←PRE97×0
[55]      PRE97[⎕io;]←GMP0+GMPE0 ⍝ Put GMP as NRA1
[56]  :endif
[57]    PRE97∆DID← +/[aSLI]+/[aREV]+/[aUND]+/[aMAX]+/[aERF] PPF∆DIDTPEN[;,Befr;;;;;]
[58]    POST97∆DID←+/[aSLI]+/[aREV]+/[aUND]+/[aMAX]+/[aERF] PPF∆DIDTPEN[;,Aftr;;;;;]
[59]    POST09∆DID←+/[aSLI]+/[aREV]+/[aUND]+/[aMAX]+/[aERF] PPF∆DIDTPEN[;,Pst9;;;;;]
[60]  :if 0≠↑∆pre97∆DID←+⌿PRE97∆DID
[61]      EXCESS←1+(0⌈GMP0+GMPE0-∆pre97∆DID) CDIV ∆pre97∆DID
[62]      PRE97∆DID←EXCESS×[⎕io+1] PRE97∆DID
[63]  :else
[64]      PRE97∆DID←PRE97∆DID×0
[65]      PRE97∆DID[⎕io;]←GMP0+GMPE0
[66]  :endif
[67]  LTONTOP∆DID←LTONTOP←LTONTOPPRE←LTONTOPPOST97←LTONTOPPOST09←LTONTOPPRE∆DID←LTONTOPPOST97∆DID←LTONTOPPOST09∆DID←0×PRE97
[68]  :if ClntCode=3 ⋄ :orif bBuck
[69]      (CTYPE∆L COMACC∆L COMSAL∆L COMDAT∆L)←CTYPE2 COMACC2 COMSAL2 COMDAT2
[70]  :else
[71]      (CTYPE∆L COMACC∆L COMSAL∆L COMDAT∆L)←CTYPE COMACC COMSAL COMDAT
[72]  :endif
[73]  :if CONTOP∨bBuck∨ClntCode=3
[74]      CASH∆ONTOP∆PPF
[75]  :endif
[76]  LIST←(1,~(1↓LIST)=¯1 ↓LIST)/LIST←PPFNRAALL[⍋PPFNRAALL] ⍝ List of NRAs in ascending order
[77]  
[78]  captot←(¯1↑⍴PRE97)⍴OffCap
[79]  capvector←100⍴1
[80]  capall←4 100⍴1
[81]  :if ~s143 ⍝ Find max NRA where the member has a benefit
[82]      capratio←(¯1↑⍴PRE97)⍴1
[83]      :for NRA∆L :in LIST
[84]          idx←(NRA∆L=PPFNRAALL)/⍳4
[85]          preposts←PRE97[idx;]+POST97[idx;]+POST09[idx;]
[86]          cashfacs←NRA∆L⊃¨2 1/PPFCASHFAC PPFCASHFAC2 ⍝ NB same for POST97 and POST09
[87]          ltontops←(LTONTOPPOST09[idx;])(LTONTOPPOST97[idx;])(LTONTOPPRE[idx;])
[88]          :if  0∨.≠,+⌿preposts+↑+/ltontops CDIV¨cashfacs
[89]              maxNRA←NRA∆L
[90]          :endif
[91]      :endfor
[92]  :endif
[93]  
[94]  :for NRA∆L :in LIST
[95]      idx←(NRA∆L=PPFNRAALL)/⍳4
[96]      preposts←PRE97[idx;]+POST97[idx;]+POST09[idx;]
[97]      cashfacs←NRA∆L⊃¨2 1/PPFCASHFAC PPFCASHFAC2 ⍝ NB same for POST97 and POST09
[98]      ltontops←(LTONTOPPOST09[idx;])(LTONTOPPOST97[idx;])(LTONTOPPRE[idx;])
[99]      :if    0∨.≠,+⌿preposts+↑+/ltontops CDIV¨cashfacs
[100]     :andif NRA∆L≥X0+PPF∆ageadj
[101]         ⍝ ⎕io is 0 here
[102]         :if s143
[103]             factor←PPFCAPADJ[NRA∆L]×s143capinc*0⌈NRA∆L-X0
[104]         :else
[105]             factor←PPFCAPADJ[maxNRA]
[106]         :endif
[107]         captot←captot+↑(+⌿preposts+↑+/ltontops CDIV¨cashfacs) CDIV PPFCAP×factor
[108]         capratio←0⌈1⌊1 CDIV captot
[109]         :if s143
[110]             PRE97        [idx;]←0.9×capratio×[1+⎕io] PRE97[idx;]
[111]             POST97       [idx;]←0.9×capratio×[1+⎕io] POST97[idx;]
[112]             POST09       [idx;]←0.9×capratio×[1+⎕io] POST09[idx;]
[113]             LTONTOP      [idx;]←0.9×capratio×[1+⎕io] LTONTOP[idx;]
[114]             LTONTOPPRE   [idx;]←0.9×capratio×[1+⎕io] LTONTOPPRE[idx;]
[115]             LTONTOPPOST97[idx;]←0.9×capratio×[1+⎕io] LTONTOPPOST97[idx;]
[116]             LTONTOPPOST09[idx;]←0.9×capratio×[1+⎕io] LTONTOPPOST09[idx;]
[117]             capvector←((NRA∆L-1)↑capvector),(100-NRA∆L-1)⍴capratio
[118]         :endif
[119]     :endif
[120] :endfor
[121] 
[122] :if ~s143
[123]     ⍝ Cap to be applied pro rata so use final figure for all
[124]     :for NRA∆L :in LIST
[125]         idx←(NRA∆L=PPFNRAALL)/⍳4
[126]         :if NRA∆L≥X0+PPF∆ageadj
[127]             PRE97        [idx;]←0.9×capratio×[1+⎕io] PRE97[idx;]
[128]             POST97       [idx;]←0.9×capratio×[1+⎕io] POST97[idx;]
[129]             POST09       [idx;]←0.9×capratio×[1+⎕io] POST09[idx;]
[130]             LTONTOP      [idx;]←0.9×capratio×[1+⎕io] LTONTOP[idx;]
[131]             LTONTOPPRE   [idx;]←0.9×capratio×[1+⎕io] LTONTOPPRE[idx;]
[132]             LTONTOPPOST97[idx;]←0.9×capratio×[1+⎕io] LTONTOPPOST97[idx;]
[133]             LTONTOPPOST09[idx;]←0.9×capratio×[1+⎕io] LTONTOPPOST09[idx;]
[134]         :endif
[135]     :endfor
[136]     capvector←100⍴capratio
[137] :endif
[138] 
[139] :for NRA∆L :in LIST
[140]     idx←(NRA∆L=PPFNRAALL)/⍳4
[141]     :if NRA∆L≥X0+PPF∆ageadj
[142]         capall[idx;]←((⍴idx),100)⍴100 OVERTAKE (NRA∆L-1)↓capvector CDIV capvector[NRA∆L-1]
[143]     :endif
[144] :endfor
[145] capflag←↑captot>1 ⍝ FIXME: localise?
[146] 
[147] :if ClntCode=3
[148]     flag←0≠+/,1 1 0 1/[aSLI] STPEN
[149] :else
[150]     flag←↑WARFRAC∆l≠0
[151] :endif
[152] (PRE97W POST97W POST09W)←PRE97 POST97 POST09×flag÷2
[153] 
[154] :if s143
[155]     PRELIM∆s143
[156]     ⍝ Use un-interpolated deferment factors
[157]     DX3XX←DX3XXA ⋄ DX3←(X0↓NRA↑DX3XX),DX3XX[X0⌈NRA]
[158] :endif
[159] 
[160] OUTPUT∆BEN∆PPF
[161] 
[162] XSDID←GMPDID←RETCONTS←LTC←0
[163] DID∆BEN∆PPF
    ∇
