    ∇ res←larg FRANKW rarg;⎕IO;D;DPROP;DSPA;G;GN;GR;GTEE;INT;L;LSPA;INC4;SPA4;LPROP;N;NPROP;PROP4;NSPA;V;W;X;Y;Z;idx;mat;DSPA1;NSPA1;LSPA1;SPA41;TOTSPA1;GTEE1[1]   ⍝ ACTWIN.sf#4[2]   ⍝ Widow's Franking module[3]   ⍝ larg = 0 for PEN, 1 for PUP[4]   ⍝ 'mat' is matrix of passed parameters[5]   ⍝ for Public Service case the GMP at NRA is passed as mat[;7]. This was in the original Specification but was subsequently removed.[6]   ⎕IO←1 ⍝??⍝ Do we need ⎕io set???[7]   GR←⍉⊃rarg[1]  ⍝ Axes mixed up[8]   mat←⊃rarg[2][9]   D←mat[;⎕io] ⋄ N←mat[;⎕io+1] ⋄ L←mat[;⎕io+2] ⋄ INC4←mat[;⎕io+3] ⋄ G←mat[;⎕io+5][10]  DSPA←NSPA←LSPA←SPA4←(NX,NX)⍴0[11]  :if 0=⌊larg ⍝ Retirement[12]      :for idx :in ⍳NX-SNX[13]          DSPA[idx;]←D   [idx]∘.×Wescfact1[;idx][14]          NSPA[idx;]←N   [idx]∘.×Wescfact2[;idx][15]          LSPA[idx;]←L   [idx]∘.×Wescfact6[;idx][16]          SPA4[idx;]←INC4[idx]∘.×Wescfact8[;idx][17]      :endfor[18]      INT←0⌈(DSPA-⍉(NX,NX)⍴D)+(NSPA-⍉(NX,NX)⍴N)+(LSPA-⍉(NX,NX)⍴L)+SPA4-⍉(NX,NX)⍴INC4[19]      GTEE←0⌈GR-⍉(NX,NX)⍴G[20]      :select OFFCOD[21]      :case 0       ⋄ GTEE←0⌈GTEE[22]      :case 1       ⋄ GTEE←0⌈GTEE-INT×⍉(NX,NX)⍴G CDIV D+N+L+INC4[23]      :case 2       ⋄ GTEE←0⌈GTEE-INT[24]      :case 3       ⋄ GTEE←0⌈(GTEE-INT)×[2](ENX_1,(LNX+1-SNX),SNX)/0 1 0[25]      :caselist 4 5 ⋄ GTEE←GTEE×0 ⍝ 5 catches case where OFFCOD is undefined (or irrelevant)[26]      :endselect[27]  :else  ⍝ Paid-Up Pensions[28]      :for idx :in ⍳NX-SNX[29]          DSPA[idx;]←D   [idx]∘.×Wescfact3[;idx][30]          NSPA[idx;]←N   [idx]∘.×Wescfact4[;idx][31]          LSPA[idx;]←L   [idx]∘.×Wescfact7[;idx][32]          SPA4[idx;]←INC4[idx]∘.×Wescfact9[;idx][33]      :endfor[34]      :if PubSect ⋄ :andif NRA<SPA[35]          GTEE←0⌈GR-DSPA+NSPA+LSPA+SPA4[36]      :else[37]          INT←0⌈(DSPA-⍉(NX,NX)⍴D)+(NSPA-⍉(NX,NX)⍴N)+(LSPA-⍉(NX,NX)⍴L)+SPA4-⍉(NX,NX)⍴INC4[38]          GTEE←(GR-(~0=GR)×⍉(NX,NX)⍴G×1+GMPREV)×[2]XMP≥NRA∆G ⍝ Eliminate values before NRA[39]          :select OFFCOD[40]          :case 0       ⋄ GTEE←0⌈GTEE[41]          :case 1       ⋄ GTEE←0⌈GTEE-INT×⍉(NX,NX)⍴G CDIV D+N+L+INC4[42]          :caselist 2 3 ⋄ GTEE←0⌈GTEE-INT[43]          :caselist 4 5 ⋄ GTEE←GTEE×0 ⍝ 5 catches case where OFFCOD is undefined (or irrelevant)[44]          :endselect[45]      :endif[46]  :endif[47]  ⍝[48]  X←0⌈DSPA+(GTEE-GR)×DPROP←DSPA CDIV NSPA+DSPA+LSPA+SPA4[49]  Y←0⌈LSPA+(GTEE-GR)×LPROP←LSPA CDIV NSPA+DSPA+LSPA+SPA4[50]  V←0⌈SPA4+(GTEE-GR)×PROP4←SPA4 CDIV NSPA+DSPA+LSPA+SPA4[51]  W←0⌈NSPA+(GTEE-GR)×NPROP←1-DPROP+LPROP+PROP4 ⍝ Make sure that it goes somewhere[52]  Z←V+W+X+Y+GR[53]  ⍝[54]  res←W,X,Y,V,[2.1]Z[55]  ⍝⍝⍝ :if test ⋄ :andif larg=⌊larg ⍝ This crashes because of the shape of the variables[56]  ⍝⌿⍝ :if larg=⌊larg ⍝ This crashes because of the shape of the variables[57]  ⍝⌿⍝    DSPA←(((⍳NX)-⎕io)⌽DSPA)[;⎕io][58]  ⍝⌿⍝    NSPA←(((⍳NX)-⎕io)⌽NSPA)[;⎕io][59]  ⍝⌿⍝    LSPA←(((⍳NX)-⎕io)⌽LSPA)[;⎕io][60]  ⍝⌿⍝    SPA4←(((⍳NX)-⎕io)⌽SPA4)[;⎕io][61]  ⍝⌿⍝    GTEE←GTEE[;⎕io+NX_1][62]  ⍝⌿⍝ :if ∆A≡'2615b' ⋄ :return ⋄ :endif ⍝??⍝ FIXME[63]  ⍝⌿⍝    AUDIT ∆A ⋄ AUDIT ∆B,'abcdee'[1+OFFCOD] ⋄ AUDIT ∆C ⋄ AUDIT ∆D[64]  ⍝⌿⍝ :endif    ∇