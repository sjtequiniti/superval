    ∇ FINPROC;A;B;C;D;FAC9;FILLSPA;FMADJ;FPENSPA;FPUPSPA;FPUWSPA;FREVALDYN;FREVALNDYN;FREVALWDYN;FREVALWNDYN;FSADJ;FWARSPA;FWILLSPA;ILLSPA;INT;MADJ;PENSPA;PUPSPA;PUWSPA;REVALDYN;REVALNDYN;REVALWDYN;REVALWNDYN;SADJ;TPSPA;TWSPA;WARSPA;WILLSPA;∆A;∆B;∆C;∆D;∆a;∆b;∆bb;∆c;∆d;escfact1;escfact2;escfact8;escfact6;res;FACN;FACD;pupnran;pupnrad;fpupnran;fpupnrad;resn;resd;temp;T;WT;BARBP;TPUP;WTPUP;TPUW;TPUPS;GROSSPUPNRA;ratio;∆a2;∆b2;∆c2;∆d2;ILLPROSSPA;WILLPROSSPA;idx;WPENSPA;Wescfact1;Wescfact2;Wescfact6;Wescfact8;PreSPAmat;escfact3;escfact4;Wescfact3;Wescfact4;escfact7;escfact9;Wescfact7;Wescfact9;LCASHONTOP;∆;⍙;COMpc;totpen
[1]   ⍝ ACTWIN.sf#4
[2]   ⍝ Processing Pensions from NRA and SPA
[3]   ⍝ Pension escalation from retirement to SPA
[4]   PreSPAmat←(X∘.<1+X⌈SPA)×(⍳NX)∘.≥⍳NX
[5]   ⍝⍝⍝ FGMP←RFGMP←FWGMP←RFWGMP←FGMPR←FWGMPR←RFGMPR←RFWGMPR←0 ⍝⍝⍝ Not used
[6]   ⍝
[7]   escfact1←           1⌈DYNRAT1[⎕io+2×term+0⌈XS -↑X]  CDIV DYNRAT1[⎕io+2×term+0⌈Xret-↑X]
[8]   escfact2←           1⌈DYNRAT2[⎕io+2×term+0⌈XS -↑X]  CDIV DYNRAT2[⎕io+2×term+0⌈Xret-↑X]
[9]   escfact6←           1⌈DYNRAT3[⎕io+2×term+0⌈XS -↑X]  CDIV DYNRAT3[⎕io+2×term+0⌈Xret-↑X]
[10]  escfact8←           1⌈DYNRAT4[⎕io+2×term+0⌈XS -↑X]  CDIV DYNRAT4[⎕io+2×term+0⌈Xret-↑X]
[11]  :if PreSPASplit
[12]      Wescfact1←PreSPAmat×1⌈DYNRAT1[⎕io+2×term+0⌈XMP-↑X]∘.CDIV DYNRAT1[⎕io+2×term+0⌈Xret-↑X]
[13]      Wescfact2←PreSPAmat×1⌈DYNRAT2[⎕io+2×term+0⌈XMP-↑X]∘.CDIV DYNRAT2[⎕io+2×term+0⌈Xret-↑X]
[14]      Wescfact6←PreSPAmat×1⌈DYNRAT3[⎕io+2×term+0⌈XMP-↑X]∘.CDIV DYNRAT3[⎕io+2×term+0⌈Xret-↑X]
[15]      Wescfact8←PreSPAmat×1⌈DYNRAT4[⎕io+2×term+0⌈XMP-↑X]∘.CDIV DYNRAT4[⎕io+2×term+0⌈Xret-↑X]
[16]  :endif
[17]  
[18]  →IsAccrued/L1 ⍝ Only do PUPs for accrued
[19]  ⍝
[20]  ⍝ Retirement pensions from NRA
[21]  PENNRA←ERACCPEN-COMPEN
[22]  :if bQSM ⍝ Cash as a proportion of Pension for QSM
[23]      :if 1∊×COMPEN
[24]          COMpc←(+/¨,¨⊂[2 3 4 5]COMPEN CDIV ERACCPEN)×[2]PROBS[;0]
[25]          :if 0≠∆←+/PROBS[⍳ENX_1;0]
[26]              ∆←+/COMpc[;;⍳ENX_1]÷∆
[27]              ⍙dbbenres←⍙dbbenres⍪((5 1 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[0;⍳2]) ⍝ Past ER
[28]              ⍙dbbenres←⍙dbbenres⍪((4 1 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[1;⍳2])
[29]              ⍙dbbenres←⍙dbbenres⍪((6 1 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[2;⍳2])
[30]              ⍙dbbenres←⍙dbbenres⍪((7 1 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[3;⍳2])
[31]              ⍙dbbenres←⍙dbbenres⍪((5 1 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[0;2]) ⍝ Future ER
[32]              ⍙dbbenres←⍙dbbenres⍪((4 1 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[1;2])
[33]              ⍙dbbenres←⍙dbbenres⍪((6 1 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[2;2])
[34]              ⍙dbbenres←⍙dbbenres⍪((7 1 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[3;2])
[35]          :endif
[36]          ∆←+/COMpc[;;ENX_1↓⍳NX]÷+/PROBS[ENX_1↓⍳NX;0]
[37]          ⍙dbbenres←⍙dbbenres⍪((5 2 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[0;⍳2]) ⍝ Past NR/LR
[38]          ⍙dbbenres←⍙dbbenres⍪((4 2 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[1;⍳2])
[39]          ⍙dbbenres←⍙dbbenres⍪((6 2 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[2;⍳2])
[40]          ⍙dbbenres←⍙dbbenres⍪((7 2 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/∆[3;⍳2])
[41]          ⍙dbbenres←⍙dbbenres⍪((5 2 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[0;2]) ⍝ Future NR/LR
[42]          ⍙dbbenres←⍙dbbenres⍪((4 2 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[1;2])
[43]          ⍙dbbenres←⍙dbbenres⍪((6 2 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[2;2])
[44]          ⍙dbbenres←⍙dbbenres⍪((7 2 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (∆[3;2])
[45]      :endif
[46]      :if 1∊×cotCASH
[47]          totpen←(+/¨,¨⊂[0 2 3 4 5]ERACCPEN)×[1]PROBS[;0]
[48]          :if 0≠∆←+/PROBS[⍳ENX_1;0]
[49]              :if CTYPE2∊2 8
[50]                  ⍙dbbenres←⍙dbbenres⍪((36 1 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords COMPER2 ⍝ Past ER
[51]                  ⍙dbbenres←⍙dbbenres⍪((36 1 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords COMPER2 ⍝ Future ER
[52]              :else
[53]                  ∆←+/totpen[;⍳ENX_1]÷∆
[54]                  ⍙dbbenres←⍙dbbenres⍪((36 1 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords ((cotCASH-cotFCASH) CDIV +/∆[⍳2]) ⍝ Past ER
[55]                  ⍙dbbenres←⍙dbbenres⍪((36 1 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (         cotFCASH  CDIV   ∆[ 2]) ⍝ Future ER
[56]              :endif
[57]          :endif
[58]          :if CTYPE2∊2 8
[59]              ⍙dbbenres←⍙dbbenres⍪((36 2 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords COMPER2 ⍝ Past ER
[60]              ⍙dbbenres←⍙dbbenres⍪((36 2 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords COMPER2 ⍝ Future ER
[61]          :else
[62]              ∆←+/totpen[;ENX_1↓⍳NX]÷+/PROBS[ENX_1↓⍳NX;0]
[63]              ⍙dbbenres←⍙dbbenres⍪((36 2 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords ((cotCASH-cotFCASH) CDIV +/∆[⍳2]) ⍝ Past NR/LR
[64]              ⍙dbbenres←⍙dbbenres⍪((36 2 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (         cotFCASH  CDIV   ∆[ 2]) ⍝ Future NR/LR
[65]          :endif
[66]      :endif
[67]  :endif
[68]  :if WARCOMind
[69]      :if ClntCode=3 ⋄ WARNRA←SERACCPEN
[70]      :else          ⋄ WARNRA←WARFRAC∆l×ERACCPEN
[71]      :endif
[72]  :else
[73]      :if ClntCode=3 ⋄ WARNRA←SERACCPEN×PENNRA CDIV ERACCPEN
[74]      :else          ⋄ WARNRA←WARFRAC∆l×PENNRA
[75]      :endif
[76]  :endif
[77]  ⍝ Retirement pension from SPA
[78]  PENSPA←(⍴PENNRA)⍴0 ⍝ Initialise
[79]  ⍝ Fill with benefits before franking
[80]  PENSPA[⎕io  ;;;;;;]←PENNRA[⎕io  ;;;;;;]×[⎕io+5]escfact2
[81]  PENSPA[⎕io+1;;;;;;]←PENNRA[⎕io+1;;;;;;]×[⎕io+5]escfact1
[82]  PENSPA[⎕io+2;;;;;;]←PENNRA[⎕io+2;;;;;;]×[⎕io+5]escfact6
[83]  PENSPA[⎕io+3;;;;;;]←PENNRA[⎕io+3;;;;;;]×[⎕io+5]escfact8
[84]  :if PreSPASplit
[85]      WPENSPA←((⍴PENNRA),NX)⍴0
[86]      :if 0≠LNX-SNX ⋄ SERACCPENSPA←(⍴WPENSPA)⍴0 ⋄ :endif ⍝ For Post NRA DIS Benefits
[87]      :for idx :in ⍳NX-SNX
[88]          WPENSPA[⎕io  ;;;;;;idx;]←WARNRA[⎕io  ;;;;;;idx]∘.×Wescfact2[;idx]
[89]          WPENSPA[⎕io+1;;;;;;idx;]←WARNRA[⎕io+1;;;;;;idx]∘.×Wescfact1[;idx]
[90]          WPENSPA[⎕io+2;;;;;;idx;]←WARNRA[⎕io+2;;;;;;idx]∘.×Wescfact6[;idx]
[91]          WPENSPA[⎕io+3;;;;;;idx;]←WARNRA[⎕io+3;;;;;;idx]∘.×Wescfact8[;idx]
[92]  
[93]          :if 0≠LNX-SNX ⍝ For Post NRA DIS Benefits
[94]              SERACCPENSPA←(⍴WPENSPA)⍴0 ⍝ Initialise
[95]              SERACCPENSPA[⎕io  ;;;;;;idx;]←SERACCPEN[⎕io  ;;;;;;idx]∘.×Wescfact2[;idx]
[96]              SERACCPENSPA[⎕io+1;;;;;;idx;]←SERACCPEN[⎕io+1;;;;;;idx]∘.×Wescfact1[;idx]
[97]              SERACCPENSPA[⎕io+2;;;;;;idx;]←SERACCPEN[⎕io+2;;;;;;idx]∘.×Wescfact6[;idx]
[98]              SERACCPENSPA[⎕io+3;;;;;;idx;]←SERACCPEN[⎕io+3;;;;;;idx]∘.×Wescfact8[;idx]
[99]          :endif
[100]     :endfor
[101] :else
[102]     WPENSPA←(⍴PENNRA)⍴0
[103]     WPENSPA[⎕io  ;;;;;;]←WARNRA[⎕io  ;;;;;;]×[⎕io+5]escfact2
[104]     WPENSPA[⎕io+1;;;;;;]←WARNRA[⎕io+1;;;;;;]×[⎕io+5]escfact1
[105]     WPENSPA[⎕io+2;;;;;;]←WARNRA[⎕io+2;;;;;;]×[⎕io+5]escfact6
[106]     WPENSPA[⎕io+3;;;;;;]←WARNRA[⎕io+3;;;;;;]×[⎕io+5]escfact8
[107] 
[108]     :if 0≠LNX-SNX ⍝ For Post NRA DIS Benefits
[109]         SERACCPENSPA←(⍴WPENSPA)⍴0 ⍝ Initialise
[110]         SERACCPENSPA[⎕io  ;;;;;;]←SERACCPEN[⎕io  ;;;;;;]×[⎕io+5]escfact2
[111]         SERACCPENSPA[⎕io+1;;;;;;]←SERACCPEN[⎕io+1;;;;;;]×[⎕io+5]escfact1
[112]         SERACCPENSPA[⎕io+2;;;;;;]←SERACCPEN[⎕io+2;;;;;;]×[⎕io+5]escfact6
[113]         SERACCPENSPA[⎕io+3;;;;;;]←SERACCPEN[⎕io+3;;;;;;]×[⎕io+5]escfact8
[114]     :endif
[115] :endif
[116] 
[117] ⍝ Frank first tranche
[118] T←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PENNRA
[119] PENNRAN←T[⎕io  ;⎕io;]
[120] PENNRAD←T[⎕io+1;⎕io;]
[121] PENNRAL←T[⎕io+2;⎕io;]
[122] PENNRA4←T[⎕io+3;⎕io;]
[123] WT←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]WARNRA
[124] WPENNRAN←WT[⎕io  ;⎕io;]
[125] WPENNRAD←WT[⎕io+1;⎕io;]
[126] WPENNRAL←WT[⎕io+2;⎕io;]
[127] WPENNRA4←WT[⎕io+3;⎕io;]
[128] ⍝⍝⍝ :if test
[129] ⍝⌿⍝    COMPENNDYN←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io  ;]
[130] ⍝⌿⍝    COMPENDYN ←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io+1;]
[131] ⍝⌿⍝    COMPENLDYN←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io+2;]
[132] ⍝⌿⍝    COMPENDYN4←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io+3;]
[133] ⍝⌿⍝    FCOMPENNDYN←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io  ;⎕io+2;]
[134] ⍝⌿⍝    FCOMPENDYN ←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io+1;⎕io+2;]
[135] ⍝⌿⍝    FCOMPENLDYN←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io+2;⎕io+2;]
[136] ⍝⌿⍝    FCOMPENDYN4←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]COMPEN)[⎕io+3;⎕io+2;]
[137] ⍝⌿⍝    AUDIT '1600' ⋄ AUDIT '1610' ⋄ AUDIT '1620' ⋄ AUDIT '1625'
[138] ⍝⌿⍝    :if ClntCode=3 ⋄ AUDIT '1630b' ⋄ AUDIT '1631b'
[139] ⍝⌿⍝    :else          ⋄ AUDIT '1630a' ⋄ AUDIT '1631a'
[140] ⍝⌿⍝    :endif
[141] ⍝⌿⍝    AUDIT '1800'
[142] ⍝⍝⍝ :endif
[143] ⍝ Replace first tranch of PENSPA with post-franking figures
[144] ∆A←'1810' ⋄ ∆B←'1815' ⋄ ∆C←'1820' ⋄ ∆D←'1821'
[145] res←0 FRANK PENNRAD,PENNRAN,PENNRAL,PENNRA4,GMPR,[0.1]GMP
[146] PENSPA[⎕io  ;⎕io;;;;;]←PENNRA[⎕io  ;⎕io;;;;;]×[4]res[;⎕io  ] CDIV PENNRAN
[147] PENSPA[⎕io+1;⎕io;;;;;]←PENNRA[⎕io+1;⎕io;;;;;]×[4]res[;⎕io+1] CDIV PENNRAD
[148] PENSPA[⎕io+2;⎕io;;;;;]←PENNRA[⎕io+2;⎕io;;;;;]×[4]res[;⎕io+2] CDIV PENNRAL
[149] PENSPA[⎕io+3;⎕io;;;;;]←PENNRA[⎕io+3;⎕io;;;;;]×[4]res[;⎕io+3] CDIV PENNRA4
[150] ⍝⍝⍝ :if test
[151] ⍝⌿⍝    TPSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PENSPA
[152] ⍝⌿⍝    AUDIT '1822' ⋄ AUDIT '1823'
[153] ⍝⍝⍝ :endif
[154] ∆A←'1830' ⋄ ∆B←'1835' ⋄ ∆C←'1840' ⋄ ∆D←'1841'
[155] :if PreSPASplit
[156]     res←0 FRANKW TOTWGMPR (WPENNRAD,WPENNRAN,WPENNRAL,WPENNRA4,WGMPR,[0.1]WGMP)
[157]     temp←res[;;⎕io  ] CDIV ⍉(NX,NX)⍴WPENNRAN
[158]     :for idx :in ⍳NX-SNX
[159]         WPENSPA[⎕io  ;⎕io;;;;;idx;]←WARNRA[⎕io  ;⎕io;;;;;idx]∘.×temp[idx;]
[160]     :endfor
[161]     temp←res[;;⎕io+1] CDIV ⍉(NX,NX)⍴WPENNRAD
[162]     :for idx :in ⍳NX-SNX
[163]         WPENSPA[⎕io+1;⎕io;;;;;idx;]←WARNRA[⎕io+1;⎕io;;;;;idx]∘.×temp[idx;]
[164]     :endfor
[165]     temp←res[;;⎕io+2] CDIV ⍉(NX,NX)⍴WPENNRAL
[166]     :for idx :in ⍳NX-SNX
[167]         WPENSPA[⎕io+2;⎕io;;;;;idx;]←WARNRA[⎕io+2;⎕io;;;;;idx]∘.×temp[idx;]
[168]     :endfor
[169]     temp←res[;;⎕io+3] CDIV ⍉(NX,NX)⍴WPENNRA4
[170]     :for idx :in ⍳NX-SNX
[171]         WPENSPA[⎕io+3;⎕io;;;;;idx;]←WARNRA[⎕io+3;⎕io;;;;;idx]∘.×temp[idx;]
[172]     :endfor
[173] ⍝⍝⍝    :if test
[174] ⍝⌿⍝        TWSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]+/[⎕io+7]WPENSPA
[175] ⍝⌿⍝        AUDIT '1842' ⋄ AUDIT '1843'
[176] ⍝⍝⍝    :endif
[177] :else
[178]     res←0 FRANK WPENNRAD,WPENNRAN,WPENNRAL,WPENNRA4,WGMPR,[0.1]WGMP
[179]     WPENSPA[⎕io  ;⎕io;;;;;]←WARNRA[⎕io  ;⎕io;;;;;]×[4]res[;⎕io  ] CDIV WPENNRAN
[180]     WPENSPA[⎕io+1;⎕io;;;;;]←WARNRA[⎕io+1;⎕io;;;;;]×[4]res[;⎕io+1] CDIV WPENNRAD
[181]     WPENSPA[⎕io+2;⎕io;;;;;]←WARNRA[⎕io+2;⎕io;;;;;]×[4]res[;⎕io+2] CDIV WPENNRAL
[182]     WPENSPA[⎕io+3;⎕io;;;;;]←WARNRA[⎕io+3;⎕io;;;;;]×[4]res[;⎕io+3] CDIV WPENNRA4
[183] ⍝⍝⍝    :if test
[184] ⍝⌿⍝        TWSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]WPENSPA
[185] ⍝⌿⍝        AUDIT '1842' ⋄ AUDIT '1843'
[186] ⍝⍝⍝    :endif
[187] :endif
[188] 
[189] :if PHI
[190]     :if 0≠LNX-SNX ⍝ For Post NRA DIS Benefits
[191]         PHISERACCPENSPA←(⍴PHITPEN)⍴0   ⍝ Initialise
[192]         PHISERACCPENSPA[⎕io  ;;;;;;;]←PHISERACCPEN[⎕io  ;;;;;;;] MultiDimMult (NX,NX)⍴escfact2
[193]         PHISERACCPENSPA[⎕io+1;;;;;;;]←PHISERACCPEN[⎕io+1;;;;;;;] MultiDimMult (NX,NX)⍴escfact1
[194]         PHISERACCPENSPA[⎕io+2;;;;;;;]←PHISERACCPEN[⎕io+2;;;;;;;] MultiDimMult (NX,NX)⍴escfact6
[195]         PHISERACCPENSPA[⎕io+3;;;;;;;]←PHISERACCPEN[⎕io+3;;;;;;;] MultiDimMult (NX,NX)⍴escfact8
[196]     :endif
[197]     PHIFINPROC
[198] :endif
[199] 
[200] →(ILLIND=0)/L1
[201] ⍝ Ill Health pensions from NRA
[202] ILLCOMPROSPEN←0×ILLERACCPEN
[203] ILLCOMPROSPEN[;⎕io+2;;;;;]←ILLCOMPEN[;⎕io+2;;;;;]×ILLERACCPROSPEN[;⎕io+2;;;;;] CDIV ILLERACCPEN[;⎕io+2;;;;;]
[204] ILLPEN←ILLERACCPEN-ILLCOMPEN
[205] :if bQSM ⍝ Cash as a proportion of Pension for QSM
[206]     :if 1∊×ILLCOMPEN
[207]         ∆←(ILLCOMPEN CDIV ILLERACCPEN)×[6]PROBS[;2] CDIV +/PROBS[;2]
[208]         ⍙dbbenres←⍙dbbenres⍪((5 4 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[0;⍳2;;;;;]) ⍝ Past
[209]         ⍙dbbenres←⍙dbbenres⍪((4 4 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[1;⍳2;;;;;])
[210]         ⍙dbbenres←⍙dbbenres⍪((6 4 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[2;⍳2;;;;;])
[211]         ⍙dbbenres←⍙dbbenres⍪((7 4 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[3;⍳2;;;;;])
[212]         ⍙dbbenres←⍙dbbenres⍪((5 4 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[0;2;;;;;]) ⍝ Future
[213]         ⍙dbbenres←⍙dbbenres⍪((4 4 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[1;2;;;;;])
[214]         ⍙dbbenres←⍙dbbenres⍪((6 4 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[2;2;;;;;])
[215]         ⍙dbbenres←⍙dbbenres⍪((7 4 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (+/,∆[3;2;;;;;])
[216]     :endif
[217]     :if 1∊×cotILLCASH
[218]         :if ICTYPE2∊2 8
[219]             ⍙dbbenres←⍙dbbenres⍪((36 4 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords ILLCOMPER2 ⍝ Past
[220]             ⍙dbbenres←⍙dbbenres⍪((36 4 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords ILLCOMPER2 ⍝ Future
[221]         :else
[222]             ∆←+/(+/¨,¨⊂[0 2 3 4 5]ILLERACCPEN)×[1]∆ CDIV +/∆←PROBS[;2]
[223]             ⍙dbbenres←⍙dbbenres⍪((36 4 1 32) (⍬⍴dbXe) 0) ⍙DBValnRecords ((cotILLCASH-cotFILLCASH) CDIV +/∆[⍳2]) ⍝ Past
[224]             ⍙dbbenres←⍙dbbenres⍪((36 4 2 32) (⍬⍴dbXe) 0) ⍙DBValnRecords (            cotFILLCASH  CDIV   ∆[ 2]) ⍝ Future
[225]         :endif
[226]     :endif
[227] :endif
[228] ILLPROSPEN←ILLERACCPROSPEN-ILLCOMPROSPEN
[229] :if WIHCOMind
[230]     :if ClntCode=3
[231]         WILLPEN←SILLERACCPEN
[232]         WILLPROSPEN←SILLERACCPROSPEN
[233]     :else
[234]         WILLPEN←WARFRAC∆l×ILLERACCPEN
[235]         WILLPROSPEN←WARFRAC∆l×ILLERACCPROSPEN
[236]     :endif
[237] :else
[238]     :if ClntCode=3
[239]         WILLPEN←SILLERACCPEN×ILLPEN CDIV ILLERACCPEN
[240]         WILLPROSPEN←SILLERACCPROSPEN×ILLPROSPEN CDIV ILLERACCPROSPEN
[241]     :else
[242]         WILLPEN←WARFRAC∆l×ILLPEN
[243]         WILLPROSPEN←WARFRAC∆l×ILLPROSPEN
[244]     :endif
[245] :endif
[246] ⍝ Ill-Health pensions from SPA
[247] ILLSPA←ILLPROSSPA←(⍴PENNRA)⍴0   ⍝ Initialise
[248] ⍝ Fill with benefits before franking
[249]     ILLSPA[⎕io  ;;;;;;]←    ILLPEN[⎕io  ;;;;;;]×[⎕io+5]escfact2
[250]     ILLSPA[⎕io+1;;;;;;]←    ILLPEN[⎕io+1;;;;;;]×[⎕io+5]escfact1
[251]     ILLSPA[⎕io+2;;;;;;]←    ILLPEN[⎕io+2;;;;;;]×[⎕io+5]escfact6
[252]     ILLSPA[⎕io+3;;;;;;]←    ILLPEN[⎕io+3;;;;;;]×[⎕io+5]escfact8
[253] ILLPROSSPA[⎕io  ;;;;;;]←ILLPROSPEN[⎕io  ;;;;;;]×[⎕io+5]escfact2
[254] ILLPROSSPA[⎕io+1;;;;;;]←ILLPROSPEN[⎕io+1;;;;;;]×[⎕io+5]escfact1
[255] ILLPROSSPA[⎕io+2;;;;;;]←ILLPROSPEN[⎕io+2;;;;;;]×[⎕io+5]escfact6
[256] ILLPROSSPA[⎕io+3;;;;;;]←ILLPROSPEN[⎕io+3;;;;;;]×[⎕io+5]escfact8
[257] :if PreSPASplit
[258]     WILLSPA←WILLPROSSPA←((⍴PENNRA),NX)⍴0
[259]     :for idx :in ⍳NX-SNX
[260]             WILLSPA[⎕io  ;;;;;;idx;]←    WILLPEN[⎕io  ;;;;;;idx]∘.×Wescfact2[;idx]
[261]             WILLSPA[⎕io+1;;;;;;idx;]←    WILLPEN[⎕io+1;;;;;;idx]∘.×Wescfact1[;idx]
[262]             WILLSPA[⎕io+2;;;;;;idx;]←    WILLPEN[⎕io+2;;;;;;idx]∘.×Wescfact6[;idx]
[263]             WILLSPA[⎕io+3;;;;;;idx;]←    WILLPEN[⎕io+3;;;;;;idx]∘.×Wescfact8[;idx]
[264]         WILLPROSSPA[⎕io  ;;;;;;idx;]←WILLPROSPEN[⎕io  ;;;;;;idx]∘.×Wescfact2[;idx]
[265]         WILLPROSSPA[⎕io+1;;;;;;idx;]←WILLPROSPEN[⎕io+1;;;;;;idx]∘.×Wescfact1[;idx]
[266]         WILLPROSSPA[⎕io+2;;;;;;idx;]←WILLPROSPEN[⎕io+2;;;;;;idx]∘.×Wescfact6[;idx]
[267]         WILLPROSSPA[⎕io+3;;;;;;idx;]←WILLPROSPEN[⎕io+3;;;;;;idx]∘.×Wescfact8[;idx]
[268]     :endfor
[269] :else
[270]         WILLSPA←WILLPROSSPA←(⍴PENNRA)⍴0
[271]         WILLSPA[⎕io  ;;;;;;]←    WILLPEN[⎕io  ;;;;;;]×[⎕io+5]escfact2
[272]         WILLSPA[⎕io+1;;;;;;]←    WILLPEN[⎕io+1;;;;;;]×[⎕io+5]escfact1
[273]         WILLSPA[⎕io+2;;;;;;]←    WILLPEN[⎕io+2;;;;;;]×[⎕io+5]escfact6
[274]         WILLSPA[⎕io+3;;;;;;]←    WILLPEN[⎕io+3;;;;;;]×[⎕io+5]escfact8
[275]     WILLPROSSPA[⎕io  ;;;;;;]←WILLPROSPEN[⎕io  ;;;;;;]×[⎕io+5]escfact2
[276]     WILLPROSSPA[⎕io+1;;;;;;]←WILLPROSPEN[⎕io+1;;;;;;]×[⎕io+5]escfact1
[277]     WILLPROSSPA[⎕io+2;;;;;;]←WILLPROSPEN[⎕io+2;;;;;;]×[⎕io+5]escfact6
[278]     WILLPROSSPA[⎕io+3;;;;;;]←WILLPROSPEN[⎕io+3;;;;;;]×[⎕io+5]escfact8
[279] :endif
[280] ⍝ Frank first tranche
[281] T←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLPEN
[282] ILLPENN←T[⎕io  ;⎕io;]
[283] ILLPEND←T[⎕io+1;⎕io;]
[284] ILLPENL←T[⎕io+2;⎕io;]
[285] ILLPEN4←T[⎕io+3;⎕io;]
[286] WT←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]WILLPEN
[287] WILLPENN←WT[⎕io  ;⎕io;]
[288] WILLPEND←WT[⎕io+1;⎕io;]
[289] WILLPENL←WT[⎕io+2;⎕io;]
[290] WILLPEN4←WT[⎕io+3;⎕io;]
[291] ⍝⍝⍝ :if test
[292] ⍝⌿⍝    ILLCOMNDYN←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io  ;]
[293] ⍝⌿⍝    ILLCOMDYN ←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io+1;]
[294] ⍝⌿⍝    ILLCOMLDYN←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io+2;]
[295] ⍝⌿⍝    ILLCOMDYN4←(+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io+3;]
[296] ⍝⌿⍝    FILLCOMNDYN←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io  ;⎕io+2;]
[297] ⍝⌿⍝    FILLCOMDYN ←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io+1;⎕io+2;]
[298] ⍝⌿⍝    FILLCOMLDYN←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io+2;⎕io+2;]
[299] ⍝⌿⍝    FILLCOMDYN4←(+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLCOMPEN)[⎕io+3;⎕io+2;]
[300] ⍝⌿⍝    AUDIT '2000' ⋄ AUDIT '2010' ⋄ AUDIT '2020' ⋄ AUDIT '2025'
[301] ⍝⌿⍝    :if ClntCode=3 ⋄ AUDIT '2030b' ⋄ AUDIT '2031b'
[302] ⍝⌿⍝    :else          ⋄ AUDIT '2030a' ⋄ AUDIT '2031a'
[303] ⍝⌿⍝    :endif
[304] ⍝⌿⍝    AUDIT '2200'
[305] ⍝⍝⍝ :endif
[306] ⍝ Replace first tranch of ILLSPA with post-franking figures
[307] ∆A←'2210' ⋄ ∆B←'2215' ⋄ ∆C←'2220' ⋄ ∆D←'2221'
[308] res←0 FRANK ILLPEND,ILLPENN,ILLPENL,ILLPEN4,GMPR,[0.1]GMP
[309] ILLSPA[⎕io  ;⎕io;;;;;]←ILLPEN[⎕io  ;⎕io;;;;;]×[4]res[;⎕io  ] CDIV ILLPENN
[310] ILLSPA[⎕io+1;⎕io;;;;;]←ILLPEN[⎕io+1;⎕io;;;;;]×[4]res[;⎕io+1] CDIV ILLPEND
[311] ILLSPA[⎕io+2;⎕io;;;;;]←ILLPEN[⎕io+2;⎕io;;;;;]×[4]res[;⎕io+2] CDIV ILLPENL
[312] ILLSPA[⎕io+3;⎕io;;;;;]←ILLPEN[⎕io+3;⎕io;;;;;]×[4]res[;⎕io+3] CDIV ILLPEN4
[313] ⍝⍝⍝ :if test
[314] ⍝⌿⍝    TPSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]ILLSPA
[315] ⍝⌿⍝    AUDIT '2222' ⋄ AUDIT '2223'
[316] ⍝⍝⍝ :endif
[317] ∆A←'2230' ⋄ ∆B←'2235' ⋄ ∆C←'2240' ⋄ ∆D←'2241'
[318] :if PreSPASplit
[319]     res←0 FRANKW TOTWGMPR (WILLPEND,WILLPENN,WILLPENL,WILLPEN4,WGMPR,[0.1]WGMP)
[320]     temp←res[;;⎕io  ] CDIV ⍉(NX,NX)⍴WILLPENN
[321]     :for idx :in ⍳NX-SNX
[322]         WILLSPA[⎕io  ;⎕io;;;;;idx;]←WILLPEN[⎕io  ;⎕io;;;;;idx]∘.×temp[idx;]
[323]     :endfor
[324]     temp←res[;;⎕io+1] CDIV ⍉(NX,NX)⍴WILLPEND
[325]     :for idx :in ⍳NX-SNX
[326]         WILLSPA[⎕io+1;⎕io;;;;;idx;]←WILLPEN[⎕io+1;⎕io;;;;;idx]∘.×temp[idx;]
[327]     :endfor
[328]     temp←res[;;⎕io+2] CDIV ⍉(NX,NX)⍴WILLPENL
[329]     :for idx :in ⍳NX-SNX
[330]         WILLSPA[⎕io+2;⎕io;;;;;idx;]←WILLPEN[⎕io+2;⎕io;;;;;idx]∘.×temp[idx;]
[331]     :endfor
[332]     temp←res[;;⎕io+3] CDIV ⍉(NX,NX)⍴WILLPEN4
[333]     :for idx :in ⍳NX-SNX
[334]         WILLSPA[⎕io+3;⎕io;;;;;idx;]←WILLPEN[⎕io+3;⎕io;;;;;idx]∘.×temp[idx;]
[335]     :endfor
[336] ⍝⍝⍝    :if test
[337] ⍝⌿⍝        TWSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]+/[⎕io+7]WILLSPA
[338] ⍝⌿⍝        AUDIT '2242' ⋄ AUDIT '2243'
[339] ⍝⍝⍝    :endif
[340] :else
[341]     res←0 FRANK WILLPEND,WILLPENN,WILLPENL,WILLPEN4,WGMPR,[0.1]WGMP
[342]     WILLSPA[⎕io  ;⎕io;;;;;]←WILLPEN[⎕io  ;⎕io;;;;;]×[4]res[;⎕io  ] CDIV WILLPENN
[343]     WILLSPA[⎕io+1;⎕io;;;;;]←WILLPEN[⎕io+1;⎕io;;;;;]×[4]res[;⎕io+1] CDIV WILLPEND
[344]     WILLSPA[⎕io+2;⎕io;;;;;]←WILLPEN[⎕io+2;⎕io;;;;;]×[4]res[;⎕io+2] CDIV WILLPENL
[345]     WILLSPA[⎕io+3;⎕io;;;;;]←WILLPEN[⎕io+3;⎕io;;;;;]×[4]res[;⎕io+3] CDIV WILLPEN4
[346] ⍝⍝⍝    :if test
[347] ⍝⌿⍝        TWSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]WILLSPA
[348] ⍝⌿⍝        AUDIT '2242' ⋄ AUDIT '2243'
[349] ⍝⍝⍝    :endif
[350] :endif
[351] ⍝ Do partial totals
[352] TILLPEN ←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]ILLPEN
[353] TWILLPEN←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]WILLPEN
[354] TILLSPA ←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]ILLSPA
[355] TWILLSPA←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]WILLSPA
[356] TILLPROSPEN ←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]ILLPROSPEN
[357] TWILLPROSPEN←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]WILLPROSPEN
[358] TILLPROSSPA ←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]ILLPROSSPA
[359] TWILLPROSSPA←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]WILLPROSSPA
[360] L1:⍝ Revalue pensions to NRA
[361] REVALUE
[362] ⍝
[363] ⍝ Barber PUP Adjustments
[364] ⍝ Paid-Up Pensions from NRA
[365] PUPNRA←REVPEN ⍝ Initialise
[366] PUPNRA[⎕io  ;;;;;⎕io;]←PUPNRA[⎕io  ;;;;;⎕io;]×[⎕io+4]SBARBADJ
[367] PUPNRA[⎕io+1;;;;;⎕io;]←PUPNRA[⎕io+1;;;;;⎕io;]×[⎕io+4]MBARBADJ
[368] PUPNRA[⎕io+2;;;;;⎕io;]←PUPNRA[⎕io+2;;;;;⎕io;]×[⎕io+4]LBARBADJ
[369] PUPNRA[⎕io+3;;;;;⎕io;]←PUPNRA[⎕io+3;;;;;⎕io;]×[⎕io+4]BARBADJ4
[370] :if ClntCode=3
[371]     PUWNRA←SREVPEN
[372]     PUWNRA[⎕io  ;;;;;⎕io;]←PUWNRA[⎕io  ;;;;;⎕io;]×[⎕io+4]SBARBADJ
[373]     PUWNRA[⎕io+1;;;;;⎕io;]←PUWNRA[⎕io+1;;;;;⎕io;]×[⎕io+4]MBARBADJ
[374]     PUWNRA[⎕io+2;;;;;⎕io;]←PUWNRA[⎕io+2;;;;;⎕io;]×[⎕io+4]LBARBADJ
[375]     PUWNRA[⎕io+3;;;;;⎕io;]←PUWNRA[⎕io+3;;;;;⎕io;]×[⎕io+4]BARBADJ4
[376] :else
[377]     PUWNRA←PUPNRA×WARFRAC∆l
[378] :endif
[379] ⍝⍝⍝ :if test
[380] ⍝⌿⍝    BARBP←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]REVPEN[;;;;;⎕io;]
[381] ⍝⌿⍝    AUDIT '2450' ⋄ AUDIT '2451' ⋄ AUDIT '2452' ⋄ AUDIT '2453'
[382] ⍝⍝⍝ :endif
[383] 
[384] :if ~GMPDEFIND
[385]     ⍝ Add Barber adjustment to the difference between the GMP and the revalued GMP
[386]     ⍝ Allocate over first tranche only and over revaluable only i.e.revaluation rate is non-zero
[387]     ⍝ Force to first if all are zero
[388]     :if 0=^/((~^/1=REVRAT),(~^/1=AUXREVRAT),~^/1=REVRAT3)
[389]         idx←,⎕io
[390]     :else
[391]         idx←((~^/1=REVRAT),(~^/1=AUXREVRAT),~^/1=REVRAT3)/⍳3
[392]     :endif
[393]     temp←(RGMPR-GMP) CDIV +/[⎕io]+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]REVPEN[;⎕io;idx;;;;]
[394]     :for idx :in idx
[395]         ratio←(+/[⎕io]+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]REVPEN[;⎕io;idx;;;;]) CDIV +/[⎕io]+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]REVPEN[;⎕io;;;;;]
[396]         PUPNRA[⎕io  ;⎕io;idx;;;⎕io;]←PUPNRA[⎕io  ;⎕io;idx;;;⎕io;]+∆b←REVPEN[⎕io  ;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(SBARBADJ-1)×temp
[397]         PUPNRA[⎕io+1;⎕io;idx;;;⎕io;]←PUPNRA[⎕io+1;⎕io;idx;;;⎕io;]+∆a←REVPEN[⎕io+1;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(MBARBADJ-1)×temp
[398]         PUPNRA[⎕io+2;⎕io;idx;;;⎕io;]←PUPNRA[⎕io+2;⎕io;idx;;;⎕io;]+∆c←REVPEN[⎕io+2;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(LBARBADJ-1)×temp
[399]         PUPNRA[⎕io+3;⎕io;idx;;;⎕io;]←PUPNRA[⎕io+3;⎕io;idx;;;⎕io;]+∆d←REVPEN[⎕io+3;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(BARBADJ4-1)×temp
[400]         :if ClntCode=3
[401]             PUWNRA[⎕io  ;⎕io;idx;;;⎕io;]←PUWNRA[⎕io  ;⎕io;idx;;;⎕io;]+SREVPEN[⎕io  ;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(SBARBADJ-1)×temp
[402]             PUWNRA[⎕io+1;⎕io;idx;;;⎕io;]←PUWNRA[⎕io+1;⎕io;idx;;;⎕io;]+SREVPEN[⎕io+1;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(MBARBADJ-1)×temp
[403]             PUWNRA[⎕io+2;⎕io;idx;;;⎕io;]←PUWNRA[⎕io+2;⎕io;idx;;;⎕io;]+SREVPEN[⎕io+2;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(LBARBADJ-1)×temp
[404]             PUWNRA[⎕io+3;⎕io;idx;;;⎕io;]←PUWNRA[⎕io+3;⎕io;idx;;;⎕io;]+SREVPEN[⎕io+3;⎕io;idx;;;⎕io;]×[⎕io+2]ratio×(BARBADJ4-1)×temp
[405]         :endif
[406]     :endfor
[407]     :if ~ClntCode=3 ⋄ PUWNRA←WARFRAC∆l×PUPNRA ⋄ :endif
[408] ⍝⍝⍝    :if test
[409] ⍝⌿⍝        ∆a←+⌿+⌿∆a ⋄ ∆b←+⌿+⌿∆b ⋄ ∆c←+⌿+⌿∆c ⋄ ∆d←+⌿+⌿∆d
[410] ⍝⌿⍝        AUDIT '2456'
[411] ⍝⍝⍝    :endif
[412] :endif
[413] ⍝⍝⍝ :if test
[414] ⍝⌿⍝    TPUP ←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUPNRA
[415] ⍝⌿⍝    WTPUP←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUWNRA
[416] ⍝⌿⍝    AUDIT '2460',¯1↑'a',GMPDEFIND/'b'
[417] ⍝⌿⍝    AUDIT '2461',¯1↑'a',GMPDEFIND/'b'
[418] ⍝⌿⍝    AUDIT '2462',¯1↑'a',GMPDEFIND/'b'
[419] ⍝⌿⍝    AUDIT '2464',¯1↑'a',GMPDEFIND/'b'
[420] ⍝⌿⍝    AUDIT '2465',¯1↑'a',GMPDEFIND/'b'
[421] ⍝⌿⍝    AUDIT '2466',¯1↑'a',GMPDEFIND/'b'
[422] ⍝⍝⍝ :endif
[423] ⍝
[424] ⍝ Pension escalation from NRA to SPA
[425] :if DeferNRA
[426]     :if isNPCR
[427]         escfact3←1⌈DYNRATPost[⎕io+2×term+0⌈SPA-↑X] CDIV DYNRATPost[⎕io+2×term+0⌈(NRA∆G⌈XMP)-↑X]
[428]         escfact4←1⌈DYNRATPre [⎕io+2×term+0⌈SPA-↑X] CDIV DYNRATPre [⎕io+2×term+0⌈(NRA∆G⌈XMP)-↑X]
[429]     :else
[430]         escfact3←1⌈DYNRAT1   [⎕io+2×term+0⌈SPA-↑X] CDIV DYNRAT1   [⎕io+2×term+0⌈(NRA∆G⌈XMP)-↑X]
[431]         escfact4←1⌈DYNRAT2   [⎕io+2×term+0⌈SPA-↑X] CDIV DYNRAT2   [⎕io+2×term+0⌈(NRA∆G⌈XMP)-↑X]
[432]     :endif
[433]         escfact7←1⌈DYNRAT3   [⎕io+2×term+0⌈SPA-↑X] CDIV DYNRAT3   [⎕io+2×term+0⌈(NRA∆G⌈XMP)-↑X]
[434]         escfact9←1⌈DYNRAT4   [⎕io+2×term+0⌈SPA-↑X] CDIV DYNRAT4   [⎕io+2×term+0⌈(NRA∆G⌈XMP)-↑X]
[435] :else
[436]     :if isNPCR
[437]         escfact3←1⌈DYNRATPost[⎕io+2×term+0⌈XS -↑X] CDIV DYNRATPost[⎕io+2×term+0⌈NRA-↑X]
[438]         escfact4←1⌈DYNRATPre [⎕io+2×term+0⌈XS -↑X] CDIV DYNRATPre [⎕io+2×term+0⌈NRA-↑X]
[439]     :else
[440]         escfact3←1⌈DYNRAT1   [⎕io+2×term+0⌈XS -↑X] CDIV DYNRAT1   [⎕io+2×term+0⌈NRA-↑X]
[441]         escfact4←1⌈DYNRAT2   [⎕io+2×term+0⌈XS -↑X] CDIV DYNRAT2   [⎕io+2×term+0⌈NRA-↑X]
[442]     :endif
[443]         escfact7←1⌈DYNRAT3   [⎕io+2×term+0⌈XS -↑X] CDIV DYNRAT3   [⎕io+2×term+0⌈NRA-↑X]
[444]         escfact9←1⌈DYNRAT4   [⎕io+2×term+0⌈XS -↑X] CDIV DYNRAT4   [⎕io+2×term+0⌈NRA-↑X]
[445] :endif
[446] ⍝
[447] LCASHONTOP←LTONTOP←GONTOP←LFONTOP←LTONTOP∆L←LFONTOP∆L←0
[448] :if ClntCode=3 ⋄ :orif bBuck
[449]     CTYPE∆L←  CTYPE2
[450]     COMACC∆L← COMACC2
[451]     COMSAL∆L← COMSAL2
[452]     COMDAT∆L← COMDAT2
[453]     COMMULT∆L←COMMULT2
[454]     COMPER∆L← COMPER2
[455] :else
[456]     CTYPE∆L←  CTYPE
[457]     COMACC∆L← COMACC
[458]     COMSAL∆L← COMSAL
[459]     COMDAT∆L← COMDAT
[460]     COMMULT∆L←COMMULT
[461]     COMPER∆L← COMPER
[462] :endif
[463] :if CONTOP ⋄ :orif ClntCode=3 ⋄ :orif bBuck ⋄ CASH∆ONTOP∆PUP PUPNRA ⋄ :endif ⍝ Leaving Cash On-Top
[464] ⍝
[465] COMPUP←(⍴PUPNRA)⍴0
[466] ⍝
[467] CTYPE∆L←  CTYPE
[468] COMACC∆L← COMACC
[469] COMSAL∆L← COMSAL
[470] COMDAT∆L← COMDAT
[471] COMMULT∆L←COMMULT
[472] COMPER∆L← COMPER
[473] COMADaySep∆L←COMADaySep
[474] 
[475] :if ~CONTOP ⋄ CASH∆PUP∆ACT ⋄ :endif
[476] ⍝⍝⍝ :if test
[477] ⍝⌿⍝    A←RGMPR-GMP×1+GMPREV
[478] ⍝⌿⍝    AUDIT '2600'
[479] ⍝⍝⍝ :endif
[480] ⍝ Paid-Up Pensions from SPA
[481] PUWSPA←PUPSPA←(⍴PUPNRA)⍴0 ⍝ Initialise
[482] ⍝ Fill with benefits before franking
[483] PUPSPA[⎕io  ;;;;;;]←PUPNRA[⎕io  ;;;;;;]×[⎕io+5]escfact4
[484] PUPSPA[⎕io+1;;;;;;]←PUPNRA[⎕io+1;;;;;;]×[⎕io+5]escfact3
[485] PUPSPA[⎕io+2;;;;;;]←PUPNRA[⎕io+2;;;;;;]×[⎕io+5]escfact7
[486] PUPSPA[⎕io+3;;;;;;]←PUPNRA[⎕io+3;;;;;;]×[⎕io+5]escfact9
[487] :if ClntCode=3
[488]     PUWSPA[⎕io  ;;;;;;]←PUWNRA[⎕io  ;;;;;;]×[⎕io+5]escfact4
[489]     PUWSPA[⎕io+1;;;;;;]←PUWNRA[⎕io+1;;;;;;]×[⎕io+5]escfact3
[490]     PUWSPA[⎕io+2;;;;;;]←PUWNRA[⎕io+2;;;;;;]×[⎕io+5]escfact7
[491]     PUWSPA[⎕io+3;;;;;;]←PUWNRA[⎕io+3;;;;;;]×[⎕io+5]escfact9
[492] ⍝⍝⍝    :if test
[493] ⍝⌿⍝        TPUWSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUWSPA
[494] ⍝⍝⍝    :endif
[495] :endif
[496] ⍝⍝⍝ :if test
[497] ⍝⌿⍝    TPUPSPA←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUPSPA
[498] ⍝⍝⍝ :endif
[499] ⍝ Frank first tranche
[500] T←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUPNRA
[501] PUPNRAN←T[⎕io  ;⎕io;]
[502] PUPNRAD←T[⎕io+1;⎕io;]
[503] PUPNRAL←T[⎕io+2;⎕io;]
[504] PUPNRA4←T[⎕io+3;⎕io;]
[505] :if ClntCode=3 ⋄ WT←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUWNRA
[506] :else          ⋄ WT←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUPNRA×[⎕io+5]WARFRAC∆l
[507] :endif
[508] PUWNRAN←WT[⎕io  ;⎕io;]
[509] PUWNRAD←WT[⎕io+1;⎕io;]
[510] PUWNRAL←WT[⎕io+2;⎕io;]
[511] PUWNRA4←WT[⎕io+3;⎕io;]
[512] ⍝ Replace first tranch of PUPSPA with post-franking figures
[513] ∆A←'2615a' ⋄ ∆B←'2616' ⋄ ∆C←'2620' ⋄ ∆D←'2621'
[514] :if PubSect
[515]     res←1 FRANK PUPNRAD,PUPNRAN,PUPNRAL,PUPNRA4,PubRGMPR,GMP,[0.1]GMPNRA
[516] :else
[517]     res←1 FRANK PUPNRAD,PUPNRAN,PUPNRAL,PUPNRA4,   RGMPR,GMP,[0.1]GMPNRA
[518] :endif
[519] PUPSPA[⎕io  ;⎕io;;;;;]←PUPNRA[⎕io  ;⎕io;;;;;]×[4]res[;⎕io  ] CDIV PUPNRAN
[520] PUPSPA[⎕io+1;⎕io;;;;;]←PUPNRA[⎕io+1;⎕io;;;;;]×[4]res[;⎕io+1] CDIV PUPNRAD
[521] PUPSPA[⎕io+2;⎕io;;;;;]←PUPNRA[⎕io+2;⎕io;;;;;]×[4]res[;⎕io+2] CDIV PUPNRAL
[522] PUPSPA[⎕io+3;⎕io;;;;;]←PUPNRA[⎕io+3;⎕io;;;;;]×[4]res[;⎕io+3] CDIV PUPNRA4
[523] :if ClntCode=3
[524]     ∆A←'2615b'
[525]     :if PubSect
[526]         res←1 FRANK PUWNRAD,PUWNRAN,PUWNRAL,PUWNRA4,PubRWGMPR,WGMP,[0.1]WGMPNRA
[527]     :else
[528]         res←1 FRANK PUWNRAD,PUWNRAN,PUWNRAL,PUWNRA4,   RWGMPR,WGMP,[0.1]WGMPNRA
[529]     :endif
[530]     PUWSPA[⎕io  ;⎕io;;;;;]←PUWNRA[⎕io  ;⎕io;;;;;]×[4]res[;⎕io  ] CDIV PUWNRAN
[531]     PUWSPA[⎕io+1;⎕io;;;;;]←PUWNRA[⎕io+1;⎕io;;;;;]×[4]res[;⎕io+1] CDIV PUWNRAD
[532]     PUWSPA[⎕io+2;⎕io;;;;;]←PUWNRA[⎕io+2;⎕io;;;;;]×[4]res[;⎕io+2] CDIV PUWNRAL
[533]     PUWSPA[⎕io+3;⎕io;;;;;]←PUWNRA[⎕io+3;⎕io;;;;;]×[4]res[;⎕io+3] CDIV PUWNRA4
[534] :endif
[535] ⍝⍝⍝ :if test
[536] ⍝⌿⍝    TPUPS←TPUPSPA  ⍝ Not enough room for full name!
[537] ⍝⌿⍝    AUDIT '2622' ⋄ AUDIT '2623'
[538] ⍝⍝⍝ :endif
[539] :if ~ClntCode=3
[540]     ⍝ Add adjustment to spouse's
[541]     temp←PUPSPA
[542]     temp[⎕io  ;;;;;;]←temp[⎕io  ;;;;;;]+COMPUP[⎕io  ;;;;;;]×[⎕io+5]escfact4
[543]     temp[⎕io+1;;;;;;]←temp[⎕io+1;;;;;;]+COMPUP[⎕io+1;;;;;;]×[⎕io+5]escfact3
[544]     temp[⎕io+2;;;;;;]←temp[⎕io+2;;;;;;]+COMPUP[⎕io+2;;;;;;]×[⎕io+5]escfact7
[545]     temp[⎕io+3;;;;;;]←temp[⎕io+3;;;;;;]+COMPUP[⎕io+3;;;;;;]×[⎕io+5]escfact9
[546]     PUWSPA←WARFRAC∆l×temp
[547]     temp←(0⌈(WARFRAC∆l×RGMPR)-RWGMPR) CDIV +/[⎕io]+/[⎕io+1]+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]PUWSPA[;⎕io;;;;;]
[548]     PUWSPA[     ;⎕io;   ;     ;   ;   ;]←PUWSPA[     ;⎕io;   ;     ;   ;   ;]×[⎕io+5]1+temp
[549]     PUWSPA[⎕io+1;⎕io;⎕io;⎕io  ;⎕io;⎕io;]←PUWSPA[⎕io+1;⎕io;⎕io;⎕io  ;⎕io;⎕io;]+(0=temp)×GFRAC1×0⌈(WARFRAC∆l×RGMPR)-RWGMPR  ⍝ Main, First tranche, Revaluable,In IRmax, ERF1, split by GFRAC1
[550]     PUWSPA[⎕io+1;⎕io;⎕io;⎕io+1;⎕io;⎕io;]←PUWSPA[⎕io+1;⎕io;⎕io;⎕io+1;⎕io;⎕io;]+(0=temp)×(1-GFRAC1)×0⌈(WARFRAC∆l×RGMPR)-RWGMPR
[551] :endif
[552] ⍝⍝⍝ :if test
[553] ⍝⌿⍝    TPUW←+/[⎕io+2]+/[⎕io+3]+/[⎕io+4]+/[⎕io+5]PUWSPA
[554] ⍝⌿⍝    T←RWGMPR++⌿+⌿TPUW
[555] ⍝⌿⍝    AUDIT '2640' ⋄ AUDIT '2680'
[556] ⍝⍝⍝ :endif
[557] ⍝
[558] ⍝ Do partial totals
[559] :if ~IsAccrued
[560]     TPENNRA ←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]PENNRA
[561]     TWARNRA ←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]WARNRA
[562]     TPENSPA ←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]PENSPA
[563]     TWPENSPA←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]WPENSPA
[564] :endif
[565] TPUPNRA←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]PUPNRA
[566] TPUWNRA←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]PUWNRA
[567] TPUPSPA←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]PUPSPA
[568] TPUWSPA←+/[⎕io+2]+/[⎕io+4]+/[⎕io+5]PUWSPA
[569] ⍝
[570] ⍝⍝⍝ ⍝ Summary output - FIXME???
[571] ⍝⍝⍝ :if test  ⋄ SUMMARY∆VPT ⋄ :endif ⍝⍝⍝ ⋄ :andif TEST=2
    ∇
