    ∇ ITC∆BENEFIT;BenType∆pp;IncType∆pp;SL∆pp;FSL∆pp;row;type;∆[1]   ⍝ ACTWIN.sf#7[2]   ⍝ CLAYBROOK VALUATION SYSTEM[3]   ⍝ Cash Benefit[4]   [5]   ⍝ Pension Projector Variables[6]   :if sepComCot[7]       BenType∆pp←IncType∆pp←'L',¯1↑'C',splitCombyPI/↑DYNIND ⍝ Commuted Cash[8]   [9]       :if STYPEC ⍝ Prospective Benefits have been separated out[10]          ITC∆SelfInsured comILLPROSCASH[11]      :elseif ~STYPEC ⋄ :andif ~IHCARESpread ⋄ :andif CAREFutAcc[12]          ITC∆CAREServSplit comILLPROSCASH[13]      :endif[14]  [15]      :if splitCombyPI[16]          :for ∆ :in ('S' 0) ('M' 1) ('3' 2) ('4' 3) ⋄ (type row)←∆[17]              BenType∆pp←IncType∆pp←'L',type[18]              SL∆pp←,splitcomILLCASH[row;] ⋄ FSL∆pp←,splitcomFILLCASH[row;][19]  [20]              PP∆CreateInterface[21]          :endfor[22]      :else[23]          SL∆pp←,comILLCASH ⋄ FSL∆pp←,comFILLCASH[24]  [25]          PP∆CreateInterface[26]      :endif[27]  [28]      BenType∆pp←IncType∆pp←'LT' ⍝ Cash on Top[29]  [30]      :if STYPEC ⍝ Prospective Benefits have been separated out[31]          ITC∆SelfInsured cotILLPROSCASH[32]      :elseif ~STYPEC ⋄ :andif ~IHCARESpread ⋄ :andif CAREFutAcc[33]          ITC∆CAREServSplit cotILLPROSCASH[34]      :endif[35]  [36]      SL∆pp←,cotILLCASH ⋄ FSL∆pp←,cotFILLCASH[37]  [38]      PP∆CreateInterface[39]  :else[40]      BenType∆pp←IncType∆pp←'L'[41]  [42]      :if STYPEC ⍝ Prospective Benefits have been separated out[43]          ITC∆SelfInsured ILLPROSCASH[44]      :elseif ~STYPEC ⋄ :andif ~IHCARESpread ⋄ :andif CAREFutAcc[45]          ITC∆CAREServSplit ILLPROSCASH[46]      :endif[47]  [48]      SL∆pp←,ILLCASH ⋄ FSL∆pp←,FILLCASH[49]  [50]      PP∆CreateInterface[51]  :endif    ∇