    ∇ res←larg Win∆FormValidation parm;types;status;∆;ctl;stat;changed;clients;realclients;masks;errs;field;z;xxx;names;nms;flds;e;a;f
[1]   ⍝ UTILSWIN.sf#5
[2]   ⍝ Validate form controls & enable/disable them
[3]   ⍝ Reads: ControlName enablePIs openParameters SystemDir
[4]   ⍝ Sets: ⍙CACHE FormFields isValn n∆A∆F nemethod neproj PIsenabled relRules
[5]   ⍝       ALLDEPENS ALLEPREFS ALLPROPS ALLREFS ALLRULES FIELDS PROPERTIES (indirectly)
[6]   ⍝ Revn: sjt13jun14 sjt17apr15
[7]   
[8]   :select parm
[9]   
[10]  :case 'Init'
[11]      :if 0=⎕nc 'Validation_enabled' ⋄ Validation_enabled←1 ⋄ :endif
[12]      :if 0=⎕nc 'Relevance_enabled'  ⋄ Relevance_enabled ←1 ⋄ :endif
[13]      PIsenabled←enablePIs                                                        ⍝ Enable Pension Increase fields
[14]      isValn←0
[15]      neproj←1 ⋄ nemethod←0                                                       ⍝ Default values for NE Model fields
[16]  
[17]      relRules←⍙RULESdict ReadDictFile larg
[18]      n∆A∆F←(⊃qtrim¨↑∆) push ∆←(⊂~mt¨↑∆)sel¨∆←relRules at 'Alternative' 'Field'   ⍝ ** optimisation **
[19]      1 FlattenPropertyRules relRules                                             ⍝ sets globals derived from relRules
[20]  
[21]      FormFields←Win∆GetControlList ControlName                                   ⍝ Get list of fields
[22]  
[23]  :case 'SetRelevance' ⍝ Adjustments to controls for Relevance
[24]      ReviseCacheFor FormFields
[25]      (a f)←(⊂×⎕NC⊃↑n∆A∆F)sel¨n∆A∆F[2 3]                                          ⍝ m: defined alt expns::std expns
[26]      status←(~openParameters) applyRulesFor a f mapp FormFields at 'variable'    ⍝ updates cache unless openParameters
[27]      nms←f a mapp (~'.'∊¨∆)/∆←keysIn status                                      ⍝ real or alternative expressions, ~ EPs
[28]      ∆←nms∊FormFields at 'variable'                                              ⍝ flag Main Form vars when processing sub-form
[29]      ∆←∆^ ~∆\(⊂'F1SS')≡¨(FormFields at 'variable' 'type') map ∆/nms              ⍝ exclude F1 Grids
[30]      ∆←∆/nms
[31]      :for ∆ :in spin ((FormFields at 'variable' 'control') map ∆) (status at a f mapp ∆)
[32]          (ctl stat)←∆
[33]          stat←^/((~Relevance_enabled),0)⌈[⍴⍴stat]1 0 1/stat                      ⍝ 1 0 1 ←→ PROPERTIES∊'Relevant' 'Editable'
[34]          (((Win∆Parent ctl),'.') (Win∆Child ctl)) Win∆SetRelated 'enabled' stat
[35]      :endfor
[36]  
[37]  :case 'Change'                                                                  ⍝ called 1000+ times launching basis editor
[38]      :if ~openParameters  ⍝⍝⍝ FIXME - ⋄ :andif Validation_enabled
[39]      ⍝   changed←S∆V mapp ,eis larg                                                  ⍝ ** potential optimisation **
[40]          changed←(FormFields at 'shortname' 'variable') mapp ,eis larg               ⍝ variable, even if was shortname
[41]          (a f)←(⊂×⎕NC⊃↑n∆A∆F)sel¨n∆A∆F[2 3]                                          ⍝ m: defined alt expns::std expns
[42]  
[43]          flds← ⊃(FormFields at 'variable' 'control') map changed
[44]          types←⊃(FormFields at 'variable' 'type')    map changed
[45]          flds Win∆Assign types                                                   ⍝ Assign variables required for validation check
[46]  
[47]          realclients←nub fieldsOf clientsOf a f mapp changed
[48]          ⍙CACHE←⍙CACHE update (a f mapp changed) push ⍎¨changed
[49]  
[50]          :if ~mt realclients
[51]              status←(~openParameters) applyRulesFor realclients                      ⍝ updates cache unless openParameters
[52]  
[53]              nms←f a mapp (~'.'∊¨∆)/∆←keysIn status                                  ⍝ real or alternative expressions, ~ EPs
[54]              ∆←nms∊FormFields at 'variable'                                          ⍝ flag Main Form vars when processing sub-form
[55]              ∆←∆^ ~∆\(⊂'F1SS')≡¨(FormFields at 'variable' 'type') map ∆/nms          ⍝ exclude F1 Grids
[56]              ∆←∆/nms
[57]              :for ∆ :in spin ((FormFields at 'variable' 'control') map ∆) (status at a f mapp ∆)
[58]                  (ctl stat)←∆
[59]                  stat←^/((~Relevance_enabled),0)⌈[⍴⍴stat]1 0 1/stat                  ⍝ 1 0 1 ←→ PROPERTIES∊'Relevant' 'Editable'
[60]                  (((Win∆Parent ctl),'.') (Win∆Child ctl)) Win∆SetRelated 'enabled' stat
[61]              :endfor
[62]          :endif
[63]      :endif
[64]  
[65]  :case 'Valid'
[66]  
[67]  ⍝⍝⍝ FIXME: (Ideally), Grids with single empty row should be considered "valid" - see function Win∆F1SSFilled
[68]  
[69]      (a f)←(⊂×⎕NC⊃↑n∆A∆F)sel¨n∆A∆F[2 3]                                          ⍝ m: defined alt expns::std expns
[70]      ∆←nub larg, f a mapp patronsOf a f mapp larg
[71]      ⍙CACHE←⍙CACHE update (a f mapp ∆) push ⍎¨∆                                  ⍝ cache values under standard names
[72]      status←larg push valsIn 1 applyRulesFor a f mapp larg                       ⍝ update cached evaluated properties
[73]  
[74]      masks←^/¨∣valsIn status                                                     ⍝ Relevant, Required and Editable
[75]      e←∨/¨errs←masks expand¨ (masks sel1¨ ⍎¨larg)^.=¨ ' '
[76]  
[77]      :if Validation_enabled ⋄ :andif ∨/e
[78]          field←↑(FormFields at 'variable' 'control') map ⊂↑e/ keysIn status      ⍝ Get first error field
[79]          1 Win∆SetFocus field
[80]          :if 'ActiveControl'≡13↑field ⎕wi 'class'
[81]              ∆←(relRules at 'Field' 'Desc') map keysIn status
[82]              res←⎕TCNL join 'Missing parameters:' push ⍕¨spin e/¨(∆)(WHERE¨errs)
[83]          :else
[84]              res←'Mandatory'
[85]          :endif
[86]      :else
[87]          res←0⍴'' ⍝ Default response
[88]      :endif
[89]  
[90]  :case 'Expunge'
[91]      0 0⍴⎕ex Validation_Vars    ⍝ expunge effects of FlattenPropertyRules
[92]  
[93]  :endselect
    ∇
