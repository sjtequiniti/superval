    ∇ res←field Ind_Annuity parm;parent;enabled;X0;Y0;TOP;DEF;GP;Page;SaveCN
[1]   ⍝ CALCWIN.sf#3
[2]   ⍝ Function to allow user control on Individula Annuity Calculator
[3]   
[4]   parent←'fmSV.sIndAnn.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   
[8]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[9]       :if uk≠1 ⋄ :andif '-'∊PenFreq[2;]
[10]          PenFreq←PenFreq[1;] OVER DropText PenFreq[2;]
[11]      :endif
[12]  
[13]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[14]      (parent,'pgPayment.fParms.edgp') ⎕wi 'onChange' ((parent,'pgPayment.fParms.edgp') ⎕wi 'onExit')
[15]      (parent,'pgPayment.fParms.eddef1') ⎕wi 'onChange' ((parent,'pgPayment.fParms.eddef1') ⎕wi 'onExit')
[16]      (parent,'pgPayment.fParms.edtop1') ⎕wi 'onChange' ((parent,'pgPayment.fParms.edtop1') ⎕wi 'onExit')
[17]      (parent,'pgPayment.fReversion.edY1') ⎕wi 'onChange' ((parent,'pgPayment.fReversion.edY1') ⎕wi 'onExit')
[18]      0 0⍴('edgp' 'eddef1' 'cbPenFreq1') Ind_Annuity 'Change'
[19]  
[20]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[21]  
[22]      :repeat
[23]          :select ↑field
[24]          :case 'edgp'
[25]              (parent,'pgPayment.fParms.ckgpOlap') ⎕wi 'enabled' (enabled←0≠zwb (parent,'pgPayment.fParms.edgp') ⎕wi 'text')
[26]              :if uk=1
[27]                  (parent,'pgPayment.fParms.ckDISC') ⎕wi 'enabled' enabled
[28]              :endif
[29]          :case 'eddef1'
[30]              enabled←0≠zwb (parent,'pgPayment.fParms.eddef1') ⎕wi 'text'
[31]              ((⊂parent,'pgPayment.fFinancial.'),¨'ckpiind' ((1+uk=1)⊃'edPVMdef' 'cbPVMdef')) MultiWI 'enabled' enabled
[32]              0 0⍴('edY1' 'ckpiind') Ind_Annuity 'Change'
[33]              :if uk=1 ⋄ ((⊂parent,'pgMortality.fDefer.'),¨'cbP_DDEF' 'cbP_miDDEF' 'cbS_DDEF' 'cbS_miDDEF') MultiWI 'enabled' enabled
[34]              :else    ⋄ ((⊂parent,'pgMortality.fMortality.'),¨'edPMdef1' 'edPMdef2' 'edPMdef3' 'edSMdef1' 'edSMdef2' 'edSMdef3') MultiWI 'enabled' enabled
[35]              :endif
[36]          :case 'cbPenFreq1'
[37]              (parent,'pgPayment.fParms.cbPenFreq2') ⎕wi 'enabled' ('C'≠1↑(parent,'pgPayment.fParms.cbPenFreq1') ⎕wi 'text')
[38]          :case 'edY1'
[39]              enabled←0≠zwb (parent,'pgPayment.fReversion.edY1') ⎕wi 'text'
[40]              (parent,'pgPayment.fReversion.edrev') ⎕wi 'enabled' enabled
[41]              (parent,'pgPayment.fReversion.ckrevdef') ⎕wi 'enabled' (enabled^0≠zwb (parent,'pgPayment.fParms.eddef1') ⎕wi 'text')
[42]              0 0⍴(⊂'edtop1') Ind_Annuity 'Change'
[43]          :case 'edtop1'
[44]              :if uk≠1
[45]                  (parent,'pgPayment.fReversion.cbrevterm') ⎕wi 'enabled' ((0≠zwb (parent,'pgPayment.fReversion.edY1') ⎕wi 'text')^120≠zwb (parent,'pgPayment.fParms.edtop1') ⎕wi 'text')
[46]              :endif
[47]          :case 'ckpiind'
[48]              enabled←^/(parent,'pgPayment.fFinancial.ckpiind') ⎕wi 'Ref' 'value' 'enabled'
[49]              :if uk=1 ⋄ (parent,'pgPayment.fFinancial.cbdefi') ⎕wi 'enabled' enabled
[50]              :else    ⋄ (parent,'pgPayment.fFinancial.eddefi') ⎕wi 'enabled' enabled
[51]              :endif
[52]          :case 'ckMortImp'
[53]              (1↓(parent,'pgMortality.fImprove') ⎕wi 'children') MultiWI 'enabled' ((parent,'pgMortality.fImprove.ckMortImp') ⎕wi 'value')
[54]          :endselect
[55]      :until mt field←1↓field
[56]  
[57]  :case 'Valid' ⍝ Routine specific validation
[58]  
[59]      :repeat
[60]        :select Page←DLTMB ↑field
[61]        :case 'All' ⍝ Validate all pages
[62]           res←('pgPayment' 'pgMortality') Ind_Annuity 'Valid'
[63]  
[64]        :case 'pgPayment'
[65]           X0←+/(MatrixZWB X)÷1 12 ⋄ GP←zwb gp
[66]           TOP←+/(MatrixZWB top)÷1 12 ⋄ DEF←+/(MatrixZWB def)÷1 12
[67]  
[68]           ⍝ Check dates are in right order
[69]           :if TOP<GP+X0⌈DEF ⍝ Term is beyond Guarantee period
[70]                Win∆SetFocus parent,Page,'.fParms.edtop1'
[71]                res←'InvEntry' 'Guarantee Period goes beyond Ceasing Age' ⋄ :return
[72]           :endif
[73]           :if (∨/' '≠,def)^DEF<X0 ⍝ Age beyond deferral
[74]                Win∆SetFocus parent,Page,'.fParms.eddef1'
[75]                res←'InvEntry' 'Deferral Age is less than Pensioner''s Age' ⋄ :return
[76]           :endif
[77]           :if DEF≥TOP ⍝ Deferral Age beyond Term
[78]                Win∆SetFocus parent,Page,'.fParms.eddef1'
[79]                res←'InvEntry' 'Deferral Age is greater than Ceasing Age' ⋄ :return
[80]           :endif
[81]  
[82]        :case 'pgMortality'
[83]           :if uk=1 ⋄ res←parent Valid_UKMortality Page ⋄ :endif
[84]        :endselect
[85]      :until mt field←1↓field
[86]  
[87]  :case 'Run'
[88]  
[89]      SaveCN←parent ⎕wi '∆savecn'
[90]      ANN
[91]      0 0⍴ClientFile ReadFile SaveCN
[92]      res←''
[93]  
[94]  :case 'Quit' ⍝ Deleting "other" variables
[95]  
[96]  :endselect
    ∇
