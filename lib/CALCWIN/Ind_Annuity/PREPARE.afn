    ∇ PREPARE;BETAYRS;BASE;POSTRATE;ImpTbl;Alpha;Beta;CMSL;SMSL;PostImpP;MIX;MIY;MIBase;PostImpS;PreImpP;PreImpS;MBase;Mbeta;FBase;Fbeta;Malpha;Falpha;IMPTBL;∆
[1]   ⍝ CALCWIN.sf#3
[2]   ⍝ Create the Run Description
[3]   RunTime←DLTMB 1 DATESPELL ⎕ts
[4]   
[5]   :if ^/' '=X[1;] ⋄ X[1;0]←'0' ⋄ :endif
[6]   :if ∨/' '≠,Y ⋄ :andif ^/' '=Y[1;] ⋄ Y[1;0]←'0' ⋄ :endif
[7]   :if ∨/' '≠,def ⋄ :andif ^/' '=def[1;] ⋄ def[1;0]←'0' ⋄ :endif
[8]   :if ^/' '=top[1;] ⋄ top[1;0]←'0' ⋄ :endif
[9]   
[10]  X0←+/(MatrixZWB X)÷1 12 ⋄ Y0←+/(MatrixZWB Y)÷1 12 ⋄ TOP←+/(MatrixZWB top)÷1 12
[11]  
[12]  ⍝ Create the variables required for Annuity Calculator
[13]  :if uk=1
[14]      QXdef←100↑DEC∆CHECK P_DDEFTABXX ⋄ QX←(DTZ DEC∆CHECK P_DPENTABXX),1
[15]      QYdef←100↑DEC∆CHECK S_DDEFTABXX ⋄ QY←(DTZ DEC∆CHECK S_DPENTABXX),1
[16]  :else
[17]      QXdef←100↑DEC∆CHECK PMdef ⋄ QX←(DTZ DEC∆CHECK PM),1
[18]      QYdef←100↑DEC∆CHECK SMdef ⋄ QY←(DTZ DEC∆CHECK SM),1
[19]  :endif
[20]  
[21]  LE←1+⌈/⌈120,TOP,(⍴QX),(⍴QY)+X0-Y0
[22]  QX←LE OVERTAKE QX ⋄ QY←LE OVERTAKE QY
[23]  
[24]  :select uk ⍝ Create Mortality Improvement Factors
[25]  :case 0
[26]      MIX←1-LE↑DEC∆CHECK miX ⋄ MIY←1-LE↑DEC∆CHECK miY ⋄ MIBase←zwb miBase
[27]      QXdef←QXdef×100↑MIX←MIX*MIBase+(⍳LE)-X0 ⋄ QX←QX×MIX
[28]      QYdef←QYdef×100↑MIY←MIY*MIBase+(⍳LE)-Y0 ⋄ QY←QY×MIY
[29]  :case 1
[30]      CalcYr←zwb CalcYr
[31]      :if (P_miDPENMORTIMPR←↑P_miDPENMORTIMPR)∊'SCA'
[32]          Alpha←120 OVERTAKE (DEC∆CHECK P_miDPENALPHA),1
[33]          Beta ←120 OVERTAKE (DEC∆CHECK P_miDPENBETA ),0
[34]          BETAYRS←zwb P_miDPENBETAYRS ⋄ CMSL←zwb P_miDPENCMSL ⋄ SMSL←zwb P_miDPENSMSL ⋄ BASE←zwb P_miDPENBASE
[35]      :endif
[36]      POSTRATE←(zwb P_miDPENRATEIMPR)×ZWB P_DPENTABXX[1;]
[37]      :select P_miDPENMORTIMPR
[38]      :case 'N' ⋄ PostImpP←''
[39]      :case 'A' ⋄ PostImpP←POSTRATE Alpha Beta BETAYRS BASE "CalcYr-0 gRound X0"
[40]      :case 'C' ⋄ PostImpP←POSTRATE Alpha Beta BETAYRS      CMSL
[41]      :case 'S' ⋄ PostImpP←POSTRATE Alpha Beta BETAYRS BASE SMSL
[42]      :case '2'
[43]          :if MTmat P_miDPENIMPTBL[0;] ⋄ IMPTBL←READ2D MIcsvDir,P_miDPENIMPTBLcsv
[44]          :elseif                     ¯1≡IMPTBL←¯1 DEC∆CHECK P_miDPENIMPTBL ⋄ IMPTBL←120 120⍴0
[45]          :endif
[46]          IMPTBL←↑(0 P_DPENORIG (zwb P_miDPENIMPORIG)) ReBaseMortImp IMPTBL P_miDPENIMPTBLcsv P_miDPENIMPTBL ''
[47]          ImpTbl←((zwb P_miDPENIMPORIG),CalcYr) Adjust2D IMPTBL
[48]          PostImpP←POSTRATE ImpTbl
[49]      :endselect
[50]  ⍝⍝⍝ QX←QX×(⍴QX) OVERTAKE  P_miDPENMORTIMPR    RedFact     PostImpP,0 gRound X0
[51]      QX←QX×(⍴QX) OVERTAKE (P_miDPENMORTIMPR 0) RedFactCalc PostImpP,0 gRound X0
[52]  
[53]      :if (S_miDPENMORTIMPR←↑S_miDPENMORTIMPR)∊'SCA'
[54]          Alpha←120 OVERTAKE (DEC∆CHECK S_miDPENALPHA),1
[55]          Beta ←120 OVERTAKE (DEC∆CHECK S_miDPENBETA ),0
[56]          BETAYRS←zwb S_miDPENBETAYRS ⋄ CMSL←zwb S_miDPENCMSL ⋄ SMSL←zwb S_miDPENSMSL ⋄ BASE←zwb S_miDPENBASE
[57]      :endif
[58]      POSTRATE←(zwb S_miDPENRATEIMPR)×ZWB S_DPENTABXX[1;]
[59]      :select S_miDPENMORTIMPR
[60]      :case 'N' ⋄ PostImpS←''
[61]      :case 'A' ⋄ PostImpS←POSTRATE Alpha Beta BETAYRS BASE "CalcYr-0 gRound Y0"
[62]      :case 'C' ⋄ PostImpS←POSTRATE Alpha Beta BETAYRS      CMSL
[63]      :case 'S' ⋄ PostImpS←POSTRATE Alpha Beta BETAYRS BASE SMSL
[64]      :case '2'
[65]          :if MTmat S_miDPENIMPTBL[0;] ⋄ IMPTBL←READ2D MIcsvDir,S_miDPENIMPTBLcsv
[66]          :elseif                     ¯1≡IMPTBL←¯1 DEC∆CHECK S_miDPENIMPTBL ⋄ IMPTBL←120 120⍴0
[67]          :endif
[68]          IMPTBL←↑(0 S_DPENORIG (zwb S_miDPENIMPORIG)) ReBaseMortImp IMPTBL S_miDPENIMPTBLcsv S_miDPENIMPTBL ''
[69]          ImpTbl←((zwb S_miDPENIMPORIG),CalcYr) Adjust2D IMPTBL
[70]          PostImpS←POSTRATE ImpTbl
[71]      :endselect
[72]  ⍝⍝⍝ QY←QY×(⍴QY) OVERTAKE  S_miDPENMORTIMPR    RedFact     PostImpS,0 gRound Y0
[73]      QY←QY×(⍴QY) OVERTAKE (S_miDPENMORTIMPR 0) RedFactCalc PostImpS,0 gRound Y0
[74]  
[75]      :if (P_miDDEFMORTIMPR←↑P_miDDEFMORTIMPR)∊'SCA'
[76]          Alpha←120 OVERTAKE (DEC∆CHECK P_miDDEFALPHA),1
[77]          Beta ←120 OVERTAKE (DEC∆CHECK P_miDDEFBETA ),0
[78]          BETAYRS←zwb P_miDDEFBETAYRS ⋄ CMSL←zwb P_miDDEFCMSL ⋄ SMSL←zwb P_miDDEFSMSL ⋄ BASE←zwb P_miDDEFBASE
[79]      :endif
[80]      POSTRATE←(zwb P_miDDEFRATEIMPR)×ZWB P_DDEFTABXX[1;]
[81]      :select P_miDDEFMORTIMPR
[82]      :case 'N' ⋄ PreImpP←''
[83]      :case 'A' ⋄ PreImpP←POSTRATE Alpha Beta BETAYRS BASE "CalcYr-0 gRound X0"
[84]      :case 'C' ⋄ PreImpP←POSTRATE Alpha Beta BETAYRS      CMSL
[85]      :case 'S' ⋄ PreImpP←POSTRATE Alpha Beta BETAYRS BASE SMSL
[86]      :case '2'
[87]          :if MTmat P_miDDEFIMPTBL[0;] ⋄ IMPTBL←READ2D MIcsvDir,P_miDDEFIMPTBLcsv
[88]          :elseif                     ¯1≡IMPTBL←¯1 DEC∆CHECK P_miDDEFIMPTBL ⋄ IMPTBL←120 120⍴0
[89]          :endif
[90]          IMPTBL←↑(0 P_DDEFORIG (zwb P_miDDEFIMPORIG)) ReBaseMortImp IMPTBL P_miDDEFIMPTBLcsv P_miDDEFIMPTBL ''
[91]          ImpTbl←((zwb P_miDDEFIMPORIG),CalcYr) Adjust2D IMPTBL
[92]          PreImpP←POSTRATE ImpTbl
[93]      :endselect
[94]  ⍝⍝⍝ QXdef←QXdef×(⍴QXdef) OVERTAKE  P_miDDEFMORTIMPR    RedFact     PreImpP,0 gRound X0
[95]      QXdef←QXdef×(⍴QXdef) OVERTAKE (P_miDDEFMORTIMPR 0) RedFactCalc PreImpP,0 gRound X0
[96]  
[97]      :if (S_miDDEFMORTIMPR←↑S_miDDEFMORTIMPR)∊'SCA'
[98]          Alpha←120 OVERTAKE (DEC∆CHECK S_miDDEFALPHA),1
[99]          Beta ←120 OVERTAKE (DEC∆CHECK S_miDDEFBETA ),0
[100]         BETAYRS←zwb S_miDDEFBETAYRS ⋄ CMSL←zwb S_miDDEFCMSL ⋄ SMSL←zwb S_miDDEFSMSL ⋄ BASE←zwb S_miDDEFBASE
[101]     :endif
[102]     POSTRATE←(zwb S_miDDEFRATEIMPR)×ZWB S_DDEFTABXX[1;]
[103]     :select S_miDDEFMORTIMPR
[104]     :case 'N' ⋄ PreImpS←''
[105]     :case 'A' ⋄ PreImpS←POSTRATE Alpha Beta BETAYRS BASE "CalcYr-0 gRound Y0"
[106]     :case 'C' ⋄ PreImpS←POSTRATE Alpha Beta BETAYRS      CMSL
[107]     :case 'S' ⋄ PreImpS←POSTRATE Alpha Beta BETAYRS BASE SMSL
[108]     :case '2'
[109]         :if MTmat S_miDDEFIMPTBL[0;] ⋄ IMPTBL←READ2D MIcsvDir,S_miDDEFIMPTBLcsv
[110]         :elseif                     ¯1≡IMPTBL←¯1 DEC∆CHECK S_miDDEFIMPTBL ⋄ IMPTBL←120 120⍴0
[111]         :endif
[112]         IMPTBL←↑(0 S_DDEFORIG (zwb S_miDDEFIMPORIG)) ReBaseMortImp IMPTBL S_miDDEFIMPTBLcsv S_miDDEFIMPTBL ''
[113]         ImpTbl←((zwb S_miDDEFIMPORIG),CalcYr) Adjust2D IMPTBL
[114]         PreImpS←POSTRATE ImpTbl
[115]     :endselect
[116] ⍝⍝⍝ QYdef←QYdef×(⍴QYdef) OVERTAKE  S_miDDEFMORTIMPR    RedFact     PreImpS,0 gRound Y0
[117]     QYdef←QYdef×(⍴QYdef) OVERTAKE (S_miDDEFMORTIMPR 0) RedFactCalc PreImpS,0 gRound Y0
[118] 
[119] :case 2 ⍝ Create the SA Mortality Improvement Factors
[120]     MBase←zwb mBase ⋄ FBase←zwb fBase
[121]     Mbeta←-(⍟1-0.01×zwb mbeta)CDIV zwb myears
[122]     Fbeta←-(⍟1-0.01×zwb fbeta)CDIV zwb fyears
[123]     :if zwb MortImp
[124]         Malpha←LE OVERTAKE (DEC∆CHECK malpha),1
[125]         Falpha←LE OVERTAKE (DEC∆CHECK falpha),1
[126]     :else
[127]         Malpha←Falpha←LE/1
[128]     :endif
[129]     QX←QX×Malpha+(1-Malpha)×*-Mbeta×MBase+(⍳⍴QX)-⌊0.5+X0
[130]     QY←QY×Falpha+(1-Falpha)×*-Fbeta×FBase+(⍳⍴QY)-⌊0.5+Y0
[131] :endselect
[132] 
[133] GP←zwb gp ⋄ Disc←~GPOlap←zwb gpOlap
[134] DEF←((X0×~×DEF)+DEF←+/(MatrixZWB def)÷ 1 12)-X0
[135] EDEF←TOP-X0+DEF
[136] REV←(×Y0)×0.01×zwb rev ⋄ REVdef←zwb revdef ⋄ REVterm←'T'=↑revterm
[137] penfreq←PenFreq[0;0],⍕'In Advance'≡10↑PenFreq[1;]
[138] 
[139] :if uk=1
[140]     Disc←zwb DISC
[141]     :if ∨/' '≠lrIR     ⋄ (IR     lrIR)    ←2↑FinConvert IR     lrIR     ⋄ :endif
[142]     :if ∨/' '≠lrdefi   ⋄ (defi   lrdefi)  ←2↑FinConvert defi   lrdefi   ⋄ :endif
[143]     :if ∨/' '≠lrPVMdef ⋄ (PVMdef lrPVMdef)←2↑FinConvert PVMdef lrPVMdef ⋄ :endif
[144]     :if ∨/' '≠lrPVM    ⋄ (PVM    lrPVM   )←2↑FinConvert PVM    lrPVM    ⋄ :endif
[145]     pi←i←1+0.01×ExecuteRates IR ''
[146]     :if zwb piind ⋄ :andif ∨/defi≠' ' ⋄ pi←1+0.01×ExecuteRates defi '' ⋄ :endif
[147]     :if ∨/PVMdef≠' ' ⋄ pvmdef←1+0.01×ExecuteRates PVMdef '' ⋄ :else ⋄ pvmdef←1 ⋄ :endif
[148]     :if ∨/PVM   ≠' ' ⋄ pvm   ←1+0.01×ExecuteRates PVM    '' ⋄ :else ⋄ pvm   ←1 ⋄ :endif
[149] :else
[150]     i←1+0.01×,EXECUTE IR
[151]     :if zwb piind ⋄ :andif ∨/defi≠' ' ⋄ pi←1+0.01×,EXECUTE defi ⋄ :else ⋄ pi←i ⋄ :endif
[152]     :if ∨/PVMdef≠' ' ⋄ pvmdef←1+0.01×,EXECUTE PVMdef ⋄ :else ⋄ pvmdef←1 ⋄ :endif
[153]     :if ∨/PVM≠' ' ⋄ pvm←1+0.01×,EXECUTE PVM ⋄ :else ⋄ pvm←1 ⋄ :endif
[154] :endif
    ∇
