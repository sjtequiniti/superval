    ∇ desc←TYPE SAVEDOSDESC data;LIST;cols;VarNAME;type;N;I;list;PickList;Z;SegS;i;size
[1]   ⍝ DATAWIN.sf#2
[2]   ⍝ Converting DOS entries of the column numbers which contain member
[3]   ⍝  details in record using description in LIST
[4]   
[5]   (SegS desc)←data ⍝ DOS data and format description
[6]   LIST←⍎'DOS',TYPE ⍝ A "dictionary" of DOS entries
[7]   
[8]   list←⍙VALUESdict ReadDictFile TYPE '' 'Names' ⍝ All Variables required
[9]   0 0⍴ReadModule TYPE 'None' ⍝ Default Values
[10]  
[11]  N←1↑⍴VarNAME←SStoMAT 1↓LIST SSINDEX 1 ⋄ type←MatrixZWB SStoMAT 1↓LIST SSINDEX 3
[12]  cols←(N,2)⍴MatrixZWB SStoMAT 1↓LIST SSINDEX 2
[13]  
[14]  :if 2≠1↑⍴SegS ⋄ SegS←MATRIX ,'⍺',SegS ⋄ :endif
[15]  
[16]  size←0
[17]  :for i :in ⍳1↑⍴SegS
[18]      :if ^/' '=,data←SStoMAT SegS[i;] ⋄ :continue ⋄ :endif
[19]      size←1↑⍴data←((size,0)⌈⍴data)↑data
[20]      :for I :in ⍳N
[21]          :if ∨/'freq'⍷VarNAME[I;] ⍝ Frequency fields
[22]          :andif i=1
[23]              PickList←1 0↓SStoMAT 1↓((SystemDir,'POPUPS') ReadFile 'Freq') SSINDEX (1+uk)
[24]              ⍝ Set Current and Previous Freq the same
[25]              ⍎VarNAME[I;],'←p',VarNAME[I;],'←,PickList[¯1↑1,PickList[;,1] TLU data[cols[I;1];1];]'
[26]          :else
[27]              :select type[I]
[28]              :case 1
[29]                  :if i=1
[30]                      ⍎VarNAME[I;],'←p',VarNAME[I;],'←DLTB data[cols[I;1];]'
[31]                  :endif
[32]              :case 1.5
[33]                  :if i=1
[34]                      ⍎VarNAME[I;],'←p',VarNAME[I;],'←(DLTB data[cols[I;1];]) OVER " "'
[35]                  :endif
[36]              :case 2
[37]                  :if i=1
[38]                      ⍎VarNAME[I;],'←p',VarNAME[I;],'←SStoMAT DLTMB "⍺",data[cols[I;⍳2];]'
[39]                  :elseif ∨/' '≠,data[cols[I;⍳2];]
[40]                      ⍎'p',VarNAME[I;],'←SStoMAT DLTMB "⍺",data[cols[I;⍳2];]'
[41]                  :endif
[42]              :case 3
[43]                  :if i=1
[44]                      ⍎VarNAME[I;],'←p',VarNAME[I;],'←SStoMAT DLTMB "⍺",data[cols[I;⍳2];]'
[45]                      ⍎'d',VarNAME[I;],'←pd',VarNAME[I;],'←"',(DLTB data[1+cols[I;2];]),'"'
[46]                  :endif
[47]              :endselect
[48]          :endif
[49]      :endfor
[50]  
[51]      :if 'Act'≡3↑TYPE
[52]          :if uk=0 ⋄ :andif ∨/' '≠,data[30+⍳2;] ⍝ Pre 83 Undeducted Conts!!
[53]              AvNumVars←AvNumVars OVER 'AC083'
[54]              AvNumFrom←AvNumFrom OVER ⍕1↑MatrixZWB data[30+⍳2;],' '
[55]              AvNumTo←AvNumTo OVER ⍕1↑MatrixZWB ⊖data[30+⍳2;],' '
[56]              AvNumDesc←AvNumDesc OVER 'Pre-1983 Undeducted Contributions'
[57]          :endif
[58]  
[59]          :if uk=0 ⋄ :andif ∨/' '≠,data[32+⍳2;] ⍝ Member Cont Rate
[60]              AvNumVars←AvNumVars OVER 'CR'
[61]              AvNumFrom←AvNumFrom OVER ⍕1↑MatrixZWB data[32+⍳2;],' '
[62]              AvNumTo←AvNumTo OVER ⍕1↑MatrixZWB ⊖data[32+⍳2;],' '
[63]              AvNumDesc←AvNumDesc OVER 'Additional Contribution Rate'
[64]          :endif
[65]  
[66]          data←(cols[N;2],0)↓data ⍝ Non-Standard Fields
[67]          :for I :in ¯4+5×⍳0.2×1↑⍴data
[68]              :select data[I;1]
[69]              :case 'N'
[70]                  :if i=1
[71]                      TotNumVars←TotNumVars OVER data[I+1;]
[72]                      TotNumFrom←TotNumFrom OVER data[I+2;]
[73]                      TotNumTo←TotNumTo OVER data[I+3;]
[74]                      TotNumDesc←TotNumDesc OVER ' '
[75]                  :else
[76]                      pTotNumFrom←pTotNumFrom OVER data[I+2;]
[77]                      pTotNumTo←pTotNumTo OVER data[I+3;]
[78]                  :endif
[79]              :case 'D'
[80]                  :if i=1
[81]                      DateVars←DateVars OVER data[I+1;]
[82]                      DateFrom←DateFrom OVER data[I+2;]
[83]                      DateTo←DateTo OVER data[I+3;]
[84]                      DateFmt←DateFmt OVER data[I+4;]
[85]                      DateDesc←DateDesc OVER ' '
[86]                  :endif
[87]              :case 'C'
[88]                  :if i=1
[89]                      CharVars←CharVars OVER data[I+1;]
[90]                      CharFrom←CharFrom OVER data[I+2;]
[91]                      CharTo←CharTo OVER data[I+3;]
[92]                      CharDesc←CharDesc OVER ' '
[93]                  :endif
[94]              :endselect
[95]          :endfor
[96]      :endif
[97]  :endfor
[98]  
[99]  :select 3↑TYPE
[100] :case 'Act'
[101]     AvNumVars←(Z←∨/' '≠AvNumVars)⌿AvNumVars
[102]     AvNumFrom←Z⌿AvNumFrom ⋄ AvNumTo←Z⌿AvNumTo ⋄ AvNumDesc←Z⌿AvNumDesc
[103]     :if i≠1 ⋄ pAvNumFrom←Z⌿pAvNumFrom ⋄ pAvNumTo←Z⌿pAvNumTo ⋄ :endif
[104]     CharVars←(Z←∨/' '≠CharVars)⌿CharVars
[105]     CharFrom←Z⌿CharFrom ⋄ CharTo←Z⌿CharTo ⋄ CharDesc←Z⌿CharDesc
[106]     DateVars←(Z←∨/' '≠DateVars)⌿DateVars ⋄ DateDesc←Z⌿DateDesc
[107]     DateFrom←Z⌿DateFrom ⋄ DateTo←Z⌿DateTo ⋄ DateFmt←Z⌿DateFmt
[108]     TotNumVars←(Z←∨/' '≠TotNumVars)⌿TotNumVars
[109]     TotNumFrom←Z⌿TotNumFrom ⋄ TotNumTo←Z⌿TotNumTo ⋄ TotNumDesc←Z⌿TotNumDesc
[110]     :if i≠1
[111]         pTotNumFrom←Z⌿((⍴pTotNumFrom)⌈(⍴Z),0)↑pTotNumFrom
[112]         pTotNumTo←Z⌿((⍴pTotNumTo)⌈(⍴Z),0)↑pTotNumTo
[113]     :endif
[114]     :if uk=2
[115]         :if ~0∊⍴BenEXIT
[116]         :andif ~0∊⍴Z←TotNumVars TLU BenEXIT
[117]             fBOE←TotNumFrom[Z;] OVER TotNumTo[Z;]
[118]         :endif
[119]         Migrate_ValidParms
[120]     :endif
[121] :case 'Pen'
[122]     :if uk=2 ⋄ Migrate_ValidParms 'Pen' ⋄ :endif
[123] :case 'Def'
[124]     :if uk=2 ⋄ Migrate_ValidParms 'Def' ⋄ :endif
[125] :endselect
[126] 
[127] desc←ClientFile Win∆ReplaceParms (TYPE) (desc)
[128] 0 0⍴ClientFile SaveToFile TYPE desc (pack list) 1
[129] 0 0⍴⎕ex list
    ∇
