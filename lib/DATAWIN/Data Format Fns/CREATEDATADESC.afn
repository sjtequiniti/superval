    ∇ prevind CREATEDATADESC Desc;LIST;Z;fn;CREATECOLS;i;row[1]   ⍝ DATAWIN.sf#2[2]   ⍝ Determining the column numbers which contain member details in record[3]   ⍝ or ⍳0 if not given and storing in global variable f.....[4]   ⍝ prevind is: 0 - Current, 1 - Both Current/Previous, 2 - Previous as f...[5]   ⍝[6]   ⍝ V2.50u RE 3/2000 Windowised[7]   Desc←SStoMAT '><' char_replace 1 HyphenSwap Desc[8]   FormatType←Desc[⎕io;⍳3] ⍝ Format Type - Act, Pen or Def (Global FormatType must be created)[9]   Desc←1↓Desc[⎕io+1;] ⍝ Format Description[10]  [11]  :if 0=⎕nc 'prevind'[12]      :if ×ControlName ⎕wi '∆formatcreated' ⋄ :return ⋄ :endif[13]      prevind←0 ⍝ Default to Current Only[14]      ControlName ⎕wi '∆formatcreated' (1+prevind) ⍝ Indicate already created for next pass (idealy at end but ???)[15]  :endif[16]  [17]  fNOM←⍳0 ⍝ Default this for those without the field[18]  LIST←⍙VALUESdict ReadDictFile (FormatType,'Format') '' 'Names' ⍝ List of Variables from Defaults file[19]  0 0⍴ReadModule (FormatType,'Format') 'None' ⍝ Get Default Values for any conversions necessary[20]  [21]  0 0⍴ClientFile ReadFile (FormatType,'Format') Desc ⍝ Read Client Format Variables[22]  ⍝ Get latest Format Variable list/descriptions[23]  0 0⍴⍙VALUESdict ReadDictFile (FormatType,'Format') '' (SStoMAT '⍺CharStandNames⍺CharStandVars⍺DateStandNames⍺DateStandVars⍺FixNumStandNames⍺FixNumStandVars⍺VarNumStandNames⍺VarNumStandVars')[24]  Z←('f'=LIST[;⎕io])⌿LIST[25]  fn←Z,(((1↑⍴Z),6)⍴'←COLS '),Z ⍝ "Execute" all f... Vars[26]  :if ×prevind ⍝ "Execute" all pf... Vars[27]      fn←fn OVER Z,(((1↑⍴Z),6)⍴'←COLS '),Z←'p',Z[28]  :endif[29]  ⍎⎕def 'CREATECOLS' OVER fn[30]  [31]  RECL←2+zwb RECL ⍝ Record Length[32]  :if ~0∊⍴LIST ExactTLU 'salfreq' ⋄ salfreq←1↑salfreq ⋄ :endif[33]  :if ~0∊⍴LIST ExactTLU 'pupfreq' ⋄ pupfreq←1↑pupfreq ⋄ :endif[34]  :if ~0∊⍴LIST ExactTLU 'penfreq' ⋄ penfreq←1↑penfreq ⋄ :endif[35]  :if ~0∊⍴LIST ExactTLU 'SAgeDiff' ⋄ SAgeDiff←ZWB SAgeDiff ⋄ :endif[36]  :if ~0∊⍴LIST ExactTLU 'defMS' ⋄ defMS←zwb defMS ⋄ :endif[37]  [38]  AvNEDs←⍳0 ⍝ Branch according to Data Format[39]  :if uk≠1 ⋄ :andif (⊂FormatType)∊'Pen' 'Def' ⍝ Defaults for non-UK 'Pen' and 'Def'[40]      TotNumVars←CharVars←DateVars←TotNumDesc←CharDesc←DateDesc←0 0⍴''[41]  :else[42]      ⍝ Combine Average and Total Numeric Non-Standards[43]      AvNEDs←(1↑⍴AvNumVars)⍴1 ⋄ TotNumVars←AvNumVars OVER TotNumVars[44]      TotNumFrom←AvNumFrom OVER TotNumFrom ⋄ TotNumTo←AvNumTo OVER TotNumTo[45]      TotNumDesc←AvNumDesc OVER TotNumDesc[46]      :if ×prevind[47]          pTotNumFrom←pAvNumFrom OVER pTotNumFrom[48]          pTotNumTo←pAvNumTo OVER pTotNumTo[49]      :endif[50]      ⍝ Generic code for Actives and Deferreds[51]      AvNEDs←(Z←~^/' '=TotNumVars)/(1↑⍴TotNumVars)↑AvNEDs[52]      TotNumFrom←Z⌿TotNumFrom ⋄ TotNumTo←Z⌿TotNumTo ⋄ TotNumDesc←Z⌿TotNumDesc[53]      :if ×prevind[54]          pTotNumFrom←Z⌿pTotNumFrom ⋄ pTotNumTo←Z⌿pTotNumTo[55]      :endif[56]      :for i :in ⍳1↑⍴TotNumVars←Z⌿TotNumVars[57]           ⍎'f',TotNumVars[i;],'←COLS TotNumFrom[i;] OVER TotNumTo[i;]'[58]           :if ×prevind[59]               ⍎'pf',TotNumVars[i;],'←COLS pTotNumFrom[i;] OVER pTotNumTo[i;]'[60]           :endif[61]      :endfor[62]      TotNumDesc←LJUSTIFY TotNumDesc,row⍀(row←~∨/' '≠TotNumDesc)⌿TotNumVars[63]  [64]      CharFrom←(Z←~^/' '=CharVars)⌿CharFrom ⋄ CharTo←Z⌿CharTo ⋄ CharDesc←Z⌿CharDesc[65]      :for i :in ⍳1↑⍴CharVars←Z⌿CharVars[66]           ⍎'f',CharVars[i;],'←COLS CharFrom[i;] OVER CharTo[i;]'[67]      :endfor[68]      CharDesc←LJUSTIFY CharDesc,row⍀(row←~∨/' '≠CharDesc)⌿CharVars[69]  [70]      DateFrom←(Z←~^/' '=DateVars)⌿DateFrom ⋄ DateTo←Z⌿DateTo[71]      DateFmt←Z⌿DateFmt ⋄ DateDesc←Z⌿DateDesc[72]      :for i :in ⍳1↑⍴DateVars←Z⌿DateVars[73]           ⍎'f',DateVars[i;],'←COLS DateFrom[i;] OVER DateTo[i;]'[74]           ⍎'df',DateVars[i;],'←DLTB DateFmt[i;]'[75]      :endfor[76]      DateDesc←LJUSTIFY DateDesc,row⍀(row←~∨/' '≠DateDesc)⌿DateVars[77]  :endif[78]  [79]  :if prevind=2 ⍝ "Previous" Data Format[80]      fn←Z,'←','p',Z←SStoMAT VarNumStandVars ⍝ "Assign" all pf... Vars to f...[81]      fn←fn OVER Z,'←','p',Z←'f',TotNumVars[82]      ⍎⎕def 'CREATECOLS' OVER fn[83]  :endif[84]  [85]  AbsDict←AbsDict UpdateAbsDict 'Data'    ∇