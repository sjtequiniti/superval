    ∇ Z← rec ParseExcel str;datafields;escalations;vec;escpos;datpos;∆;tokens;parseflag;Z;res[1]   ⍝ DATAWIN.sf#23[2]   ⍝ Assumptions:[3]   ⍝   str contains only: [datafields], {escalations}, (parens) and operators +-/*[4]   ⍝   Data fields enclosed by [ ][5]   ⍝   Escalation Rates are enclosed by { }[6]   ⍝   No double square-bracketing e.g. [ [qDATAfield] ][7]   ⍝   No adjacent square-bracketing e.g. [qDATAfield][qDATAfield][8]   Z←ExecuteRates ⊂↑(⍙FinAssdict at 'List' 'Value'  ) mapp ⊂ DLTB  ⎕av[209] StripText '<' StripText str ⍝ UPDATE - Parsing no longer desired.[9]   [10]  ⍝:if +/((GetFinList FinParms) at 'List')∊⊂ DLTB '<' StripText str[11]  ⍝:orif mt str[12]  ⍝    res←ExecuteRates ⊂↑((GetFinList FinParms) at 'List' 'Value'  ) mapp ⊂ DLTB '<' StripText str[13]  ⍝    ⍝ parseflag←0[14]  ⍝:else[15]  ⍝    ⍝ Preamble work[16]  ⍝    datafields ← 1↓'[' fret ((≠\ str∊'[]')/str)                 ⍝ Finds datafields enclosed in [ ][17]  ⍝    escalations← 1↓'{' fret ((≠\ str∊'{}')/str)                 ⍝ Finds escalations enclosed in { }[18]  ⍝    escalations←(⊂'-', ⎕av[209])  REPL¨ escalations[19]  ⍝    datafields ←  ↑ rec at 1↓¨datafields                        ⍝ Turns datafield name into value[20]  ⍝    escalations← ↑¨(⊂(GetFinList FinParms) at 'List' 'Value'  ) mapp¨⊂¨   DLTB¨'<' StripText¨ escalations ⍝ Turns escalation pointer into value[21]  ⍝[22]  ⍝    vec← (⊃1++\≠/(0 ¯1) ⌽¨⊂⊃∨/(0 ¯1) ⌽¨⊂(≠\ str∊'[]{}'))⊂str    ⍝ Turns string into vector split by { } and [ ] components[23]  ⍝    (escpos datpos)←(⊂(⊂'{[')∊¨ vec )∊¨ ⊂¨(1 0) (0 1)[24]  ⍝    (escpos/vec)←escalations                                    ⍝ Replaces {} [] pointers with values[25]  ⍝    (datpos/vec)←datafields[26]  ⍝    vec[WHERE escpos] ←  (⊂'()') embrace¨ (WHERE escpos)⊃¨⊂ vec ⍝ Encloses values in ()[27]  ⍝    vec[WHERE datpos] ←  (⊂'()') embrace¨ (WHERE datpos)⊃¨⊂ vec[28]  ⍝    str←⊃,/vec[29]  ⍝[30]  ⍝    ⍝ Parse an expression: str[31]  ⍝    tokens←'"divide"' '"times"' '"powerof"' '"plus"' '"minus"'[32]  ⍝    vec←⌽(⊃1++\≠/(0 ¯1) ⌽¨⊂⊃∨/(0 ¯1) ⌽¨⊂(≠\ str∊'"'))⊂str       ⍝ Replace tokens with APL operators[33]  ⍝    vec[WHERE ∆] ←  tokens ('÷×*+-') map (∆←vec∊tokens)/vec[34]  ⍝    res←ExecuteRates ⊂⍕⊃,/vec[35]  ⍝[36]  ⍝    ⍝ parseflag←1[37]  ⍝[38]  ⍝:endif[39]  [40]  ⍝ Z←res[41]  ⍝ Z←parseflag res    ∇