    ∇ res←field Roll_Forward parm;parent;FileSelections;∆;SSName;row;col;text;no;page;caption;locked;RF_FILE;RF_membtype;MaxRow;type;list;df;z;valid;RF_DataBuilt
[1]   ⍝ DATAWIN.sf#23
[2]   ⍝ Function to allow user control on Roll Forward form
[3]   
[4]   parent←'fmRoll_Forward.sRoll_Forward.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   :case 'Prepare'
[8]       catlist←identifiers←0 0⍴' '
[9]   
[10]  :case 'Pre-Audit'
[11]      parent ⎕wi '∆financial' 1
[12]      parent ⎕wi '∆singlefile' (parent,"pgData.fData.edfILENAME") ⍝ Fix File indicator (2 Files!!)
[13]      parent ⎕wi '∆format' (parent,"pgData.fData.cbFormat")       ⍝ Fix Format indicator (2 Formats!!)
[14]  
[15]  :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[16]      NewNAMES←ExitTypes←numfields←catlist←identifiers←0 0⍴' ' ⋄ datatype←BasisType←''
[17]      :if 82=⎕dr rf_Variations
[18]          rf_Variations←zwb rf_Variations ⋄ CatSels_1←'Default'
[19]          GMPField_1   ←GMPField_2   ←GMPField_3   ←GMPField_4   ←GMPField_5   ←GMPField_6   ←GMPField_7   ←GMPField_8   ←GMPField_9   ←'Pre 1988 GMP' OVER 'Post 1988 GMP'
[20]          GMPRevaln_1  ←GMPRevaln_2  ←GMPRevaln_3  ←GMPRevaln_4  ←GMPRevaln_5  ←GMPRevaln_6  ←GMPRevaln_7  ←GMPRevaln_8  ←GMPRevaln_9  ←2↑[1]GMPRevaln_1
[21]          GMPIncrease_1←GMPIncrease_2←GMPIncrease_3←GMPIncrease_4←GMPIncrease_5←GMPIncrease_6←GMPIncrease_7←GMPIncrease_8←GMPIncrease_9←2↑[1]GMPIncrease_1
[22]      :endif
[23]  
[24]      :if 0=⎕nc 'pgAdjustment2' ⍝ Initial Load only
[25]          :for no :in ⍕¨⍳9
[26]              SSName←parent,'pgAdjustment',no,'.fGMP.ssGMP'
[27]              SSName ⎕wi 'onXStartEdit' ('0 0⍴"',SSName,'" Roll_Forward "Edit"')
[28]              SSName ⎕wi 'xShowRowHeading' 0 ⍝ Hide Row Headings
[29]  
[30]              SSName←parent,'pgAdjustment',no,'.fOther.ssAdjust'
[31]              SSName ⎕wi 'onXStartEdit' ('0 0⍴"',SSName,'" Roll_Forward "Edit"')
[32]              SSName ⎕wi 'xShowRowHeading' 0 ⍝ Hide Row Headings
[33]          :endfor
[34]          (1↓rf_Variations↑⍳9) RF_AdjustPages 'Define'
[35]      :else
[36]          RF_AdjustPages 'Close'
[37]          (1↓rf_Variations↑⍳9) RF_AdjustPages 'Open'
[38]          :if 0=parent ⎕wi 'value'
[39]              parent ⎕wi 'value' 1
[40]          :endif
[41]      :endif
[42]  
[43]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[44]  
[45]      (parent,'pgData.fData.edOutFile') ⎕wi 'onChange' '' ⍝ Nobble onChange
[46]      (parent,'pgData.fDates.cbRFDate') ⎕wi 'onChange' ('⋄' Win∆Parent (parent,'pgData.fDates.cbRFDate') ⎕wi 'onChange')
[47]      (parent,'pgData.fData.cbFormat') ⎕wi '∆mandatory' 1
[48]  
[49]      0 0⍴Roll_Forward 'Lock'
[50]      0 0⍴GetDecrList 'List'
[51]      ((parent,"pgAdjustment1.") "lsCatSels_1") Win∆SetRelated  "enabled" 0
[52]      (parent,"pgAdjustment1") ⎕wi 'caption' 'Default'
[53]  
[54]      SSName←parent,'pgChanges.fExits.ssExits'
[55]      SSName ⎕wi 'onXStartEdit' ('0 0⍴"',SSName,'" Roll_Forward "EditMoE"')
[56]      SSName ⎕wi 'xHdrHeight' (3×255) ⍝ 255 is one standard line height
[57]  
[58]  :case 'Edit'
[59]  
[60]      (row col)←field ⎕wi 'GetActiveCell' 0 0
[61]      :if ~col∊1 6 7 8
[62]          0 Win∆F1SSRowMenu ('Roll_Forward' field)
[63]          ⎕warg[1]←field Win∆F1SSGetTextArray row col 1 1
[64]          ⎕wself←field
[65]          field ⎕wi 'AllowArrows' 1 ⋄ row Win∆ValidF1SSCell col ⋄ 0 0⍴⎕ex 'F1SSEvent'
[66]      :else
[67]          field ⎕wi 'AllowArrows' 1
[68]      :endif
[69]  
[70]  :case 'EditMoE'
[71]  
[72]      (row col)←field ⎕wi 'GetActiveCell' 0 0
[73]      :if col=4
[74]          2 Win∆F1SSRowMenu ('Roll_Forward' field)
[75]          ⎕warg[1]←field Win∆F1SSGetTextArray row col 1 1
[76]          ⎕wself←field
[77]          field ⎕wi 'AllowArrows' 1 ⋄ row Win∆ValidF1SSCell col ⋄ 0 0⍴⎕ex 'F1SSEvent'
[78]      :else
[79]          field ⎕wi 'AllowArrows' 1
[80]      :endif
[81]  
[82]  :case 'Lock'
[83]  
[84]      :for no :in rf_Variations↑⍕¨⍳9
[85]          SSName←parent,'pgAdjustment',no,'.fGMP.ssGMP'
[86]          :if ~mt SSName ⎕wi 'self'
[87]              ∆←⊂¯1 1 ¯1 1
[88]              ∆←∆,(zwb ⍎'GMPFixed_',⍕no)/⊂¯1 2 ¯1 2
[89]              ∆←∆,(zwb ⍎'GMPLRinc_',⍕no)/⊂¯1 3 ¯1 3
[90]              SSName Win∆F1SSProtectCells ∆
[91]          :endif
[92]          SSName←parent,'pgAdjustment',no,'.fOther.ssAdjust'
[93]          :if ~mt SSName ⎕wi 'self'
[94]              ∆←⊂¯1 1 ¯1 1
[95]              ∆←∆,⎕split (((0 ¯1+[2]+\CONCISE WHERE ~(⊂'Inf')≡¨3↑¨m2n ⍎'IncType_',no),3),4)[;1 3 2 4]
[96]              locked←(3↑¨m2n ⍎'IncType_',no)∊'   ' 'Non' 'Int' 'Rev' ⍝⍝⍝ ,(zwb ⍎'GMPFixed_',no)/⊂'If '
[97]              locked←locked∨(⊂,'0')≡¨m2n ⍎'IncIncreases_',no
[98]              ∆←∆,⎕split (((0 ¯1+[2]+\CONCISE WHERE  locked),5),6)[;1 3 2 4]
[99]              ∆←∆,⎕split (((0 ¯1+[2]+\CONCISE WHERE ~'R'=¨↑¨m2n ⍎'IncFreq_',no),6),6)[;1 3 2 4]
[100]             ∆←∆,⎕split (((0 ¯1+[2]+\CONCISE WHERE ~(3↑¨m2n ⍎'IncType_',no)∊'Age' 'Exc',(~zwb ⍎'GMPFixed_',no)/⊂'If '),7),10)[;1 3 2 4]
[101]             ∆←∆,⎕split (((0 ¯1+[2]+\CONCISE WHERE ↑^/0=MatrixZWB¨⍎¨'F_IncAge_' 'M_IncAge_',¨no),9),9)[;1 3 2 4]
[102]             ∆←∆,⎕split (((0 ¯1+[2]+\CONCISE WHERE ~(3↑¨m2n ⍎'IncType_',no)∊'Int' 'Inf' 'Rev' 'Inc'),11),11)[;1 3 2 4]
[103]             SSName Win∆F1SSProtectCells ∆
[104]         :endif
[105]     :endfor
[106] 
[107] :case 'Unlock'
[108] 
[109]     :for no :in rf_Variations↑⍕¨⍳9
[110]         :for SSName :in (⊂parent,'pgAdjustment',no,'.'),¨'fGMP.ssGMP' 'fOther.ssAdjust'
[111]             :if ~mt SSName ⎕wi 'self'
[112]                 SSName Win∆F1SSProtectCells 'Unlock'
[113]             :endif
[114]         :endfor
[115]     :endfor
[116] 
[117] :case 'SSClick'
[118] 
[119]     RF_SSClick field
[120] 
[121] :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[122] 
[123]     :repeat
[124]         :select ↑field
[125]         :case 'edfILENAME'
[126]             :if ~'#'∊Win∆Parent fILENAME←(parent,'pgData.fData.edfILENAME') ⎕wi 'text'
[127]             :andif ~mt text←'/-' REPL RFDate
[128]             :andif mt (parent,'pgData.fData.edOutFile') ⎕wi 'text'
[129]                 (parent,'pgData.fData.edOutFile') ⎕wi 'text' (OutFile←(Win∆Parent fILENAME),' ',text,'.csv')
[130]             :endif
[131]             FileSelections←1
[132]             catlist←'Default' OVER 1 0↓0 UniqueDataSel '/Cat'
[133]         :case 'cbFormat'
[134]             :if ~mt Format←HyphenSwap (parent,'pgData.fData.cbFormat') ⎕wi 'text'
[135]                 0 CREATEDATADESC Format
[136] 
[137]                 :if ∨/'ADP'∊datatype←↑((⊂Format[1+⍳3])≡¨'Act' 'Def' 'Pen')/'Actives' 'Deferreds' 'Pensioners'
[138]                     (parent,'pgChanges.fData.cbNewFormat') ⎕wi '∆update' ('Formats "',(↑datatype),'"')
[139]                     (parent,'pgChanges.fData.cbNewFormat') ⎕wi '∆valid'  ('"',(↑datatype),'"')
[140]                     (parent,'pgChanges.fData.cbNewFormat') ⎕wi 'list'    (1 0↓Formats ↑datatype)
[141]                     BasisType←datatype,'_Basis' ⍝ Required by Glean_Basis
[142]                     ExitTypes←⊃(('P'=↑datatype)↓(2+2×'A'=↑datatype)↑'Retirement' 'Death' 'Ill-Health' 'Withdrawal'),('P'=↑datatype)↓⊂'Transfer'
[143]                 :endif
[144] 
[145]                 0 0⍴(SystemDir,'SVFORM',Win∆CountryCode) ReadFile ((3↑datatype),'Format') '' '⍙⍙FieldTypes'
[146]                 0 0⍴Format Format_Create 0
[147] 
[148]                 ∆←∊×⍴¨⍎¨m2n SStoMAT VarNumStandVars
[149]                 numfields←⊃(m2n (∆⌿SStoMAT VarNumStandNames) OVER TotNumDesc)~'Pre 1988 GMP' 'Post 1988 GMP'
[150] 
[151]                 vardict←push (m2n (SStoMAT CharStandNames,DateStandNames) OVER CharDesc OVER DateDesc) (m2n (SStoMAT CharStandVars,DateStandVars) OVER 'f',CharVars OVER DateVars)
[152]                 ∆←∊×⍴¨⍎¨1↓vardict
[153]                 ∆←∆^~(1↓vardict)∊'fMOE' 'fDOE' 'fMOT' 'fDOT'
[154]                 identifiers←⊃∆/↑vardict
[155] 
[156]                 :if mt df←⍎'d',↑((1↓vardict)∊'fDOE' 'fDOT')/1↓vardict
[157]                     df←'DD/MM/YYYY'
[158]                 :endif
[159]                 (parent,'pgChanges.fExits.ssExits') ⎕wi "ColText" 3 ('Date of Exit',⎕tcnl,⎕tclf,df)
[160] 
[161]                 0 0⍴(⊂'edfILENAME') Roll_Forward 'Change'
[162]                 0 UpdateVarLists ⊂'GetIdent'
[163]                 RF_AdjustVars
[164]                 0 0⍴Roll_Forward 'Lock'
[165]             :endif
[166]         :case 'edOutFile'
[167]             :if ~mt OutFile←(parent,'pgData.fData.edOutFile') ⎕wi 'text'
[168]             :andif ~'.CSV'≡UPPERCASE ¯4↑OutFile
[169]                 (parent,'pgData.fData.edOutFile') ⎕wi 'text' (OutFile←OutFile,'.csv')
[170]             :endif
[171]         :case 'cbRFDate'
[172]             :if ~mt text←'/-' REPL RFDate←(parent,'pgData.fDates.cbRFDate') ⎕wi 'text'
[173]             :andif ~'#'∊Win∆Parent fILENAME
[174]             :andif mt (parent,'pgData.fData.edOutFile') ⎕wi 'text'
[175]                 (parent,'pgData.fData.edOutFile') ⎕wi 'text' (OutFile←(Win∆Parent fILENAME),' ',text,'.csv')
[176]             :endif
[177]         :case 'cbFinParms'
[178]             ⍙FinAssdict←GetFinList (parent,'pgData.fFinancials.cbFinParms') ⎕wi 'text'
[179]         :case 'edNewFile'
[180]             (parent,'pgChanges.fData.cbNewFormat') ⎕wi 'enabled' (~mt (parent,'pgChanges.fData.edNewFile') ⎕wi 'text')
[181]         :case 'cbNewFormat'
[182]             :if ~mt NewFormat←(parent,'pgChanges.fData.cbNewFormat') ⎕wi 'text'
[183]             :andif ~mt (parent,'pgChanges.fData.edNewFile') ⎕wi 'text'
[184]             :andif ~mt datatype
[185]                 0 0⍴NewFormat Format_Create 0
[186]                 NewNAMES←NAMES
[187]                 :if ~mt Format
[188]                     0 0⍴Format Format_Create 0
[189]                 :endif
[190]             :endif
[191]         :case 'cbIdent1'
[192]             SSName←parent,'pgChanges.fExits.ssExits'
[193]             :if mt text←DLTB (parent,'pgChanges.fExits.cbIdent1') ⎕wi 'text'
[194]                 ((parent,'pgChanges.fExits.') 'cbIdent2') Win∆SetRelated 'visible' 0
[195]                 text←'Identifier 1' ⋄ df←''
[196]             :else
[197]                 Ident2←DLTB (parent,'pgChanges.fExits.cbIdent2') ⎕wi 'text'
[198]                 (parent,'pgChanges.fExits.cbIdent2') ⎕wi 'list' (list←' ' OVER ⊃(m2n (parent,'pgChanges.fExits.cbIdent1') ⎕wi 'list')~⊂text)
[199]                 (parent,'pgChanges.fExits.cbIdent2') ⎕wi 'value' (↑(list TLU Ident2),1)
[200]                 ((parent,'pgChanges.fExits.') 'cbIdent2') Win∆SetRelated 'visible' 1
[201]                 type←SSName ⎕wi '∆type'
[202]                 'type[1]' SSASSIGN '⍺',z←(1+(⊂text)∊m2n (SStoMAT  DateStandNames) OVER DateDesc)⊃'Char' 'Date'
[203]                 SSName ⎕wi '∆type' type
[204]                 :if     z≡'Char'                   ⋄ df←''
[205]                 :elseif mt df←⍎'d',vardict at text ⋄ df←'DD/MM/YYYY'
[206]                 :endif
[207]                 valid←SSName ⎕wi '∆valid'
[208]                 'valid[1]' SSASSIGN '⍺'"'",df,"'"
[209]                 SSName ⎕wi '∆valid' valid
[210]             :endif
[211]             SSName ⎕wi "ColText" 1 (text,(~mt df)/⎕tcnl,⎕tclf,df)
[212]         :case 'cbIdent2'
[213]             SSName←parent,'pgChanges.fExits.ssExits'
[214]             :if mt text←DLTB (parent,'pgChanges.fExits.cbIdent2') ⎕wi 'text'
[215]                 SSName ⎕wi 'xColHidden' 2 1
[216]                 MaxRow←SSName ⎕wi 'xMaxRow'
[217]                 SSName ⎕wi "TextRC[]" (⎕mix ,(⍳MaxRow)∘.,2) (MaxRow/⊂'')
[218]             :else
[219]                 type←SSName ⎕wi '∆type'
[220]                 'type[2]' SSASSIGN '⍺',z←(1+(⊂text)∊m2n (SStoMAT  DateStandNames) OVER DateDesc)⊃'Char' 'Date'
[221]                 SSName ⎕wi '∆type' type
[222]                 :if     z≡'Char'                   ⋄ df←''
[223]                 :elseif mt df←⍎'d',vardict at text ⋄ df←'DD/MM/YYYY'
[224]                 :endif
[225]                 SSName ⎕wi "ColText" 2 (text,(~mt df)/⎕tcnl,⎕tclf,df)
[226]                 valid←SSName ⎕wi '∆valid'
[227]                 'valid[2]' SSASSIGN '⍺'"'",df,"'"
[228]                 SSName ⎕wi '∆valid' valid
[229]                 SSName ⎕wi 'xColHidden' 2 0
[230]             :endif
[231]         :case 'ckExitLiab'
[232]             SSName←parent,'pgChanges.fExits.ssExits'
[233]             SSName ⎕wi 'xColHidden' 4 (~(parent,'pgChanges.fExits.ckExitLiab') ⎕wi 'value')
[234]         :caselist 'lsCatSels_1' 'lsCatSels_2' 'lsCatSels_3' 'lsCatSels_4' 'lsCatSels_5' 'lsCatSels_6' 'lsCatSels_7' 'lsCatSels_8' 'lsCatSels_9'
[235]             no←¯1↑↑field ⋄ page←parent,'pgAdjustment',no,'.'
[236]             (MATRIX page,↑field) Win∆Assign  MATRIX 'List'
[237]             :if ~'1'=no
[238]                 caption←'Cat: ','/' join m2n SStoMAT ⍎2↓↑field
[239]                 page ⎕wi 'caption' caption
[240]             :endif
[241] 
[242]             maxpages←rf_Variations⌈9×~mt (m2n catlist)~m2n SStoMAT CatSels_1,CatSels_2,CatSels_3,CatSels_4,CatSels_5,CatSels_6,CatSels_7,CatSels_8,CatSels_9
[243]             (⍴parent ⎕wi 'pages') RF_EnableButtons parent ⎕wi 'value'
[244]         :caselist 'ckGMPFixed_1' 'ckGMPFixed_2' 'ckGMPFixed_3' 'ckGMPFixed_4' 'ckGMPFixed_5' 'ckGMPFixed_6' 'ckGMPFixed_7' 'ckGMPFixed_8' 'ckGMPFixed_9' 'ckGMPLRinc_1' 'ckGMPLRinc_2' 'ckGMPLRinc_3' 'ckGMPLRinc_4' 'ckGMPLRinc_5' 'ckGMPLRinc_6' 'ckGMPLRinc_7' 'ckGMPLRinc_8' 'ckGMPLRinc_9'
[245]             no←¯1↑↑field ⋄ page←parent,'pgAdjustment',no,'.fGMP.'
[246]             (MATRIX page,↑field) Win∆Assign  MATRIX 'Check'
[247]             0 0⍴Roll_Forward 'Lock'
[248]         :case 'ckpagetrick'
[249]             (1↓rf_Variations↑⍳9) RF_AdjustPages 'Reset'
[250]         :case 'ckinputstrick'
[251]             Win∆AssignVars ControlName
[252]             RF_AdjustVars
[253]         :endselect
[254]     :until mt field←1↓field
[255] 
[256] :case 'PageChange'
[257] 
[258]     :repeat
[259]         RF_PageChange DLTMB ↑field
[260]     :until mt field←1↓field
[261] 
[262] :case 'Valid' ⍝ Routine specific validation
[263] 
[264]     :repeat
[265]         :select page←DLTMB ↑field
[266]         :case 'All'
[267]             :for page :in 'pgData' 'pgDataonSave' 'pgChanges',rf_Variations↑'pgAdjustment1onSave' 'pgAdjustment2onSave' 'pgAdjustment3onSave' 'pgAdjustment4onSave' 'pgAdjustment5onSave' 'pgAdjustment6onSave' 'pgAdjustment7onSave' 'pgAdjustment8onSave' 'pgAdjustment9onSave'
[268]                 :if ~mt res←(⊂page) Roll_Forward 'Valid' ⋄ :leave ⋄ :endif
[269]             :endfor
[270]         :else
[271]             res←RF_Valid page
[272]         :endselect
[273]     :until mt field←1↓field
[274] 
[275] :case 'Run'
[276] 
[277]     Roll_Data_Forward Format
[278] 
[279]     RF_FILE←OutFile
[280]     RF_membtype←datatype
[281]     'DATAWIN' CallModule 'Data_Build'
[282] 
[283]     :if RF_DataBuilt ⋄ :andif 'Y'≡'YN' ASK 'Update Scheme Details with Roll Forward Dates and Data File?'
[284]         Update_scheme_details
[285] 
[286]         UpdateListviewDict 0
[287]         0 0⍴(SystemDir,'OVERWIN') ReadFile 'Client'
[288]         'CreateVars' RunModule 'Client'                ⍝ Create Client Vars
[289]         0 0⍴(SystemDir,'OVERWIN') DeleteModule 'Client'
[290]     :endif
[291] 
[292]     res←'Quit'
[293] 
[294] :case 'Quit' ⍝ Deleting "other" variables
[295]     0 0⍴DeleteVars¨'ActFormat' 'PenFormat' 'DefFormat'
[296]     0 0⍴⎕ex 'datatype numfields identifiers catlist BasisType maxpages vardict fmt NAMES fieldtypes colnos datafields ExitTypes NewNAMES'
[297]     0 0⍴⎕ex 'pgAdjustment2 pgAdjustment3 pgAdjustment4 pgAdjustment5 pgAdjustment6 pgAdjustment7 pgAdjustment8 pgAdjustment9'
[298]     ⍙FinAssdict←GetFinList ''
[299] 
[300] :endselect
    ∇
