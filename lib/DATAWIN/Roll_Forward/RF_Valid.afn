    ∇ res←RF_Valid page;date1;date2;SSName;i;n;text;data;mapping;flg;∆Ident2;∆Ident1;∆Identifier2;∆Identifier1;∆;variations;variation;finvars;⍙;txt;pagevalue[1]   ⍝ DATAWIN.sf#23[2]   ⍝ Do Validation on the Roll-Forward form[3]   ⍝ Vern  dnp17nov17[4]   ⍝ Revn: dnp17nov17 * making the MoE column optional[5]   ⍝ Revn: dnp20feb18 * check that the financial pointers can be found in the financial globals set[6]   [7]   res←0⍴''[8]   (∆Identifier1 ∆Identifier2 ∆Ident1 ∆Ident2)←(Identifier1 Identifier2 Ident1 Ident2)[9]   ∆Identifier2← (~mt ∆Ident2)/∆Identifier2[10]  [11]  :select page[12]  :case 'pgData'[13]      date1←'DD/MM/YYYY' DATEEXP ↑⌽'Date' SwapRelFields lrEDate   EDate[14]      date2←'DD/MM/YYYY' DATEEXP ↑⌽'Date' SwapRelFields lrRFDate RFDate[15]      :if 0≥date1 YDAYS date2[16]          res←'Roll-Forward Date must be after the Valuation Date'[17]          Win∆SetFocus parent,page,'.fDates.cbRFDate' ⋄ :return[18]      :endif[19]  [20]  :case 'pgDataonSave'[21]  [22]      variations       ←⍕¨⍳rf_Variations[23]      :for variation :in variations[24]          finvars←'IncIncreases' 'IncRevaln' 'IncFormula' 'GMPRevaln' 'GMPIncrease'[25]          ∆←lmt⊃,/m2n¨⍎¨finvars,¨⊂'_', variation[26]          ∆←∆~⊂'None'[27]          :if ∨/ ⍙←~(DLTB¨⎕av[209] StripText¨∆)∊DLTB¨⎕av[209] StripText¨⍙FinAssdict at 'List'[28]              res←⊃,/'The following not found in Financial Parameter Set:', ⎕TCNL ,¨⍕¨(⍙/∆)[29]              pagevalue←( parent ⎕wi 'pages') ⍳ ⊂'pgAdjustment',variation[30]              :if (parent ⎕wi 'value')≠pagevalue[31]                  parent ⎕wi 'value' pagevalue[32]              :endif[33]              :return[34]          :endif[35]      :endfor[36]  [37]  :case 'pgChanges'[38]  [39]      :if ~mt NewFile[40]      :andif ~mt res←MESS∆TRANS NewFormat Format∆CHECK (MATRIX InputDir,NewFile) ''[41]          Win∆SetFocus parent,page,'.fData.cbNewFormat' ⋄ :return[42]      :endif[43]  [44]      :if ~mt NewFile[45]      :andif ~mt ∆←(m2n NAMES)~m2n NewNAMES[46]          :for txt :in  '(MOE)' '(DOE)' '(MOT)' '(DOT)' ⍝ Remove exit rows[47]              :if mt ∆←(~∨/¨(⊂txt)⍷¨∆)/∆ ⋄ :leave ⋄ :endif[48]          :endfor[49]          :if ~mt ∆[50]              res←⊃,/ 'New Entrant Data File does not contain the following Data Fields contained in Main Data File:',⎕TCNL,¨∆[51]              Win∆SetFocus parent,page,'.fData.edNewFile' ⋄ :return[52]          :endif[53]      :endif[54]  [55]      :if fILENAME≡NewFile[56]          res←⊃,/'New Entrant Data File and  Main Data File are the same!'[57]          Win∆SetFocus parent,page,'.fData.edNewFile' ⋄ :return[58]      :endif[59]  [60]      ⍝ Check all MoE are contained in ExitTypes,⊂''[61]      :if ~^/(m2n MoE)∊m2n ExitTypes⍪' '[62]          res←'Invalid Exit Type specified'[63]          pagevalue←( parent ⎕wi 'pages') ⍳ ⊂page[64]          :if (parent ⎕wi 'value')≠pagevalue[65]              parent ⎕wi 'value' pagevalue[66]          :endif[67]          :return[68]      :endif[69]  [70]      :if ∨/ ∆←⊃~∊/ (-~⍎ExitLiab)↓¨¨ (~mt¨¨ spin m2n ¨∆Identifier1  ∆Identifier2 DoE MoE)  (⎕split ⍉(⌽4⍴2)⊤ 15 14 11 10 7 6 0) ⍝ Checks that rows are populated sufficiently[71]          res← ⊃,/ 'Please populate rows: ', ⎕TCNL ,¨⍕(WHERE ∆)[72]          pagevalue←( parent ⎕wi 'pages') ⍳ ⊂page[73]          :if (parent ⎕wi 'value')≠pagevalue[74]              parent ⎕wi 'value' pagevalue[75]          :endif[76]          :return[77]      :endif[78]  [79]  :caselist 'pgAdjustment1onSave' 'pgAdjustment2onSave' 'pgAdjustment3onSave' 'pgAdjustment4onSave' 'pgAdjustment5onSave' 'pgAdjustment6onSave' 'pgAdjustment7onSave' 'pgAdjustment8onSave' 'pgAdjustment9onSave'[80]      page←¯6↓page[81]      SSName←parent,page,'.fGMP.ssGMP'[82]      :for i :in 1 2[83]          :for n :in 2 3[84]              SSName ⎕wi 'xSetActiveCell' i n[85]              :if ~1↑SSName ⎕wi 'XGetProtection' ⍬ ⍬[86]                  :if mt ,⊃,SSName Win∆F1SSGetTextArray i n 1 1[87]                      res←'All Relevant cells must be filled'[88]                      Win∆SetFocus SSName[89]                      :return[90]                  :endif[91]              :endif[92]          :endfor[93]      :endfor[94]  [95]      SSName←parent,page,'.fOther.ssAdjust'[96]      :for i :in ⍳SSName ⎕wi 'xMaxRow'[97]          :for n :in 2 5 6 7 8 9 10[98]              SSName ⎕wi 'xSetActiveCell' i n[99]              :if ~1↑SSName ⎕wi 'XGetProtection' ⍬ ⍬[100]                 :if mt ,⊃,SSName Win∆F1SSGetTextArray i n 1 1[101]                     res←'All Relevant cells must be filled'[102]                     Win∆SetFocus SSName[103]                     :return[104]                 :endif[105]             :endif[106]         :endfor[107]     :endfor[108] [109] :endselect    ∇