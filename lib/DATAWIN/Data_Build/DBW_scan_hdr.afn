    ∇ res←DBW_scan_hdr;csv_tn;lines;err;bad;mssg;∆;curr;File;dates;typ;excluded;z;data;⍙;delim;max;fmt;msk;vars;avg;tot;MESS;xxx[1]   ⍝ DATAWIN.sf#21[2]   ⍝ Extracts summary data about fields[3]   ⍝ Returns [1] error messages [2] field names:[4]   ⍝  2 lists of standard fields for this member type [a] specified [b] unspecified[5]   ⍝ Reads ext vars: CHUNK_SZ DLMT InputDir RQDNAMS[6]   [7]   err←res←''[8]   [9]   :if CSVimp[10]      :if 0=File NTIE csv_tn←'Native' TieNumber File←InputDir,FILE←DLTB FILE[11]          res←'Unable to tie ',FILE,'.  It may be in use by another program.' ⋄ :return[12]      :endif[13]      lines←¯1↓(⎕tcnl,⎕tclf) part ⎕NREAD csv_tn,82,(200000⌊CHUNK_SZ⌊⎕nsize csv_tn),0[14]      ⎕NUNTIE csv_tn[15]  [16]      :if ∨/^/¨' '=¨2↑lines[17]          res←'InvStructure' ('Invalid Header Records.  ',File) ⋄ :return[18]      :endif[19]  [20]      nams←DLTB¨DLMT partq UPPERCASE (1⊃lines)~⎕tcht,' -(){}[]%' ⍝ Field Names[21]      fmts←DLTB¨DLMT partq           (2⊃lines)~' ' ⍝ Field Formats (and averages)[22]  [23]      :if nofmtrow←∨/∊↑¨⎕vi¨fmts~¨',' ⍝ did not find header line[24]          ∆←∨⌿(⊂,1)≡¨⎕vi¨data←⊃(DLTB¨¨DLMT partq¨1↓lines)~¨¨','   ⍝ Numeric fields[25]          fmts←∆ sel¨⊂,'N'[26]          :for delim :in '/-'                                     ⍝ Date Fields[27]              :if ∨/⍙←(~∆)^∨⌿2=+/¨delim=¨data[28]                  max←⌈/⌈/3↑¨⍉MatrixZWB¨SStoMAT¨'/',¨⍙/data[29]                  msk←max>¨12 31[30]                  fmt←'' '' ''[31]                  ((↑^/msk)/fmt)←⊂'YYYY'[32]                  :if ~∨/z←↑1=+/msk ⋄ z←⌽↑^/msk ⋄ :endif[33]                  (z/fmt)←⊂'DD'[34]                  ((~z∨↑^/msk)/fmt)←⊂'MM'[35]                  fmt←delim join fmt[36]                  (⍙/fmts)←⊂fmt[37]                  ∆←∆∨⍙[38]              :endif[39]          :endfor[40]          ∆←~∆                                                 ⍝ Character Fields[41]          (∆/fmts)←⊂,'C'[42]      :endif[43]  :else[44]      XLrows←2⌈((('XL' ⎕wi 'xActiveSheet') ⎕wi 'xUsedRange') ⎕wi 'xRows'   ) ⎕wi 'xCount'[45]      XLcols←  ((('XL' ⎕wi 'xActiveSheet') ⎕wi 'xUsedRange') ⎕wi 'xColumns') ⎕wi 'xCount'[46]      (data fmts nofmtrow)←(0⍴⊂'') DBW_excel_data 1 1 (XLrows⌊⌊(200000⌊CHUNK_SZ)÷100×XLcols) XLcols[47]  [48]      :if ∨/^/^/¨' '=¨2↑[1]data[49]          res←'InvStructure' ('Invalid Header Records.  ',xlFILE,' ','{}' embrace xlSHEET) ⋄ :return[50]      :endif[51]  [52]      nams←UPPERCASE¨data[1;]~¨⊂⎕tcht,' -(){}[]%'[53]  :endif[54]  [55]  :if ~zwb grouped ⋄ :orif ~∨/'N'=↑¨fmts ⋄ fmts←   UPPERCASE¨fmts ⋄ :endif ⍝ if not grouped data or no N's, Standardise to N for all[56]  average←           ('A'=↑membtype)^'n'=↑¨fmts[57]  byNOM  ←                           'A'=↑¨fmts←   UPPERCASE¨fmts          ⍝ Numerics to be multiplied by NOM[58]                                           fmts←(⊂'AN') REPL¨fmts          ⍝ Standardise to N[59]  [60]  :if ~(⊂LASTCOLPN)∊nams          ⍝ name & fmt for last col[61]      :if mt DLTB ↑¯1↑nams ⋄ nams←(¯1↓nams),⊂LASTCOLPN ⋄ fmts←(¯1↓fmts),⊂,'C' ⋄ average←(¯1↓average),0 ⋄ byNOM←(¯1↓byNOM),0[62]      :else                ⋄ (nams fmts)←(nams fmts),¨⊂¨,¨LASTCOLPN 'C' ⋄ average←average,0 ⋄ byNOM←byNOM,0[63]      :endif[64]  :endif[65]  [66]  :if ∨/bad←0=included←×∊⍴¨nams ⍝ Pick up any Unnamed columns[67]      ∆←WHERE bad ⋄ (bad/nams)←(⊂'Column '),¨m2n ⍉(' ',⎕av[65+⍳10])[⌈∆÷26] OVER (⎕av[65+⍳26])[1+26∣¯1+∆][68]  :endif[69]  :if ∨/bad←0=         ×∊⍴¨fmts ⍝ Pick up any unspecified formats[70]      (bad/fmts)←⊂,'U' ⍝ (Unknown)[71]  :endif[72]  prev←included\'#'=↑¨included/nams              ⍝ flag 'Previous' numeric columns[73]  curr←included\(included/nams)∊(prev/nams)~¨'#' ⍝ flag 'Current'  numeric columns[74]  [75]  ⍝ field names[76]  err←err,(∨/bad)/⊂'Duplicate field names: ',⍕nub (bad←~unique nams)/nams[77]  err←err,(∨/bad)/⊂'Previous field(s) without Current field(s):',⍕(bad←prev^~(1↓¨nams)∊nams)/nams[78]  [79]  0 0⍴ReadModule (datatype,'Format') 'None'[80]  snms←m2n LASTCOLPN OVER UPPERCASE 1↓[2]SStoMAT CharStandVars,DateStandVars,FixNumStandVars,VarNumStandVars ⍝ standard names for member type[81]  vars←m2n SStoMAT FixNumStandVars,VarNumStandVars[82]  tot←↑(⍴vars)-avg←+/vars∊'fDCR' 'fPCR' 'fBM' 'fRpc1' 'fRpc1' 'fRpc2' 'fRpc3' 'fRpc4' 'fRpc5' 'fRpc6' ⍝ "Average" Standards[83]  styp←((↑¨⍴¨SStoMAT¨ ('⍺',LASTCOLPN,CharStandVars) DateStandVars),tot avg)/'CDNA' ⍝ standard names types[84]  sdsc←m2n SStoMAT '⍺Last Column',CharStandNames,DateStandNames,FixNumStandNames,VarNumStandNames  ⍝ standard names for member type[85]  [86]  :if '#'∊∊nams[87]      ∆←snms∊m2n 0 1↓SStoMAT VarNumStandVars[88]      snms←snms,'#',¨∆/snms ⋄ styp←styp,∆/styp ⋄ sdsc←sdsc,(⊂'Previous '),¨∆/sdsc[89]  :endif[90]  [91]  ⍝ Check Format of Standards - Unknown allowed if not Date[92]  ∆←(nams~¨'#')⍳(snms∊nams~¨'#')/snms ⋄ typ←(snms∊nams~¨'#')/styp[93]  :if ∨/bad←~('CNADDDUx'['CNADMYU'⍳↑¨fmts[∆]])∊¨typ,¨(~typ='D')⍴¨'U' ⋄ :andif ~nofmtrow[94]      err←err,⊂'Wrong format(s) for standard field(s)',⍕nams[bad/∆][95]  :elseif nofmtrow ⋄ :andif ∨/bad[96]      :if ∨/(⊂'C')≠↑¨(∆←nams∊('C'=styp)/snms)/fmts[97]          (∆/fmts)←⊂,'C'[98]      :endif[99]      :if ∨/⍙←~(⊂'Y')∊¨(∆←nams∊('D'=styp)/snms)/fmts[100]         ∆←∆\⍙ ⋄ (∆/fmts)←⊂'DDMMYYYY'[101]     :endif[102] :elseif ∨/z←∊(⊂,'U')≡¨fmts[∆][103]     ∆←(⍳⍴fmts)∊z/∆[104]     (∆/fmts)←,¨z/typ[105] :endif[106] [107] :if ∨/udef←~nams∊snms ⋄ included←included^~udef ⋄ :endif[108] [109] ⍝ Add excluded Standard Fields[110] nams←nams,excluded←(∆←~snms∊nams)/snms ⋄ fmts←fmts,∆/,¨styp[111] included←included,∆←(+/∆)/0 ⋄ prev←prev,∆ ⋄ curr←curr,∆ ⋄ udef←udef,∆ ⋄ average←udef^average,∆ ⋄ byNOM←byNOM,∆[112] [113] dates←included^~(↑¨fmts)∊'CNU'[114] err←err,(∨/bad)/⊂'Invalid format(s) for: ',⍕(bad←~0∊¨⍴¨(⊂'') CHECKDateFmt¨dates/fmts)/dates/nams[115] err←err,(∨/bad)/⊂'Non-numeric Previous field(s): ',⍕(bad←prev^'N'≠↑¨fmts)/nams[116] err←err,(∨/bad)/⊂'Inconsistent Current/Previous field formats: ',⍕(bad←curr^'N'≠↑¨fmts)/nams[117] [118] :if ~mt err ⋄ res←'Following Errors found:',⎕tcnl,,⊃⎕tcnl,¨err ⋄ :return ⋄ :endif[119] [120] orignam←nams,prev,average,byNOM,included,udef,[1.5]fmts[121] [122] excluded←excluded~↑(xxx MESS)←DBW_mapfield spin mappings[123] :if nofmtrow ⋄ MESS←MESS,DBW_mapfmt fmttypes ⋄ :endif[124] :if zwb useguess ⋄ MESS←MESS,DBW_guess_map excluded ⋄ :endif[125] [126] :if ~mt MESS[127]     MESS←'All Field Formats are suggested and should be checked for accuracy.',(2/⎕tcnl),MESS[128]     MDISPLAY MESS,'Please confirm that these mappings are correct.'[129] :endif[130] [131] [132] ((parent,'fFields.lvStandard')    'Data_Build') Win∆UpdateListview GetFieldNames 'Standard'[133] ((parent,'fFields.lvUserDefined') 'Data_Build') Win∆UpdateListview GetFieldNames 'UserDefined'[134] ((parent,'fFields.lvExcluded')    'Data_Build') Win∆UpdateListview GetFieldNames 'Excluded'[135] [136] ∆←~mt MESS[137] (parent,'fFields.picStandard') ⎕wi 'visible' ( 1-2×∆)[138] (parent,'fFields.picWarn')     ⎕wi 'visible' (¯1+2×∆)[139] (parent,'fFields.bnData_BuildChange') ⎕wi 'enabled' 0    ∇