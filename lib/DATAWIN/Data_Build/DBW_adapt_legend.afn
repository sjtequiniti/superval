    ∇ pkg←DBW_adapt_legend Formats;list;∆;idx;rows;nam;fromto;⍙;pRECL;RECL;ValidNonS;CharVars;CharFrom;CharTo;CharDesc;DateVars;DateFrom;DateTo;DateDesc;DateFmt;AvNumVars;AvNumFrom;AvNumTo;AvNumDesc;TotNumDesc;TotNumTo;TotNumFrom;TotNumVars;pAvNumFrom;pAvNumTo;pTotNumFrom;pTotNumTo;desc[1]   ⍝ DATAWIN.sf#21[2]   ⍝ [DataBuildWizard] Adapt standard 'legend' for data set being built.[3]   ⍝ reads external vars: INTERCOLSPACE LASTCOLPN[4]   [5]   list←⍙VALUESdict ReadDictFile (datatype,'Format') '' 'NAMES'[6]   0 0⍴ReadModule (datatype,'Format') 'None' ⍝ Get default variables[7]   [8]   ∆←+\1,¯1↓wids+INTERCOLSPACE[9]   fromto←(⊂'BLI4') ⎕fmt¨⎕split ⊃(∆)((~NAMS∊SGLCHARFLDS)×⍙←∆+wids-1)       ⍝ start and end cols for source fields[10]  [11]  pRECL←RECL←⍕¯1↑∆ ⋄ ValidNonS←0 2⍴''[12]  [13]  :if ∨/udef ⍝ User-defined variables[14]      :if ∨/∆←udef^('C'=↑¨fmts)^~prev ⍝ Ignore previous Chars[15]          CharVars←⊃∆/NAMS ⋄ (CharFrom CharTo)←∆⌿¨fromto ⋄ CharDesc←⊃∆/⊂''[16]      :endif[17]      :if ∨/∆←udef^(~(↑¨fmts)∊'CN')^~prev ⍝ Ignore previous Dates[18]          DateVars←⊃∆/NAMS ⋄ (DateFrom DateTo)←∆⌿¨fromto ⋄ DateDesc←⊃∆/⊂'' ⋄ DateFmt←⊃∆/fmts[19]      :endif[20]      :if ∨/∆←udef^'N'=↑¨fmts[21]          :if ∨/⍙←∆^(~prev)^ average ⍝ Work on Average non-previous first[22]              AvNumVars ←⊃⍙/NAMS ⋄ ( AvNumFrom  AvNumTo)←⍙⌿¨fromto ⋄  AvNumDesc←⊃⍙/⊂''[23]          :else[24]              AvNumVars ←1 0⍴''[25]          :endif[26]          :if ∨/⍙←∆^(~prev)^~average ⍝ Then Total non-previous[27]              TotNumVars←⊃⍙/NAMS ⋄ (TotNumFrom TotNumTo)←⍙⌿¨fromto ⋄ TotNumDesc←⊃⍙/⊂''[28]          :endif[29]          :if AOSCtl ⋄ :orif ∨/prev[30]              :if ∨/average ⋄ (pAvNumFrom pAvNumTo)←AvNumFrom AvNumTo ⋄ :endif[31]              :if ∨/⍙←∆^prev^ average[32]              :andif ∨/⍙←⍙^⍙\(⍙/NAMS)∊m2n AvNumVars[33]                  rows←('#',¨1↓¨m2n  AvNumVars)∊nams[34]                  (rows⌿ pAvNumFrom)←⍙⌿1⊃fromto[35]                  (rows⌿ pAvNumTo  )←⍙⌿2⊃fromto[36]              :endif[37]              (pTotNumFrom pTotNumTo)←TotNumFrom TotNumTo[38]              :if ∨/⍙←∆^prev^~average[39]              :andif ∨/⍙←⍙^⍙\(⍙/NAMS)∊m2n TotNumVars[40]                  rows←('#',¨1↓¨m2n TotNumVars)∊nams[41]                  (rows⌿pTotNumFrom)←⍙⌿1⊃fromto[42]                  (rows⌿pTotNumTo  )←⍙⌿2⊃fromto[43]              :endif[44]          :else[45]              (pAvNumFrom  pAvNumTo )←0/¨ AvNumFrom  AvNumTo[46]              (pTotNumFrom pTotNumTo)←0/¨TotNumFrom TotNumTo[47]          :endif[48]          ValidNonS←(∨/' '≠ValidNonS)⌿ValidNonS←AvNumVars OVER TotNumVars[49]          ValidNonS←(⎕split 2⌿ValidNonS),[1.5]((2×↑⍴ValidNonS)⍴(,'0') '9999999999')[50]      :endif[51]  :endif[52]  [53]  :for idx :in ((~udef)^~prev)/⍳⍴NAMS ⍝ Standard Fields (non-previous first)[54]      nam←'f',∊NAMS[idx] ⋄ ∆←idx=⍳⍴NAMS[55]      ⍎(∊('p' ' '),¨⊂nam,'←'),'⊃,¨∆⌿¨fromto'[56]      :if ~(↑∊fmts[idx])∊'CN'[57]          ⍎(∊('p' ' '),¨⊂'d',nam,'←'),'∊fmts[idx]' ⍝ Date Formats[58]      :endif[59]  :endfor[60]  :for idx :in ((~udef)^prev^('N'=↑¨fmts))/⍳⍴NAMS ⍝ Overwrite numeric previous[61]      nam←'f',∊NAMS[idx]~'#' ⋄ ∆←idx=⍳⍴NAMS[62]      ⍎'p',nam,'←⊃,¨∆⌿¨fromto'[63]  :endfor[64]  ∆←∨/'freq'⍷list ⋄ ⍎(1↓,'←',∆⌿list),'←freq'[65]  [66]  :for desc :in nub Formats ⍝ Blend in Validation Ranges from previous Data Format(s)[67]      datatype Blend_Ranges desc[68]  :endfor[69]  [70]  pkg←pack list    ∇