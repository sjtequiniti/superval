    ∇ res←field Quick_Scenario parm;parent;tstamp;var;∆;list;oldpage
[1]   ⍝ QSMWIN.sf#2
[2]   ⍝ Function to allow user control on Web Interaction Graph
[3]   
[4]   parent←'fmQuickSM.sQuick_Scenario.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   :case 'Prepare'
[8]       :if ~sqlDatabase ⋄ progid←⍙DBAccessProvider 0 ⋄ :endif                         ⍝ Get Access Provider
[9]       0 0⍴(SystemDir,'CONSWIN') ReadFile 'Prepare_Database' '' 'ContingencyTable'
[10]      0 0⍴(SystemDir,'VALNWIN') ReadFile 'Valuation PenProj' '' (⊃'PP∆FreqGeoAdjust' 'PP∆FreqAdjust')
[11]  
[12]      ⍝ Read Roll Forward Configuration
[13]      0 0⍴(SystemDir,'QSMWIN') ReadFile 'Configure_RF'
[14]      'CreateVars' RunModule 'Configure_RF'
[15]      0 0⍴(SystemDir,'QSMWIN') DeleteModule 'Configure_RF'
[16]  
[17]      active←deferred←mortadj←0
[18]      currentpage←'pgFinancial.'
[19]      controlpage←'pgRollForward.'
[20]  
[21]      ∆←'Module' 'Type' 'Description' 'Variable' 'Parameter' 'Valid' 'List'
[22]      ∆←∆ OVER 'QSM' 'Date' 'Consolidation Date' 'ValDATE' '' '' 'Consolidation Date'
[23]      AbsDict←AbsDict append ∆
[24]  
[25]  :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[26]      initial_load←1
[27]      dummypages←((parent ⎕wi 'pages'),¨'.')~⊂controlpage
[28]      CleanDBaseLists '<Extracted'
[29]      AbsDict←AbsDict for ~(AbsDict at 'Module')∊⊂'QSM'
[30]      :if savedresults←~mt restab
[31]          :if ~'<'∊mdbFile,sqlDBase
[32]              tstamp←' ','<>' embrace 'Extracted ',DLTMB QSMFile ReadFile (parent ⎕wi '∆savecn') '' 'TSTAMP'
[33]              mdbFile ←mdbFile ,(~mt mdbFile )/tstamp
[34]              sqlDBase←sqlDBase,(~mt sqlDBase)/tstamp
[35]          :endif
[36]          currentdbase←DLTB mdbFile,sqlDBase
[37]          :for ∆ :in ((mdbFile (parent,controlpage,'cbmdbFile')) (sqlDBase (parent,controlpage,'cbsqlDBase')),(⊂⊂mdbFile),¨⊂¨((⊂parent),¨dummypages,¨⊂'cbdummymdbFile')),(⊂⊂sqlDBase),¨⊂¨((⊂parent),¨dummypages,¨⊂'cbdummysqlDBase') ⋄ (var field)←∆
[38]              :if ~mt list←field ⎕wi 'list'
[39]                  list←(~∨/¨(⊂'<Extracted')⍷¨m2n list)⌿list
[40]                  field ⎕wi 'list' (list←⊃nub m2n var OVER list)
[41]                  field ⎕wi 'extent' (150,(¯10+(6×¯1↑CharSize)+¯1↑Win∆TextSize list)) ⍝ Stretch field to fit
[42]              :endif
[43]          :endfor
[44]          (parent,controlpage,'fFilter.cbclasses') ⎕wi 'list' (∆←1 0↓GetClasses)
[45]          ((⊂parent),¨dummypages,¨⊂'fFilter.cbdummyclasses') MultiWI 'list' ∆
[46]          group10←9.27>saveVersion
[47]          restab  ←1 QS_Compatibility restab
[48]          amorttab←0 QS_Compatibility amorttab
[49]          conttab ←0 QS_Compatibility conttab
[50]          fundtab ←0 QS_Compatibility fundtab
[51]          v1pctab ←0 QS_Compatibility v1pctab
[52]          restab←⍙WebAdditLiabs restab
[53]  
[54]          ∆←'Module' 'Type' 'Description' 'Variable' 'Parameter' 'Valid' 'List'
[55]          ∆←∆ OVER 'QSM' 'Date' 'Consolidation Date' 'ValDATE' ('DD/MM/YYYY' DATE∆FMT ValDATE) '' 'Consolidation Date'
[56]          AbsDict←AbsDict append ∆
[57]          :if mt RFDate ⋄ RFDate←'Consolidation Date' ⋄ RFPeriod←⍕rfperiod←0 ⋄ :endif
[58]      :else
[59]          currentdbase←'' ⋄ group10←0
[60]      :endif
[61]      (dummymdbFile dummysqlDBase dummyGraph dummygraphterm dummyclasses dummyincconts dummyincexpense dummyincadditliab)←mdbFile sqlDBase Graph graphterm classes incconts incexpense incadditliab
[62]      ⍙WebHideControls
[63]  
[64]  :case 'PostAssign'
[65]      initial_load←0
[66]      ((parent,"pgRollForward.fRollForward.") "edRFPeriod") Win∆SetRelated 'visible' 0
[67]  
[68]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[69]      :if 0=rfperiod ⋄ (parent,'pgRollForward.fRollForward.lRFPeriod') ⎕wi 'caption' '' ⋄ :endif
[70]      :if mt GraphType
[71]          :if FileExist QSMFile ⋄ 0 0⍴QSMFile ReadModule 'QSM_Graphs'
[72]          :else                 ⋄ 0 0⍴⍙VALUESdict ReadDictFile 'QSM_Graphs'
[73]          :endif
[74]          GraphType←graphtype ⋄ ShowZeroes←showzeroes
[75]      :endif
[76]  
[77]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[78]  
[79]      :repeat
[80]          QS_Change ↑field
[81]      :until mt field←1↓field
[82]  
[83]  :case 'PageChange'
[84]      QS_PageChange
[85]  
[86]  :case 'Valid' ⍝ Routine specific validation
[87]  
[88]      res←((Win∆GetControlList DTDot parent) at 'variable') Win∆FormValidation 'Valid' ⍝ fields on this form
[89]  
[90]  :case 'Run'
[91]  
[92]  :case 'Quit' ⍝ Deleting "other" variables
[93]      0 0⍴⎕ex 'savedresults premsk penfymsk incmsk maxyr maxpay mortadj decadj groupings GraphView progid currentdbase finMethod'
[94]      0 0⍴⎕ex 'currentpage initial_load dummypages controlpage group10 rfAssets DiscOrig DiscAdj EscOrig  EscAdj discRF escRF'
[95]      0 0⍴⎕ex 'classsel Capind Profit inccont incexp incaddit accruallimit GraphTerm amortmaxterm amortmsk fundind ContPer VDATEtxt'
[96]      0 0⍴⎕ex 'PP∆FreqGeoAdjust PP∆FreqAdjust ContingencyTable active deferred ContIDs'
[97]      AbsDict←AbsDict for ~(AbsDict at 'Module')∊⊂'QSM'
[98]  
[99]  :endselect
    ∇
