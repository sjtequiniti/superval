    ∇ res←tab ⍙WebDeriveMortality arg;yrval;spyrval;memadjust;AvtPxqx;spmult;qy;freqadj;spadjust;qx;tPx;SumtPxqx;midyear;BenTab;propmarr;sql;AvAge;AgeDiff;dataID;∆;rotate;benID;memcontID;resID;spcontID[1]   ⍝ QSMWIN.sf#2[2]   ⍝ Determine the Mortality underlying the de-inflated cashflows[3]   [4]   (yrval spyrval)←arg[5]   yrval←yrval×[1]∨/0.001<∣yrval ⋄ spyrval←spyrval×[1]∨/0.001<∣spyrval[6]   [7]   (freqadj midyear)←↑¨tab at 'FreqAdj' 'MidYear'[8]   [9]   :if midyear[10]      yrval←yrval×1+penfymsk[11]  ⍝⍝⍝    spyrval←spyrval×1+penfymsk×¯1+1 CDIV 1-freqadj[12]  :endif[13]  [14]  :if ^/0=,yrval[15]  :andif 0≠rowsIn ∆←(morttab for (⊂'RCID'),⊂,↑tab at 'ResultsCategoryID') for (⊂'StartYear'),⊂,↑tab at 'StartYear'[16]      qx←↑∆ at 'qx'[17]  :else[18]      :if ~1=freqadj[19]  ⍝⍝⍝        aaa←(incmsk-penfymsk)×¯1↓[2]0,⊃(⊂1-freqadj) PP∆FreqAdjust¨⎕split yrval,0[20]          rotate←+/^\0=yrval[21]          yrval←0,¯1↓[2](-rotate)⌽⊃(⊂1-freqadj) PP∆FreqAdjust¨⎕split rotate⌽yrval,0 ⍝ Adjust for Payment Frequency[22]  ⍝⍝⍝        :if ∨/,.01<∣aaa-yrval[23]  ⍝⍝⍝            crash[24]  ⍝⍝⍝        :endif[25]             yrval←yrval+penfymsk×(⍴yrval)↑(0≠freqadj)↓[2]'old' 0 Extrapolate (0=freqadj)↓[2]yrval,0[26]  ⍝⍝⍝        yrval←incmsk×(⍴yrval)↑(0≠freqadj)↓[2]'new' 0 Extrapolate (0=freqadj)↓[2]yrval,0[27]  ⍝⍝⍝        :if ∨/,.01<∣aaa-yrval[28]  ⍝⍝⍝            crash[29]  ⍝⍝⍝        :endif[30]      :endif[31]      :if ∨/0≠∆←+/^\1=qx←(incmsk×0.00000001××∣yrval)⌈0.5⌊(incmsk-0.5×midyear×penfymsk×freqadj=0)×(-DIFF yrval,0) CDIV yrval  ⍝ Member Mortality[32]          qx←⊃(∆ sel¨⊂0.00000001),¨∆↓¨⎕split qx ⍝ Fix any residual 1's at the start[33]      :endif[34]  [35]      :if 0=rowsIn (morttab for (⊂'RCID'),,¨↑tab at 'ResultsCategoryID') for (⊂'StartYear'),,¨↑tab at 'StartYear'[36]          morttab←morttab OVER (↑tab at 'ResultsCategoryID') (↑tab at 'StartYear') qx[37]      :endif[38]  :endif[39]  tPx←¯1↓[2]×\1-0,qx[40]  [41]  memadjust←⊃(⊂freqadj) PP∆FreqAdjust¨⎕split tPx,0                    ⍝ Adjustment based on Member tPx[42]  AgeDiff←0[43]  propmarr←↑tab at 'PropMarrTable'[44]  [45]  :if ∨/0≠,spyrval[46]      spyrval←⊃(1-freqadj) PP∆FreqAdjust¨⎕split spyrval,0                 ⍝ Adjust for Payment Frequency[47]      spmult←(1↓[2]spyrval,0) ZDIV spyrval[48]  [49]      resID←' AND ResultsCategoryID IN ','()' embrace 0 ⍙DBNumList nub tab at 'ResultsCategoryID'[50]      benID←' AND BenefitTypeID IN ','()' embrace 0 ⍙DBNumList nub tab at 'BenefitTypeID'[51]      dataID←' WHERE DataItemID=11'[52]      memcontID←' AND ContingencyID IN ','()' embrace 0 ⍙DBNumList (∊BenTable at (⊂'Member'),(~mortadj)/⊂'Spouse')~0[53]      sql←'SELECT SVAge,SUM(-SVValue) FROM ResultsData',dataID,resID,benID,anddbid,memcontID,' GROUP BY SVAge ORDER BY SVAge'[54]      :if mt BenTab←∣1 ⍙DBadoCONCommand sql[55]          dataID←' WHERE DataItemID=15'[56]          BenTab←∣1 ⍙DBadoCONCommand 'SELECT SVAge,SUM(-SVValue) FROM ResultsData',dataID,resID,benID,anddbid,memcontID,' GROUP BY SVAge ORDER BY SVAge'[57]      :endif[58]      :if ~mt BenTab[59]          AvAge←(+/×/BenTab)÷+/BenTab[;2]                         ⍝ Member Average Age[60]          :if mortadj  ⋄ :andif ~mt ∆←(↑BenTable at 'Spouse')~0   ⍝ Spouse Non-Cash Benefits[61]              spcontID←' AND ContingencyID IN (',(0 ⍙DBNumList ∆),')'[62]              sql←'SELECT SVAge,SUM(-SVValue) FROM ResultsData',dataID,resID,benID,anddbid,spcontID,' GROUP BY SVAge ORDER BY SVAge'[63]              :if ~mt BenTab←∣1 ⍙DBadoCONCommand sql[64]                  AgeDiff←AvAge-(+/×/BenTab)÷+/BenTab[;2] ⍝ Difference between Married and Single Average Age[65]              :endif[66]          :endif[67]          :if 'D'=↑↑tab at 'SpouseDefinition'                         ⍝ Spouse at Death[68]              propmarr←120↑[2]BenTab[;1]⌽(↑⍴BenTab)⌿MATRIX propmarr,120⍴0[69]              propmarr←(+⌿BenTab[;2]×[1]propmarr)÷+/BenTab[;2]        ⍝ Benefit Weighted average Propertion Married[70]          :else[71]              propmarr←maxyr⍴↑(⌊0.5+AvAge)↓propmarr[72]          :endif[73]      :else[74]          propmarr←maxyr⍴0[75]      :endif[76]  [77]      SumtPxqx←+\qx×tPx×[2]propmarr←maxyr↑propmarr[78]      AvtPxqx←SumtPxqx CDIV (maxpay,maxyr)⍴((midyear×¯0.5)+freqadj PP∆FreqAdjust 0.0000001,⍳maxyr),0[79]      qy←Smoothqx incmsk×1-spmult×SumtPxqx CDIV 1↓[2]SumtPxqx,0[80]      qy←0⌈0.5⌊¯1↓[2](0,qy)+(penfymsk×'old' 0 Extrapolate qy),0[81]  ⍝⍝⍝    qy←0⌈0.5⌊¯1↓[2]1↓[2]'new' 0 Extrapolate 0,qy[82]  ⍝⍝⍝    :if ∨/,.00001<∣aaa-qy[83]  ⍝⍝⍝        crash[84]  ⍝⍝⍝    :endif[85]      :if ∨/0≠∆←+/^\1=qy←qy⌈0.0000001××∣spyrval ⍝ Fudge to ensure a non-zero rate of decrement wherever payment is made[86]          qy←⊃(∆ sel¨⊂0.00000001),¨∆↓¨⎕split qy ⍝ Fix any residual 1's at the start[87]      :endif[88]      spadjust←AvtPxqx××\1-qy[89]      spadjust←spadjust+(∣×spyrval)×0=spadjust ⍝ Use zero mortality when Spouse only cash flow[90]  :else[91]      qy←0×qx ⋄ spadjust←0×memadjust ⋄ propmarr←maxyr⍴0[92]  :endif[93]  [94]  res←qx memadjust AgeDiff qy spadjust propmarr    ∇