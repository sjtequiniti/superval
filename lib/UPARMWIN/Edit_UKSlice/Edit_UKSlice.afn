    ∇ res←field Edit_UKSlice parm;parent;desc;page;z
[1]   ⍝ UPARMWIN.sf#4
[2]   ⍝ Function to allow user control on UK (normal and Alt) Slices Details
[3]   ⍝ Revn: sjt10apr15
[4]   
[5]   parent←'fmEditUKSlice.sEdit_UKSlice.' ⋄ res←0⍴'' ⍝ Default response
[6]   
[7]   :select parm
[8]   
[9]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[10]      :if Sliceget≥1 ⋄ SliceValues ⋄ :endif
[11]      Formattrick←HyphenSwap 'fmSV.sActives_Basis.pgMain.fData.cbFormat' ⎕wi 'text' ⍝ Trick to get Format-related variables
[12]      FormFields←Win∆GetControlList DTDot parent                                ⍝ Get list of fields
[13]      OffsetSlice←(''≡slicetype)×Sliceput=zwb SLICEUP
[14]      :if 'Alt'≡slicetype ⋄ AltFirstSlice←Sliceput=1
[15]      :else               ⋄    FirstSlice←Sliceput=1
[16]      :endif
[17]      ReviseCacheFor FormFields
[18]      :if Sliceput≠⌊sliceput←Sliceput ⋄ Sliceput←99.5 ⋄ :endif ⍝ Signal failure
[19]  
[20]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[21]  
[22]      (parent,'pgTier1.fAdjust.ckDEDUCTTIER11') ⎕wi 'visible' ¯1
[23]      (parent,'pgTier1.fAdjust.ckDEDUCTTIER21') ⎕wi 'visible' ¯1
[24]      (parent,'pgTier2.fAdjust.ckDEDUCTTIER22') ⎕wi 'visible' ¯1
[25]      :if Sliceget=Sliceput
[26]          ('fmEditUKSlice.bnEdit_UKSlicePrevious') ⎕wi 'enabled' (Sliceget≠1)
[27]          ('fmEditUKSlice.bnEdit_UKSliceNext') ⎕wi 'enabled' (Sliceget≠↑⍴('Alt'≡slicetype) means AltSliceDesc else SliceDesc)
[28]          parent ⎕wi 'onModified' "ControlName ⎕wi '∆modified' 0"
[29]          parent ⎕wi 'modified' 0
[30]          parent ⎕wi '∆modified' 1
[31]      :endif
[32]  
[33]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[34]  
[35]      :repeat
[36]          :select ↑field
[37]          :case 'cbFormattrick'
[38]          :case 'cktier2defined'
[39]              z←(parent,'pgSlice.fSlice.cktier2defined') ⎕wi 'value'
[40]              ((parent,'pgTier2') ⎕wi 'children') MultiWI 'enabled' z
[41]              →lab
[42]          :case 'cktier3defined'
[43]              z←×/(parent,'pgSlice.fSlice.cktier3defined') ⎕wi 'Ref' 'value' 'enabled'
[44]              ((parent,'pgTier3') ⎕wi 'children') MultiWI 'enabled' z
[45]              →lab
[46]          :else
[47]  lab:        (↑field) Win∆FormValidation 'Change'
[48]              (parent,'pgSlice.fSlice.cktier2defined') ⎕wi 'enabled' (~×/(parent,'pgSlice.fSlice.cktier3defined') ⎕wi 'Ref' 'value' 'enabled')
[49]          :endselect
[50]      :until mt field←1↓field
[51]  
[52]  :case 'Valid' ⍝ Routine specific validation
[53]  
[54]      :repeat
[55]          :select page←DLTMB ↑field
[56]          :case 'All'
[57]              :for page :in 'pgSlice' 'pgTier1' 'pgTier2X' 'pgTier3X'
[58]                  :if ~mt res←(⊂page) Edit_UKSlice 'Valid' ⋄ :leave ⋄ :endif
[59]              :endfor
[60]          :case 'pgSlice'
[61]              res←((FormFields for ↑¨(⊂parent,page)⍷¨FormFields at 'control')at 'variable') Win∆FormValidation 'Valid' ⍝ fields on this form
[62]  
[63]          :caselist 'pgTier1' 'pgTier2X' 'pgTier3X'
[64]              res←((FormFields for ↑¨(⊂parent,page~'X')⍷¨FormFields at 'control')at 'variable') Win∆FormValidation 'Valid' ⍝ fields on this form
[65]  
[66]              :if Sliceput≠1 ⋄ :andif 'C'=↑accbasis ⋄ :andif ^/' '=,FIXED
[67]                  res←'Benefit Basis is CARE but no Pension Data Item specified'
[68]              :endif
[69]          :caselist 'pgTier2' 'pgTier3'
[70]              ⍝ Only checked on Save - see pgTier?X
[71]          :endselect
[72]      :until mt field←1↓field
[73]  
[74]      :if mt res
[75]          :if 'Alt'≡slicetype ⋄ desc←AltSliceDesc
[76]          :else               ⋄ desc←SliceDesc
[77]          :endif
[78]          :if ~mt SLICEDESC
[79]          :andif ~mt desc[(⍳1↑⍴desc)~Sliceput;] ExactTLU SLICEDESC
[80]               res←'AlreadyDesc' ⋄ Win∆SetFocus parent,'pgSlice.edSLICEDESC' ⋄ :return
[81]          :endif
[82]      :endif
[83]  
[84]  :case 'Run'
[85]      Sliceput←sliceput
[86]      SliceAssign
[87]      :if mt res←(Sliceget≠Sliceput)/'Quit'
[88]          parent ⎕wi 'modified' 0
[89]          MDISPLAY (('Alt'≡slicetype)/'Alternate '),'Slice ',(⍕Sliceput),' parameters changed'
[90]      :endif
[91]      parent ⎕wi '∆modified' 1
[92]  
[93]  :case 'Quit' ⍝ Deleting "other" variables
[94]      0 0⍴⎕ex 'sliceput'
[95]  
[96]  :endselect
    ∇
