    ∇ res←field V9Migration parm;⎕elx;elx;parent;xmlPath;nErr;file;tieno;xxx;z
[1]   ⍝ OVERWIN.sf#26
[2]   ⍝ Function to allow user control on V9 Migration module
[3]   
[4]   elx←⎕elx ⋄ parent←'fmMigration.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   
[8]   :case 'Prepare'  ⍝ Preparatory Routines
[9]       InputsType←'BasisFile'
[10]  
[11]      :if 0=⎕nc 'MigFolder' ⋄ :orif 0∊⍴,DLTMB MigFolder
[12]          0 0⍴ClientFile ReadFile 'Client' '' 'MigFolder'
[13]          :if 0∊⍴,DLTMB MigFolder ⋄ MigFolder←InputDir ⋄ :endif
[14]      :endif
[15]      0 0⍴(⊂MigDir,'MIGRATE') ReadFile¨'Migration_Callbacks' 'Migration_Utilities'
[16]  
[17]  :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[18]      :if 3≠↑⍴migParm ⋄ migParm←3 1↑migParm OVER '0' ⋄ :endif
[19]      (parent,'fParms.fFinancials.cbfaParms') ⎕wi 'onChange' ((parent,'fParms.fFinancials.cbfaParms') ⎕wi 'onClick')
[20]  
[21]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[22]      (parent,'fBases.fActives'   ) ⎕wi 'enabled' (~0∊⍴(parent,'fBases.fActives.lvActBases'   ) ⎕wi 'list')
[23]      (parent,'fBases.fDeferreds' ) ⎕wi 'enabled' (~0∊⍴(parent,'fBases.fDeferreds.lvDefBases' ) ⎕wi 'list')
[24]      (parent,'fBases.fPensioners') ⎕wi 'enabled' (~0∊⍴(parent,'fBases.fPensioners.lvPenBases') ⎕wi 'list')
[25]      0 0⍴('lvActBases' 'lvDefBases' 'lvPenBases') V9Migration 'Change'
[26]  
[27]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[28]  
[29]      :repeat
[30]          :select ↑field
[31]          :case 'lvActBases'
[32]              (parent,'fBases.fActives.ckActKeepName'   ) ⎕wi 'enabled' (z←×⍴('fmMigration.fBases.fActives.lvActBases'   ) ⎕wi 'value')
[33]              ((parent,'fBases.fActives.'   ) 'cbActBasisFile') Win∆SetRelated 'enabled' (z^~(parent,'fBases.fActives.ckActKeepName') ⎕wi 'value')
[34]          :case 'lvDefBases'
[35]              (parent,'fBases.fDeferreds.ckDefKeepName' ) ⎕wi 'enabled' (z←×⍴('fmMigration.fBases.fDeferreds.lvDefBases'   ) ⎕wi 'value')
[36]              ((parent,'fBases.fDeferreds.' ) 'cbDefBasisFile') Win∆SetRelated 'enabled' (z^~(parent,'fBases.fDeferreds.ckDefKeepName') ⎕wi 'value')
[37]          :case 'lvPenBases'
[38]              (parent,'fBases.fPensioners.ckPenKeepName') ⎕wi 'enabled' (z←×⍴('fmMigration.fBases.fPensioners.lvPenBases'   ) ⎕wi 'value')
[39]              ((parent,'fBases.fPensioners.') 'cbPenBasisFile') Win∆SetRelated 'enabled' (z^~(parent,'fBases.fPensioners.ckPenKeepName') ⎕wi 'value')
[40]          :case 'ckActKeepName'
[41]                ((parent,'fBases.fActives.') 'cbActBasisFile') Win∆SetRelated 'enabled' (~(parent,'fBases.fActives.ckActKeepName') ⎕wi 'value')
[42]          :case 'ckDefKeepName'
[43]                ((parent,'fBases.fDeferreds.') 'cbDefBasisFile') Win∆SetRelated 'enabled' (~(parent,'fBases.fDeferreds.ckDefKeepName') ⎕wi 'value')
[44]          :case 'ckPenKeepName'
[45]                ((parent,'fBases.fPensioners.') 'cbPenBasisFile') Win∆SetRelated 'enabled' (~(parent,'fBases.fPensioners.ckPenKeepName') ⎕wi 'value')
[46]          :case 'cbActBasisFile'
[47]               UKBasisChange DLTB (parent,'fBases.fActives.cbActBasisFile') ⎕wi 'text'
[48]          :case 'cbDefBasisFile'
[49]               UKBasisChange DLTB (parent,'fBases.fDeferreds.cbDefBasisFile') ⎕wi 'text'
[50]          :case 'cbPenBasisFile'
[51]               UKBasisChange DLTB (parent,'fBases.fPensioners.cbPenBasisFile') ⎕wi 'text'
[52]          :case 'cbfaParms'
[53]               (parent,'fParms.fFinancials.ckmigParm3') ⎕wi 'enabled' (×(parent,'fParms.fFinancials.cbfaParms') ⎕wi 'value')
[54]          :endselect
[55]      :until mt field←1↓field
[56]  
[57]  :case 'Back'
[58]  
[59]      :select DLTMB Win∆Child ↑field
[60]      :case 'fAnomaly'
[61]          0 0⍴(parent,'fAnomaly.webAnomaly') ⎕wi 'XNavigate2' (StyleDir,'blank.htm')
[62]      :case 'fParms'
[63]          res←'Back' ⍝ Skip past Anomaly
[64]      :case 'fInterest'
[65]          0 0⍴(parent,'fInterest.edResults')  ⎕wi 'text' ''
[66]      :case 'fInflation'
[67]          0 0⍴(parent,'fInflation.edResults')  ⎕wi 'text' ''
[68]          res←('int' TreeCreate parent,'fInterest.trInterest')/'Back'
[69]      :case 'fRevaluation'
[70]          0 0⍴(parent,'fRevaluation.edResults')  ⎕wi 'text' ''
[71]          res←('inf' TreeCreate parent,'fInflation.trInflation')/'Back'
[72]      :case 'fIncrease'
[73]          0 0⍴(parent,'fIncrease.edResults')  ⎕wi 'text' ''
[74]          res←('rev' TreeCreate parent,'fRevaluation.trRevaluation')/'Back'
[75]      :case 'fSelMort'
[76]          0 0⍴(parent,'fSelMort.edResults')  ⎕wi 'text' ''
[77]          res←('inc' TreeCreate parent,'fIncrease.trIncrease')/'Back'
[78]      :case 'fMortality'
[79]          0 0⍴(parent,'fMortality.edResults')  ⎕wi 'text' ''
[80]          :if ~bGAD ⋄ res←'Back' ⋄ :endif
[81]          res←('Mortality_Rate_Select' TreeCreate parent,'fSelMort.trSelMort')/'Back'
[82]      :case 'fMortImp'
[83]          0 0⍴(parent,'fMortImp.edResults')  ⎕wi 'text' ''
[84]          res←('Mortality_Rate' TreeCreate parent,'fMortality.trMortality')/'Back'
[85]      :case 'fConts'
[86]          0 0⍴(parent,'fConts.edResults')  ⎕wi 'text' ''
[87]          res←('Mort_Improvement' TreeCreate parent,'fMortImp.trMortImp')/'Back'
[88]      :case 'fNEM'
[89]          0 0⍴(parent,'fNEM.edResults')  ⎕wi 'text' ''
[90]          res←('Contributions' TreeCreate parent,'fConts.trConts')/'Back'
[91]      :case 'fSummary'
[92]          0 0⍴(parent,'fSummary.webSummary') ⎕wi 'XNavigate2' (StyleDir,'blank.htm')
[93]          res←('NE_Model' TreeCreate parent,'fNEM.trNEM')/'Back'
[94]      :case 'fOverwrite'
[95]          0 0⍴(parent,'fOverwrite.webOverwrite') ⎕wi 'XNavigate2' (StyleDir,'blank.htm')
[96]          res←'Back'
[97]      :endselect
[98]  
[99]  :case 'Next'
[100] 
[101]     :select DLTMB Win∆Child ↑field
[102]     :case 'fBases'
[103]         :if ~0∊⍴res←ProcessBases ⋄ :return ⋄ :endif
[104] 
[105]         0 0⍴MigrationStep 0
[106]         0 0⍴MigrationStep 1
[107] 
[108]         (nErr xmlPath)←MigrationStep 2
[109]         :if ×nErr ⋄ 0 0⍴(parent,'fAnomaly.webAnomaly') ⎕wi 'XNavigate2' xmlPath ⍝ display anomalies report at xmlPath
[110]         :else     ⋄ res←'Next' ⍝ Continue to fParms
[111]         :endif
[112] 
[113]     :case 'fAnomaly'
[114]         ⍝ Nothing Required
[115] 
[116]     :case 'fParms'
[117]         MigParm←(MatrixZWB migParm)×((⊂parent,'fParms.fFinancials.ckmigParm'),¨'1' '2' '3') MultiWI 'enabled'
[118]         MigGpMatch←3 3⍴MatrixZWB migGpMatch
[119]         faParm←DLTB (parent,'fParms.fFinancials.cbfaParms') ⎕wi 'text'
[120] 
[121]         :if 0∊⍴MigNameTable←DLTB (parent,'fParms.fNames.cbmigTable') ⎕wi 'text'
[122]             MigNameTable←MATRIX 'Group' 'NewVariable' 'OldVariable' 'FldType' 'AssGroup' 'Type' 'Flag' 'Description' 'Name'
[123]         :else
[124]             0 0⍴ClientFile ReadFile 'Migration_Names' MigNameTable 'MigNameTable'
[125]         :endif
[126] 
[127]         0 0⍴MigrationStep 3
[128]         0 0⍴MigrationStep 4
[129]         0 0⍴MigrationStep 6
[130] 
[131]         TreePrepare ⍝ Create POPUP menu
[132]         res←('int' TreeCreate parent,'fInterest.trInterest')/'Next'
[133] 
[134]     :case 'fInterest'
[135]         (FANUB FAMAP)←(FANUB FAMAP 'int') FaUnloadListFor parent,'fInterest.trInterest'
[136]         res←('inf' TreeCreate parent,'fInflation.trInflation')/'Next'
[137] 
[138]     :case 'fInflation'
[139]         (FANUB FAMAP)←(FANUB FAMAP 'inf') FaUnloadListFor parent,'fInflation.trInflation'
[140]         res←('rev' TreeCreate parent,'fRevaluation.trRevaluation')/'Next'
[141] 
[142]     :case 'fRevaluation'
[143]         (FANUB FAMAP)←(FANUB FAMAP 'rev') FaUnloadListFor parent,'fRevaluation.trRevaluation'
[144]         res←('inc' TreeCreate parent,'fIncrease.trIncrease')/'Next'
[145] 
[146]     :case 'fIncrease'
[147]         (FANUB FAMAP)←(FANUB FAMAP 'inc') FaUnloadListFor parent,'fIncrease.trIncrease'
[148]         :if ~bGAD ⋄ res←'Next' ⋄ :endif
[149]         res←('Mortality_Rate_Select' TreeCreate parent,'fSelMort.trSelMort')/'Next'
[150] 
[151]     :case 'fSelMort'
[152]         (GPNUB GPMAP)←(GPNUB GPMAP 'Mortality_Rate_Select') GpUnloadListFor parent,'fSelMort.trSelMort'
[153]         res←('Mortality_Rate' TreeCreate parent,'fMortality.trMortality')/'Next'
[154] 
[155]     :case 'fMortality'
[156]         (GPNUB GPMAP)←(GPNUB GPMAP 'Mortality_Rate') GpUnloadListFor parent,'fMortality.trMortality'
[157]         res←('Mort_Improvement' TreeCreate parent,'fMortImp.trMortImp')/'Next'
[158] 
[159]     :case 'fMortImp'
[160]         (GPNUB GPMAP)←(GPNUB GPMAP 'Mort_Improvement') GpUnloadListFor parent,'fMortImp.trMortImp'
[161]         res←('Contributions' TreeCreate parent,'fConts.trConts')/'Next'
[162] 
[163]     :case 'fConts'
[164]         (GPNUB GPMAP)←(GPNUB GPMAP 'Contributions') GpUnloadListFor parent,'fConts.trConts'
[165]         res←('NE_Model' TreeCreate parent,'fNEM.trNEM')/'Next'
[166] 
[167]     :case 'fNEM'
[168]         (GPNUB GPMAP)←(GPNUB GPMAP 'NE_Model') GpUnloadListFor parent,'fNEM.trNEM'
[169]         xmlPath←MigrationStep 7
[170]         xxx←(parent,'fSummary.webSummary') ⎕wi 'XNavigate2' xmlPath ⍝ display summary report
[171] 
[172]     :case 'fSummary'
[173]         xmlPath←MigrationStep 8
[174]         xxx←(parent,'fOverwrite.webOverwrite') ⎕wi 'XNavigate2' xmlPath ⍝ display file copy report
[175] 
[176]     :case 'fOverwrite'
[177] 
[178]     :endselect
[179] 
[180] :case 'Valid' ⍝ Routine specific validation
[181] 
[182] :case 'Run'
[183] 
[184]     ⍝ Create New Basis Files
[185]     :for file :in MigNewFiles
[186]          :if 0='BasisFile' CreateFile (InputDir,file) 'Superval/21 Migrated Bases'
[187]               res←'InvFileName' file ⋄ :return
[188]          :endif
[189]     :endfor
[190] 
[191]     ⍝ Migrate Formats from S21 Filter Files
[192]     0 0⍴(SystemDir,'UDATAWIN') ReadFile 'Import_Format'
[193]     MigrateAllFormats
[194]     0 0⍴(SystemDir,'UDATAWIN') DeleteModule 'Import_Format'
[195] 
[196]     ⍝ Migrate Bases
[197]     0 0⍴MigrationStep 9
[198] 
[199]     res←'Quit'
[200] 
[201] :case 'Quit' ⍝ Deleting "other" variables
[202]     0 0⍴(⊂MigDir,'MIGRATE') DeleteModule¨'Migration_Callbacks' 'Migration_Utilities'
[203]     0 0⍴⎕ex 'ABases EBases NBases Aorder Eorder Norder'
[204]     0 0⍴⎕ex 'MigParm MigGpMatch MigBasesTable MigNewFiles'
[205]     0 0⍴⎕ex 'InputsType'
[206]     0 0⍴⎕ex 'BRWSR POPUP LEAVES TWIGS EXCLUDED_TWIG_NAMES MINIMUM_TWIG_ID'
[207]     0 0⍴⎕ex 'MT_MAP FA_RULES CON_RULES PM_RULES PPF_DETAILS TEMPLATES BASES85X BASES9RAW BASES9MAPPED'
[208]     0 0⍴⎕ex 'FANUB FAMAP GPNUB GPMAP DEFINED_FAS DEFINED_GPS IMPLICIT_TABLES'
[209] 
[210] :endselect
    ∇
