    ∇ res←ind Client_Valid field;parent;z;MaxRow;list;page;i;NameList;SSName;size;File;Folder;flag;maxBasis;Dirsize;sizes;MESS;drive;∆;dRIVE;Dir[1]   ⍝ OVERWIN.sf#10[2]   ⍝ Function to validate Client Details[3]   ⍝ ind (boolean) indicates if it is called from the Scheme Details Form[4]   res←0⍴'' ⍝ Default Response[5]   :if ind ⋄ parent←'fmClient.sClient.' ⋄ :endif[6]   [7]   :repeat[8]       :select page←(↑field),'.'[9]       :case 'All.'[10]          :if    ~mt res←           1↓ind Client_Valid ⊂'pgData'        ⋄ →ind/0  ⋄ :endif[11]          :if uk≠1 ⋄ :andif ind[12]          :andif ~mt res←res,(mt res)↓ind Client_Valid ⊂'pgConstants'   ⋄ →ind/0  ⋄ :endif[13]          :if    ~mt res←res,(mt res)↓ind Client_Valid ⊂'pgFiles'       ⋄ →ind/0  ⋄ :endif[14]          :if    ~mt res←res,(mt res)↓ind Client_Valid ⊂'pgSQLDatabase' ⋄ :return ⋄ :endif[15]  [16]  ⍝⍝⍝        :if ∣bHPC ⋄ :andif HPCWarning ⋄ :andif ∨/∆←'&='∊InputDir[17]  ⍝⍝⍝            res←'Warning:  Load Sharing not possible in an Input Folder containing ',(' or ' join ⎕split ⍉MATRIX ∆/'&='),' character',(^/∆)/'(s)'[18]  ⍝⍝⍝            HPCWarning←0 ⋄ :return[19]  ⍝⍝⍝        :endif[20]          :if mt ClientFile ⍝ Check Validity of "new" ClientFile[21]              :if ~mt res←Create_ClientFile ind ⋄ :return ⋄ :endif[22]          :endif[23]          UpdSchemeINI[24]          UpdClientList[25]          :if uk=1[26]              ((⊂FormName,'.mMainBasis.'),¨'mMig' 'mMigNames') MultiWI 'enabled' ((zwb S21Migrate)^genAccess[2]≤accesslevel)[27]              (FormName,'.mMainBasis.mScheme.mAOS')        ⎕wi 'enabled' (AOSCtl^zwb AOSenabled)[28]              (FormName,'.mMainBasis.mAudit.mScheme.mAOS') ⎕wi 'enabled' (AOSCtl^zwb AOSenabled)[29]              (FormName,'.mMainValn.mCompact'            ) ⎕wi 'enabled' (~zwb SQLDatabase)[30]              (FormName,'.mMainValn.mConvert'            ) ⎕wi 'enabled' ( zwb SQLDatabase)[31]          :endif[32]  [33]      :case 'pgFiles.'[34]          flag←1[35]          :if ~ind ⋄ :andif ~'⍺:\'≡Folder←((INIString 'SV Folders' 'Yield Curve' '⍺:\' (InputDir,'svscheme.ini')) InputDir) ConvertDir 'Absolute'[36]                  newyieldDir←FullFolder Folder[37]          :elseif inputDir≡InputDir ⋄ :andif ~mt yieldDir[38]                  newyieldDir←FullFolder yieldDir[39]          :else ⋄ newyieldDir←FullFolder InputDir ⋄ flag←0[40]                  res←res,⎕tcnl,'Yield Curve Folder has been assigned to the Input Folder'[41]          :endif[42]  [43]  ⍝⍝⍝        elx←⎕elx ⋄ ⎕elx←'⎕elx←elx ⋄ →invalidyield' ⍝ Check Existence of Yield Curve Folder[44]  ⍝⍝⍝        0 0⍴⎕xlib newyieldDir ⋄ ⎕elx←elx ⋄ →nextyield ⍝⍝⍝ Could use FileExist?[45]  ⍝⍝⍝ invalidyield:[46]          :if ~FolderExist newyieldDir ⍝ Check Existence of Yield Curve Folder[47]              res←res,⎕tcnl,'Yield Curve ',MESS∆TRANS 'NotFolder' (¯1↓yieldDir)[48]              :if ind ⋄ Win∆SetFocus parent,page,'fFolders.edyieldDir' ⋄ :return ⋄ :endif[49]          :endif[50]  [51]  ⍝⍝⍝ nextyield:[52]          :if flag ⋄ :andif ~newyieldDir≡yieldDir←FullFolder yieldDir[53]              res←res,⎕tcnl,'Relative Value of Yield Curve Folder has been retained'[54]          :endif[55]  [56]          flag←1[57]          :if ~ind ⋄ :andif ~'⍺:\'≡Folder←((INIString 'SV Folders' 'Output' '⍺:\' (InputDir,'svscheme.ini')) InputDir) ConvertDir 'Absolute'[58]                  newoutputDir←FullFolder Folder[59]          :elseif inputDir≡InputDir[60]                  newoutputDir←FullFolder outputDir[61]          :else ⋄ newoutputDir←FullFolder InputDir ⋄ flag←0[62]                  res←res,⎕tcnl,'Output Folder has been assigned to the Input Folder'[63]          :endif[64]  [65]  ⍝⍝⍝        elx←⎕elx ⋄ ⎕elx←'⎕elx←elx ⋄ →invalidout' ⍝ Check Existence of Output Folder[66]  ⍝⍝⍝        0 0⍴⎕xlib newoutputDir ⋄ ⎕elx←elx ⋄ →nextout ⍝⍝⍝ Could use FileExist?[67]  ⍝⍝⍝ invalidout:[68]          :if ~FolderExist newoutputDir ⍝ Check Existence of Output Folder[69]              res←res,⎕tcnl,'Output ',MESS∆TRANS 'NotFolder' (¯1↓outputDir)[70]              :if ind ⋄ Win∆SetFocus parent,page,'fFolders.edoutputDir' ⋄ :return ⋄ :endif[71]          :endif[72]  [73]  ⍝⍝⍝ nextout:[74]          :if flag ⋄ :andif ~newoutputDir≡outputDir←FullFolder outputDir[75]              res←res,⎕tcnl,'Relative Value of Output Folder has been retained'[76]          :endif[77]  [78]          :if ~folderwarning ⍝ Test OutputDir will fit Excel Output filename limit of 218 characters[79]              Dirsize←⍴outputDir[80]              maxBasis←↑⌈/⍴¨m2n 1 0↓'BasisFile' GetParmFiles 1 ⍝ Maximum length of Basis Files[81]              sizes←(1 1 AOSCtl)×(1+ShortFilenames)⊃(70 13 15) (29 4 9) ⍝ Size of FileName "Base" and extra for Exact Age Interpolated and AOS[82]              :if uk=1 ⋄ sizes←sizes,(^/zwb¨PPFenabled CAPenabled)×(1+ShortFilenames)⊃9 4[83]              :else    ⋄ sizes←sizes,0[84]              :endif[85]  [86]              MESS←⎕tcnl,'Warning:  Excel has a limit of 218 characters for the path and filename of an Excel file.  '[87]              :if ∨/z←218<sizes←Dirsize+maxBasis+(↑sizes)+0,1↓sizes[88]                  res←MESS,(~↑z)/'If using ',(' or ' join lmt z/'' '' 'Exact Age Interpolated' 'Analysis of Surplus'),' options in Valuation runs, '[89]                  res←res,'You may exceed this limit because of the length of the combination of your Output Folder path and Basis File names.  The following solutions are available:'[90]                  res←res,(~ShortFilenames)/⎕tcnl,'    -  use the short Excel filenames (system-level) option in SuperVal; and/or'[91]                  res←res,⎕tcnl,'    -  choose an Output Folder with a shorter pathname (or map the Output Folder to a drive); and/or'[92]                  res←res,⎕tcnl,'    -  use shorter Basis file names; and/or'[93]                  res←res,bASM/⎕tcnl,'    -  use shorter Scenario Descriptions; and/or'[94]                  res←res,⎕tcnl,'    -  don''t create Excel Output in Valuation Runs.'[95]              :elseif bASM ⋄ :andif ∨/z←200<sizes[96]                  res←MESS,'When performimg Accurate Scenario runs, you may exceed this limit because of the length of the combination of your Output Folder path, Basis File names and Scenario descriptions.  The following solutions are available:'[97]                  res←res,(~ShortFilenames)/⎕tcnl,'    -  use the short Excel filenames (system-level) option in SuperVal; and/or'[98]                  res←res,⎕tcnl,'    -  choose an Output Folder with a shorter pathname (or map the Output Folder to a drive); and/or'[99]                  res←res,⎕tcnl,'    -  use shorter Basis file names; and/or'[100]                 res←res,⎕tcnl,'    -  use shorter Scenario Descriptions.'[101]             :endif[102]             folderwarning←1[103]         :endif[104] [105]         flag←1[106]         :if ~ind ⋄ :andif ~'⍺:\'≡Folder←((INIString 'SV Folders' 'Consolid' '⍺:\' (InputDir,'svscheme.ini')) InputDir) ConvertDir 'Absolute'[107]                 newconsolidDir←FullFolder Folder[108]         :elseif inputDir≡InputDir[109]                 newconsolidDir←FullFolder consolidDir[110]         :else ⋄ newconsolidDir←FullFolder InputDir ⋄ flag←0[111]                 res←res,⎕tcnl,'Consolidation Folder has been assigned to the Input Folder'[112]         :endif[113] [114] ⍝⍝⍝        elx←⎕elx ⋄ ⎕elx←'⎕elx←elx ⋄ →invalidcons' ⍝ Check Existence of Consoldiation Folder[115] ⍝⍝⍝        0 0⍴⎕xlib newconsolidDir ⋄ ⎕elx←elx ⋄ →nextcons ⍝⍝⍝ Could use FileExist?[116] ⍝⍝⍝ invalidcons:[117]         :if ~FolderExist newconsolidDir ⍝ Check Existence of Consoldiation Folder[118]             res←res,⎕tcnl,'Consolidation ',MESS∆TRANS 'NotFolder' (¯1↓consolidDir)[119]             :if ind ⋄ Win∆SetFocus parent,page,'fFolders.edconsolidDir' ⋄ :return ⋄ :endif[120]         :endif[121] [122] ⍝⍝⍝ nextcons:[123]         :if flag ⋄ :andif ~newconsolidDir≡consolidDir←FullFolder consolidDir[124]             res←res,⎕tcnl,'Relative Value of Consolidation Folder has been retained'[125]         :endif[126] [127]         :if uk=1 ⋄ :andif zwb S21Migrate ⋄ :andif genAccess[2]≤accesslevel ⍝ Check Existence of Migration Folder[128]             :if (UPPERCASE InputDir)≡UPPERCASE MigFolder←FullFolder MigFolder[129]                 :if ind ⋄ Win∆SetFocus parent,page,'fFolders.edMigFolder' ⋄ :endif[130]                 res←res,⎕tcnl,MESS∆TRANS 'NotInputDir' 'Migration' ⋄ →ind/0[131]             :endif[132] ⍝⍝⍝            elx←⎕elx ⋄ ⎕elx←'⎕elx←elx ⋄ →invalidmig' ⍝ Check Existence of Migration Folder[133] ⍝⍝⍝            0 0⍴⎕xlib MigFolder ⋄ ⎕elx←elx ⋄ →nextmig ⍝⍝⍝ Could use FileExist?[134] ⍝⍝⍝ invalidmig:[135]             :if ~FolderExist MigFolder ⍝ Check Existence of Migration Folder[136]                 :if ind ⋄ Win∆SetFocus parent,page,'fFolders.edMigFolder' ⋄ :endif[137]                 res←res,⎕tcnl,MESS∆TRANS 'NotFolder' (¯1↓MigFolder) ⋄ →ind/0[138]             :endif[139]         :endif[140] [141] ⍝⍝⍝ nextmig:[142]         flag←1[143]         :if ∆←'Scheme'≡6↑csvType ⋄ Dir←InputDir[144]         :else                    ⋄ Dir←LibraryDir[145]         :endif[146]         :if ~ind ⋄ :andif ~'⍺:\'≡Folder←((INIString 'SV Folders' 'MortImp' '⍺:\' (InputDir,'svscheme.ini')) Dir) ConvertDir 'Absolute'[147]                 newmicsvDir←FullFolder Folder[148]         :elseif inputDir≡InputDir ⋄ :andif ~mt micsvDir[149]                 newmicsvDir←FullFolder micsvDir[150]         :else ⋄ newmicsvDir←FullFolder Dir ⋄ flag←0[151]                 res←res,⎕tcnl,'Mortality Improvement csv Folder has been assigned to the Library Folder'[152]         :endif[153] [154] ⍝⍝⍝        elx←⎕elx ⋄ ⎕elx←'⎕elx←elx ⋄ →invalidmicsv' ⍝ Check Existence of MI csv Folder[155] ⍝⍝⍝        0 0⍴⎕xlib newmicsvDir ⋄ ⎕elx←elx ⋄ →nextmicsv ⍝⍝⍝ Could use FileExist?[156] ⍝⍝⍝ invalidmicsv:[157]         :if ~FolderExist newmicsvDir ⍝ Check Existence of MI csv Folder[158]             res←res,⎕tcnl,'Mortality Improvement csv ',MESS∆TRANS 'NotFolder' (¯1↓micsvDir)[159]             :if ind ⋄ Win∆SetFocus parent,page,'fFolders.edmicsvDir' ⋄ :return ⋄ :endif[160]         :endif[161] [162] ⍝⍝⍝ nextmicsv:[163]         :if flag ⋄ :andif ~newmicsvDir≡micsvDir←FullFolder micsvDir[164]             res←res,⎕tcnl,'Relative Value of Mortality Improvement csv Folder has been retained'[165]         :endif[166] [167]         drive←UPPERCASE (¯1+⌊/newmicsvDir⍳':$')↑newmicsvDir[168]         dRIVE←UPPERCASE (¯1+⌊/Dir⍳':$')↑Dir[169]         :if ~drive≡dRIVE[170]             res←res,⎕tcnl,'The Mortality Improvement csv Files folder "',(¯1↓micsvDir),'" must be on the same drive as the '[171]             res←res,(∆+1)⊃('Library Folder "',(¯1↓LibraryDir),'"') ('Input Folder "',(¯1↓InputDir),'"')[172]             →ind/0[173]         :endif[174] [175]         ⍝ Illegal Characters in Filenames[176]         :for z :in 'clientFile' 'basisFile' ⍝⍝⍝ FIXME BasisFile no longer?[177] ⍝⍝⍝            :if ∨/'\/:*?<>∣|`'∊File←⍎z[178]             :if ∨/illegals∊File←⍎z[179]                 :if ind ⋄ Win∆SetFocus parent,page'fFiles.cb',z ⋄ :endif[180]                 res←res,⎕tcnl,'InvFileName' File ⋄ →ind/0[181]             :endif[182]         :endfor[183] [184]         :if ~ind[185]             list←GetNewDecrFiles ecflag∨uk≠1[186]             :if mt list ExactTLU DecrFile[187]                 res←res,⎕tcnl,'Scheme Rate Table File used in previous session "',LibraryDir,DecrFile,'" not found or is corrupt'[188]             :elseif DecrFilets>(LibraryDir,DecrFile) ReadFile 1 '' 'FRDCI'[189]                 res←res,⎕tcnl,'More recent Scheme Rate Table File "',LibraryDir,DecrFile,'" used in previous session'[190]             :endif[191]             list←GetFactorFiles ecflag[192]             :if mt list ExactTLU factorFile[193]                 res←res,⎕tcnl,'Factor Table File used in previous session "',LibraryDir,factorFile,'" not found or is corrupt'[194]             :elseif FactorFilets>(LibraryDir,factorFile) ReadFile 1 '' 'FRDCI'[195]                 res←res,⎕tcnl,'More recent Factor Table File "',LibraryDir,factorFile,'" used in previous session'[196]             :endif[197]             :if uk=1[198]                 :if ~mt ClientFile ReadFile 'PPF_Details' '' (⊃'ppfFile' 'PPFFilets')[199]                 :andif ~mt ppfFile[200]                     :if 82=⎕dr PPFFilets ⋄ PPFFilets←0 ⋄ :endif[201]                     list←GetPPFFiles[202]                     :if mt list ExactTLU ppfFile[203]                         res←res,⎕tcnl,'PPF Factor File used in previous session "',LibraryDir,ppfFile,'" not found or is corrupt'[204]                     :elseif PPFFilets>(LibraryDir,ppfFile) ReadFile 1 '' 'FRDCI'[205]                         res←res,⎕tcnl,'More recent PPF Factor File "',LibraryDir,ppfFile,'" used in previous session'[206]                     :endif[207]                 :endif[208]                 0 0⍴⎕ex 'ppfFile PPFFilets'[209]             :endif[210]         :endif[211] [212]     :case 'pgData.'[213]        :if 0≥('DD/MM/YYYY' DATEEXP pvDATE) DAYS 'DD/MM/YYYY' DATEEXP vDATE ⍝ Check dates are in right order[214]            :if ind ⋄ Win∆SetFocus parent,page,'fDates.edpvDATE' ⋄ :endif[215]            res←res,⎕tcnl,'Current Valuation Date is before Previous Valuation Date' ⋄ →ind/0[216]        :endif[217] [218]        :if ~mt DLTB Actsfile[219]            :if ~ind ⋄ :andif ~FileExist InputDir,DLTB Actsfile[220]                 res←res,⎕tcnl,MESS∆TRANS 'FileNotFound' (InputDir,Actsfile)[221]            :elseif ~mt z←MESS∆TRANS FormatA Format∆CHECK (MATRIX InputDir,Actsfile) ''[222]                 :if ind ⋄ Win∆SetFocus parent,page,'fFiles.edActsfile' ⋄ :endif[223]                 res←res,⎕tcnl,z ⋄ →ind/0[224]            :endif[225]        :endif[226]        :if ~mt DLTB Defsfile[227]            :if ~ind ⋄ :andif ~FileExist InputDir,DLTB Defsfile[228]                 res←res,⎕tcnl,MESS∆TRANS 'FileNotFound' (InputDir,Defsfile)[229]            :elseif ~mt z←MESS∆TRANS FormatD Format∆CHECK (MATRIX InputDir,Defsfile) ''[230]                 :if ind ⋄ Win∆SetFocus parent,page,'fFiles.edDefsfile' ⋄ :endif[231]                 res←res,⎕tcnl,z ⋄ →ind/0[232]            :endif[233]        :endif[234]        :if ~mt DLTB Pensfile[235]            :if ~ind ⋄ :andif ~FileExist InputDir,DLTB Pensfile[236]                 res←res,⎕tcnl,MESS∆TRANS 'FileNotFound' (InputDir,Pensfile)[237]            :elseif ~mt z←MESS∆TRANS FormatP Format∆CHECK (MATRIX InputDir,Pensfile) ''[238]                 :if ind ⋄ Win∆SetFocus parent,page,'fFiles.edPensfile' ⋄ :endif[239]                 res←res,⎕tcnl,z ⋄ →ind/0[240]            :endif[241]        :endif[242] [243]     :case 'pgSQLDatabase.'[244]         :if zwb SQLDatabase[245]             :if mt SQLDBScheme[246] ⍝⍝⍝                :if ind ⋄ Win∆SetFocus parent,page,'fConfig.lvSQLDBScheme' ⋄ :endif[247]                 res←res,⎕tcnl,'No SQL Server Database Schemes have been created - Refer to Site Administrator' ⋄ →ind/0[248]             :elseif ~ClientName≡1⊃m2n SStoMAT SQLDBScheme[249] ⍝⍝⍝                :if ind ⋄ Win∆SetFocus parent,page,'fConfig.lvSQLDBScheme' ⋄ :endif[250]                 res←res,⎕tcnl,'Scheme Name does not match the SQL Server Database Scheme Name' ⋄ →ind/0[251]             :elseif ~vDATE≡2⊃m2n SStoMAT SQLDBScheme[252] ⍝⍝⍝                :if ind ⋄ Win∆SetFocus parent,page,'fConfig.lvSQLDBScheme' ⋄ :endif[253]                 res←res,⎕tcnl,'Scheme Valuation Date does not match the SQL Server Database Valuation Date' ⋄ →ind/0[254]             :endif[255]             :if 0=⎕nc 'sql_properties'[256]                 :if ~mt sqlConName ⋄ :andif ~mt ConfigFile ReadFile 'Configure_SQL' sqlConName ⋄ :andif ~accesslevel<zwb SQLAccess[257]                     sql_properties←⊃spin m2n¨property propvalue[258]                     sqlTimeout←zwb SQLTimeout[259]                 :else[260]                     res←res,⎕tcnl,'SQL Server Connection properties not specified.  Refer to your Site Administrator to update your User details (Tools/Administration/Manage Users)' ⋄ →ind/0[261]                 :endif[262]             :endif[263]             :if mt ConfigFile ReadFile SQLDBName[264]                 res←res,⎕tcnl,'SQL Server Database has been retired.  Update your SQL Server Database selection.' ⋄ →ind/0[265]             :endif[266]         :endif[267] [268]     :case 'pgConstants.'[269]        ⍝⍝⍝ FIXME - remove dependence on Form[270]        :if Win∆F1SSFilled SSName←parent,page,'ssNumConst' ⍝ Validation of Numeric Constants in here!!![271]             MaxRow←SSName ⎕wi 'xMaxRow'[272]             NameList←⊃,SSName Win∆F1SSGetTextArray 1 1,MaxRow,1[273]             :for i :in ⍳MaxRow[274]                 ⍝ Check Variable Names are valid!![275]                 :if ~mt z←MESS∆TRANS VALID∆Variable DLTB NameList[i;][276]                     :if ind ⋄ SSName ⎕wi 'xSetActiveCell' i 1 ⋄ Win∆SetFocus SSName ⋄ :endif[277]                     res←res,⎕tcnl,z ⋄ →ind/0[278]                 :endif[279]                 ⍝ Check Variable Names are unique[280]                 :if ~(,i)≡1↑NameList ExactTLU NameList[i;][281]                     :if ind ⋄ SSName ⎕wi 'xSetActiveCell' i 1 ⋄ Win∆SetFocus SSName ⋄ :endif[282]                     res←res,⎕tcnl,MESS∆TRANS 'UniqueName' (NameList[i;]) ⋄ →ind/0[283]                 :endif[284]             :endfor[285]        :endif[286] [287]        ⍝ Validation of Date Constants in here!!![288]        :if Win∆F1SSFilled SSName←parent,page,'ssDateConst'[289]             MaxRow←SSName ⎕wi 'xMaxRow'[290]             list←⊃,SSName Win∆F1SSGetTextArray 1 1,MaxRow,1[291]             size←1↑⍴NameList←⊃,(parent,page,'ssNumConst') Win∆F1SSGetTextArray 1 1,MaxRow,1[292]             NameList←NameList OVER list[293]             ⍝ Check Variable Names are valid!![294]             :for i :in ⍳MaxRow[295]                 :if ~mt z←MESS∆TRANS VALID∆Variable DLTB list[i;][296]                     :if ind ⋄ SSName ⎕wi 'xSetActiveCell' i 1 ⋄ Win∆SetFocus SSName ⋄ :endif[297]                     res←res,⎕tcnl,z ⋄ →ind/0[298]                 :endif[299]                 ⍝ Check Variable Names are unique[300]                 :if ~(,i+size)≡1↑NameList ExactTLU list[i;][301]                     :if ind ⋄ SSName ⎕wi 'xSetActiveCell' i 1 ⋄ Win∆SetFocus SSName ⋄ :endif[302]                     res←res,⎕tcnl,MESS∆TRANS 'UniqueName' (list[i;]) ⋄ →ind/0[303]                 :endif[304]             :endfor[305]             list←⊃,SSName Win∆F1SSGetTextArray 1 2,MaxRow,1[306]             :for i :in ⍳MaxRow[307]                 ⍝ Check Variable Values are unique[308]                 :if ~(,i)≡list ExactTLU list[i;][309]                     :if ind ⋄ SSName ⎕wi 'xSetActiveCell' i 2 ⋄ Win∆SetFocus SSName ⋄ :endif[310]                     res←res,⎕tcnl,MESS∆TRANS 'UniqueValue' ⋄ →ind/0[311]                 :endif[312]             :endfor[313]         :endif[314]     :endselect[315] :until mt field←1↓field    ∇