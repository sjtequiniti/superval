    ∇ res←field SaveAs parm;parent;new;tieno;Index;descs;bascats;text;z;∆
[1]   ⍝ OVERWIN.sf#12
[2]   ⍝ Function to allow user control on Save As
[3]   
[4]   parent←'fmSaveAs.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   
[8]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[9]   
[10]      OldFile←''
[11]      :if ~'{Library}'≡9↑savefile←SaveFile←DLTB '\' Win∆Child InputsFile
[12]          savefile←SaveFile←UPPERCASE savefile
[13]      :endif
[14]      :if 0∊⍴,SavePath←'\' Win∆Parent InputsFile
[15]          :if InputsType≡'QSMFile'     ⋄ SavePath←ConsolidDir
[16]  ⍝⍝⍝        :elseif InputsType≡'LibraryFile' ⋄ SavePath←LibraryDir
[17]          :else                        ⋄ SavePath←InputDir ⍝⍝⍝ May not work for all types of files
[18]          :endif
[19]      :endif
[20]      SavedDesc←Savedescription
[21]      (ParmFileList ParmFileDesc)←(InputsType Win∆CountryCode) GetParmFileList SavePath
[22]  
[23]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[24]  
[25]      :if useBasisCat ⋄ :andif (⊂SavedModule)∊'Actives' 'Deferreds' 'Pensioners',¨⊂'_Basis'
[26]          (parent,'llSavedID') ⎕wi 'Set' ('style' 0) ('enabled' 1)
[27]          (parent,'edSavedDesc') ⎕wi 'onChange' '0 0⍴(⊂⎕wi ''name'') SaveAs ''Change'' ' ⍝ Update Basis Identifier
[28]      :else
[29]          ((⊂parent),¨'llSavedID' 'edSavedID') MultiWI 'visible' 0
[30]      :endif
[31]  
[32]      (parent,'bnSaveAsSave') ⎕wi 'tooltip' 'Save Parameter Set'
[33]      (parent,'ckSaveRep') ⎕wi 'enabled' (saveasind⌊⍴,SaveCN)
[34]      (parent,'cbSaveFile') ⎕wi 'enabled' ((⊂InputsType)∊'BasisFile' 'QSMFile' '⍝LibraryFile')
[35]      (parent,'cbSaveFile') ⎕wi 'style' (((parent,'cbSaveFile') ⎕wi 'style') BinAdd 2×InputsType≡'⍝LibraryFile') ⍝⍝⍝ Remove if Multiple SVGlobals Files
[36]      0 0⍴('cbSaveFile' 'edSavedDesc') SaveAs 'Change'
[37]  
[38]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[39]  
[40]      :repeat
[41]          :select ↑field
[42]          :case 'edSavedDesc' ⍝ Remove Multiple Blanks from Save Descriptions
[43]              :if useBasisCat ⋄ :andif (⊂SavedModule)∊'Actives' 'Deferreds' 'Pensioners',¨⊂'_Basis'
[44]                  (parent,'edSavedID') ⎕wi 'text' ((' '=2⊃text,'  ')↑text←DLTMB (parent,'edSavedDesc') ⎕wi 'text')
[45]              :endif
[46]  
[47]          :case 'cbSaveFile'
[48]              :if ~'{Library}'≡9↑InputsFile←SaveFile←DLTB (parent,'cbSaveFile') ⎕wi 'text'
[49]                  InputsFile←SavePath,SaveFile←UPPERCASE SaveFile
[50]              :endif
[51]              :if ~OldFile≡InputsFile
[52]                 :if mt SaveFileDesc←,((m2n ParmFileList)∊⊂SaveFile)⌿ParmFileDesc ⋄ :andif InputsType≡'QSMFile'
[53]                       SaveFileDesc←'QSM Results File'
[54]                 :endif
[55]                 (parent,'edSaveFileDesc') ⎕wi 'text' SaveFileDesc
[56]                 OldFile←InputsFile
[57]              :endif
[58]              (parent,'ckSaveRep') ⎕wi 'enabled' (saveasind⌊(SaveFile≡savefile)^⍴,SaveCN)
[59]              :if new←~(⊂SaveFile)∊m2n ParmFileList
[60]                 (parent,'ckEditFileDesc') ⎕wi 'value' 1
[61]              :endif
[62]              (parent,'ckEditFileDesc') ⎕wi 'enabled' (~new)
[63]  
[64]          :case 'ckEditFileDesc'
[65]              (parent,'edSaveFileDesc') ⎕wi 'enabled' ((parent,'ckEditFileDesc') ⎕wi 'value')
[66]          :endselect
[67]      :until mt field←1↓field
[68]  
[69]  :case 'Valid'
[70]  
[71]  ⍝⍝⍝    :if ~InputsType≡'LibraryFile' ⋄ :andif ∨/'SVGLOBALS'⍷UPPERCASE SaveFile
[72]  ⍝⍝⍝        res←'Parameter Filenames containing "SVGlobals" are reserved by the System' ⋄ :return
[73]  ⍝⍝⍝    :endif
[74]  
[75]      (parent,'edSavedDesc') ⎕wi 'text' (SavedDesc←DLTMB SavedDesc)
[76]      :if     'RATIO OF MEMBER CONTRIBUTIONS'≡UPPERCASE SavedDesc
[77]          res←'Parameter Description "Ratio of Member Contributions" is reserved by the System' ⋄ :return
[78]      :elseif 'NONE'≡4↑UPPERCASE SavedDesc
[79]          res←'Parameter Description starting "None" is reserved by the System' ⋄ :return
[80]      :elseif '[SELECT]'≡8↑UPPERCASE SavedDesc
[81]          res←'Parameter Description starting "[Select]" is reserved by the System' ⋄ :return
[82]      :elseif '{LIBRARY}'≡9↑UPPERCASE SavedDesc
[83]          res←'Parameter Description starting "{Library}" is reserved by the System' ⋄ :return
[84]      :elseif '{ETHER}'≡7↑UPPERCASE SavedDesc
[85]          res←'Parameter Description starting "{Ether}" is reserved by the System' ⋄ :return
[86]      :endif
[87]  
[88]  ⍝⍝⍝    :if SavedModule≡'Scenarios' ⋄ :andif ∨/z←'\/:*?<>|∣`'∊SavedDesc
[89]      :if SavedModule≡'Scenarios' ⋄ :andif ∨/z←(∆←illegals,';')∊SavedDesc
[90]  ⍝⍝⍝        res←'Scenarios Parameter Description must not contain the following characters "',(z/'/*?<>|∣`:\'),'"' ⋄ :return
[91]          res←'Scenarios Parameter Description must not contain the following characters "',(z/∆),'"' ⋄ :return
[92]      :endif
[93]  
[94]      :if useBasisCat ⋄ :andif (⊂SavedModule)∊'Actives' 'Deferreds' 'Pensioners',¨⊂'_Basis'
[95]          :if 3>⍴SavedDesc
[96]              res←'Basis Parameter description must be at least 3 characters'
[97]              :return
[98]          :endif
[99]          :if ' '≠2⊃SavedDesc
[100]             res←'Basis Parameter description should be in the form {Single Character Basis Identifier} followed by a space and the description of the Basis'
[101]             :return
[102]         :endif
[103]     :endif
[104] 
[105]     ⍝ Make sure new file does not alreay exist
[106]     :if ~'{Library}'≡9↑SaveFile ⋄ :andif ~(⊂UPPERCASE SaveFile)∊m2n ParmFileList
[107]         :if FileExist SavePath,(DLTB SaveFile),'.sf'
[108]              res←'InvFile' SaveFile ⋄ :return
[109]         :else
[110]              :if 0=InputsType CreateFile (SavePath,SaveFile) SaveFileDesc
[111]                   res←'InvFileName' SaveFile ⋄ :return
[112]              :else
[113]                   InputsFile←SavePath,SaveFile
[114]              :endif
[115]         :endif
[116]     :endif
[117] 
[118]     ⍝ Check Description doesn't already exist
[119]     Index←InputsFile ReadFile 'Index'
[120]     :if (⊂UPPERCASE SavedDesc)∊UPPERCASE¨descs←((Index for (⊂'∆_CompNo'),((Index at '∆_CompNo' )~saverep/SaveCN)) for '∆_Name' SavedModule) at '∆_Description'
[121]         res←'AlreadyDesc' ⋄ :return
[122]     :endif
[123] 
[124]     :if useBasisCat ⋄ :andif (⊂SavedModule)∊'Actives' 'Deferreds' 'Pensioners',¨⊂'_Basis'
[125]         bascats←nub ↑¨(' '=2⊃¨2↑¨descs)/descs
[126]         :if (↑SavedDesc)∊bascats
[127]             res←'The specified Single Character Basis Identifier is already in use.',2/⎕tcnl
[128]             res←res,'Choose a different Basis Identifier character excluding the following:',(2/⎕tcnl),' ' join ⎕split ⍉MATRIX bascats[⎕av⍋bascats]
[129]             :return
[130]         :endif
[131]     :endif
[132] 
[133]     Savedescription←SavedDesc
[134] 
[135] :case 'Run'
[136] 
[137]     res←'Quit'
[138] 
[139] :case 'Quit' ⍝ Deleting "other" variables
[140]     0 0⍴⎕ex 'ParmFileDesc ParmFileList'
[141]     0 0⍴⎕ex 'savefile OldFile SavePath saveasind'
[142] 
[143] :endselect
    ∇
