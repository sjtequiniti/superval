    ∇ ScenGlobList←ScenGlobList Scenarios_RunDesc parmsets;GlobList;array;set;Desc;NRA;LRA;descs;∆;str;Rating;LifeExp;Age;ScenDesc;list;tab;flds;key;Rel;Abs;msk;FDesc;z;globs;order;curr;new;ID
[1]   ⍝ OVERWIN.sf#29
[2]   ⍝ Create the Scenario Basis Display for Excel Output
[3]   
[4]   :if parmsets≡'Primary'
[5]       :if ∨/∆←(⊂'ParmsMS')≡¨list←ScenGlobList at 'Parms' ⍝ Change ParmsMS to ParmsM
[6]           (∆/list)←⊂'ParmsM'
[7]           ScenGlobList←ScenGlobList amend 'Parms' list
[8]       :endif
[9]   
[10]      ⍝ Adjust Financials
[11]      tab←ScenGlobList for 'Parms' 'Fin'
[12]      key←((⊂⍙FinAssdict) for¨(⊂⊂'Name'),¨⊂¨DLTB¨⎕av[209] StripText¨tab at 'Desc')at¨⊂'Key'
[13]      key←(∊⍴¨key)\('Interest' 'Inflation' 'Revaluation' 'Increase',¨⊂': ')[∊(⊂'Int' 'Inf' 'Rev' 'Inc')⍳¨key]
[14]      tab←tab amend 'Desc' (key,¨tab at 'Desc')
[15]      ScenGlobList←(ScenGlobList for (~(⊂'Fin')≡¨ScenGlobList at 'Parms')) append tab
[16]  
[17]      :if ×rowsIn tab←ScenGlobList for 'Parms' 'RelNum'
[18]          tab←tab amend 'Parms' ((rowsIn tab)/⊂'Fin')
[19]          tab←tab amend 'Desc'((⊂'Constant: '),¨HyphenSwap¨tab at 'Desc')
[20]          ScenGlobList←(ScenGlobList for (~(⊂'RelNum')≡¨ScenGlobList at 'Parms')) append tab
[21]      :endif
[22]  
[23]      parmsets←nub ScenGlobList at 'Parms'
[24]      ScenGlobList←parmsets push ⍉¨MATRIX¨nub¨(((⊂ScenGlobList) for¨(⊂⊂'Parms'),¨⊂¨parmsets) sortedBy¨⊂'Desc') at¨⊂'Desc'
[25]  
[26]      ⍝ Further Adjustments to Financials
[27]      list←'Financial Globals Parameter Set' 'Use Currently Selected Financial Globals Parameter Set' 'Scenario Values as differences from Financial Globals Parameter Set' 'Absolute Scenario Values where they differ from Financial Globals Parameter Set'
[28]      globs←,ScenGlobList at 'Fin'
[29]      order←('Interest' 'Inflation' 'Revaluation' 'Increase' 'Constant')⍳':' StripText¨globs
[30]      ScenGlobList←ScenGlobList amend 'Fin' (⍉MATRIX list,globs[order←⍋order])
[31]  
[32]      ⍝ Valuation Data
[33]      tab←(AbsDict for 'Module' 'Client') at 'Variable' 'Description' 'Parameter'
[34]      flds←'vDATE' 'Actsfile' 'Defsfile' 'Pensfile' ⍝⍝⍝ 'FormatA' 'FormatD' 'FormatP'
[35]      list←⍉MATRIX 1 0 1 1 1\DLTB¨(' ' join¨spin ((push 1 1 0/tab) at flds) ((⊂'{}') embrace¨(push 1 0 1/tab) at flds))
[36]      list[1;]←(⊂'/Current/Scenario') TEXTREPL¨list[1;]
[37]      list[2;]←⊂'Financial Assumptions effective at the Original Valuation Date'
[38]      ScenGlobList←ScenGlobList amend 'Data' list
[39]  :else
[40]      :for set :in parmsets
[41]          :if mt array←ScenGlobList at set ⋄ :continue ⋄ :endif
[42]          GlobList←array[;1]
[43]          :select set
[44]          :case 'Data'
[45]              array←array,m2n DatavDATE OVER ((∨/' '≠DatavDATE)/CheckTranslate TermAdjFin) OVER 3↑[⎕io]DataScenFile
[46]          :case 'Fin' ⍝⍝⍝ Includes 'RelNum'
[47]              descs←m2n FinParms OVER ⊃CheckTranslate¨FinCurrent ScenRel ScenAbs
[48]              :if ∨/z←zwb¨ScenRel ScenAbs
[49]                  GlobList←DLTB¨':' DropText¨⎕av[209] StripText¨4↓GlobList
[50]                  FDesc←m2n FinDesc
[51]                  :if ∨/msk←(⊂'Constant')≡¨m2n FinType ⋄ (msk/FDesc)←HyphenSwap¨msk/FDesc ⋄ :endif
[52]                  FDesc←DLTB¨⎕av[209] StripText¨FDesc
[53]                  (Rel Abs)←0 0 1 1/GlobList AdjustPointers (GlobList FDesc),m2n¨FinScenRel FinScenAbs
[54]                  :if ↑z ⋄ :andif ∨/msk←∨/¨' '≠¨Rel ⋄ :andif ∨/msk←msk^~∨/¨(⊂'.CSV')⍷¨UPPERCASE¨Rel ⍝ Numeric Relatives
[55]                      (msk/Rel)←(⊂'/+-/-') TEXTREPL¨(⊂'/ / +') TEXTREPL¨'+',¨DLTMB¨msk/Rel
[56]                  :endif
[57]                  descs←descs,↑z/Rel Abs
[58]              :else
[59]                  descs←(↑⍴array) OVERTAKE descs,⊂''
[60]              :endif
[61]              array←array,descs
[62]          :case 'ParmsM'
[63]              (Desc ScenDesc Rating LifeExp Age)←0 1 1 1 1 1/GlobList AdjustPointers (⊂GlobList),m2n¨MortDesc MortScenDesc MortScenRating MortScenLifeExp MortScenAge
[64]              descs←0⍴⊂''
[65]              :for ∆ :in spin Desc ScenDesc Rating LifeExp Age ⋄ (Desc ScenDesc Rating LifeExp Age)←DLTB¨∆
[66]                  :if ~mt Rating  ⋄ str←(fnonmt ScenDesc Desc),' {adjusted by ',Rating,'%}'
[67]                  :elseif ~mt Age ⋄ str←(fnonmt ScenDesc Desc),' {life expectancy adjusted by ',LifeExp,' years at age ',Age,'}'
[68]                  :else           ⋄ str←ScenDesc
[69]                  :endif
[70]                  descs←descs⍪⊂str
[71]              :endfor
[72]              array←array,descs
[73]          :case 'ParmsI'
[74]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨MImpDesc MImpScenDesc
[75]          :case 'ParmsX'
[76]              (Desc NRA LRA)←0 0 1 1 1/GlobList AdjustPointers (⊂GlobList),m2n¨RetAgeDesc RetAgeScenDesc RetAgeScenNRA RetAgeScenLRA
[77]              descs←0⍴⊂''
[78]              :for ∆ :in spin Desc NRA LRA ⋄ (Desc NRA LRA)←DLTB¨∆
[79]                  :if ~mt NRA ⋄ str←'Specified Normal Retirement Age of ',NRA,(bGAD^~mt LRA)/' and Late Retirement Age of ',LRA
[80]                  :else       ⋄ str←Desc
[81]                  :endif
[82]                  descs←descs⍪⊂str
[83]              :endfor
[84]              array←array,descs
[85]          :case 'ParmsD'
[86]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨DRatesDesc DRatesScenDesc
[87]          :case 'ParmsW'
[88]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨SpouseDesc SpouseScenDesc
[89]          :case 'ParmsR'
[90]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨RetFactDesc RetFactScenDesc
[91]          :case 'ParmsT'
[92]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨CommTDesc CommTScenDesc
[93]          :case 'ParmsL'
[94]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨RetCashDesc RetCashScenDesc
[95]          :case 'ParmsS'
[96]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨SpDateDesc SpDateScenDesc
[97]          :case 'ParmsN'
[98]              array←array,,⊃0 0 1/GlobList AdjustPointers (⊂GlobList),m2n¨NEMDesc NEMScenDesc
[99]          :endselect
[100]         ScenGlobList←ScenGlobList amend set array
[101] 
[102]         curr←'Data'        'Fin'       'ParmsM'    'ParmsMS'   'ParmsI'                'ParmsX'         'ParmsD'     'ParmsW' 'ParmsR'             'ParmsT'             'ParmsL'          'ParmsS'          'ParmsN'
[103]         new ←'Scheme Data' 'Financial' 'Mortality' 'Mortality' 'Mortality Improvement' 'Retirement Age' 'Decrements' 'Spouse' 'Retirement Factors' 'Commutation Tables' 'Retirement Cash' 'Spreading Dates' 'New Entrants'
[104]         tab←Scenbasisnos for 'ParmSet' (↑(curr new) mapp ⊂set)
[105]         ID←(tab at 'Parm')⍳array[;1]
[106]         ScenBasisData←ScenBasisData OVER ((tab at 'ID')[ID]),¯1↑[2]array
[107]     :endfor
[108] :endif
    ∇
