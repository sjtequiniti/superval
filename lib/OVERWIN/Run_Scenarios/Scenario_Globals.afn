    ∇ type Scenario_Globals tab;newdesc;olddesc;rating;age;lifeexp;var;varname;z;list;select;RATING;DecP;fmt;desc;tPx;nra;lra;value;msk;FinScenValue
[1]   ⍝ OVERWIN.sf#29
[2]   ⍝ type is either 'Fin' 'ParmsM' (or ParmsMS') 'ParmsI' 'ParmsX' 'ParmsD' 'ParmsW' 'ParmsR' 'ParmsT' 'ParmsL' 'ParmsS' 'ParmsN' 'ParmsC'
[3]   ⍝ Swap pointer names for those required in the Scenario
[4]   ⍝  and adjust Mortality Table for % Rating or Life Expectancy change
[5]   
[6]   etherGlobals←0 2⍴'' (pack '')
[7]   
[8]   :select type
[9]   :case 'Fin'
[10]      FinScenValue←(z←~(m2n FinType)∊⊂'Constant')⌿(ScenRel/FinScenRel),ScenAbs/FinScenAbs ⋄ olddesc←z⌿FinDesc
[11]      (olddesc value                     )←(∨/' '≠   FinScenValue                                           )⌿¨    olddesc    FinScenValue
[12]      :if ScenRel
[13]          :if ~mt value←m2n value ⋄ :andif ∨/msk←~∨/¨(⊂'.CSV')⍷¨UPPERCASE¨value
[14]              (msk/value)←(⊂'/+-/-') TEXTREPL¨(⊂'/ / +') TEXTREPL¨'+',¨DLTMB¨msk/value
[15]          :endif
[16]          value←⊃value
[17]      :endif
[18]  :case 'RelNum'
[19]      FinScenValue←(z← (m2n FinType)∊⊂'Constant')⌿(ScenRel/FinScenRel),ScenAbs/FinScenAbs ⋄ olddesc←z⌿FinDesc
[20]      (olddesc value                     )←(∨/' '≠   FinScenValue                                           )⌿¨    olddesc    FinScenValue
[21]  :caselist 'ParmsM' 'ParmsMS'
[22]      (olddesc newdesc rating age lifeexp)←(∨/' '≠   MortScenDesc,MortScenRating,MortScenAge,MortScenLifeExp)⌿¨   MortDesc    MortScenDesc MortScenRating MortScenAge MortScenLifeExp
[23]  :case 'ParmsI'
[24]      (olddesc newdesc                   )←(∨/' '≠   MImpScenDesc                                           )⌿¨   MImpDesc    MImpScenDesc
[25]  :case 'ParmsX'
[26]      (olddesc newdesc nra    lra        )←(∨/' '≠ RetAgeScenDesc,RetAgeScenNRA,RetAgeScenLRA               )⌿¨ RetAgeDesc  RetAgeScenDesc RetAgeScenNRA  RetAgeScenLRA
[27]  :case 'ParmsD'
[28]      (olddesc newdesc                   )←(∨/' '≠ DRatesScenDesc                                           )⌿¨ DRatesDesc  DRatesScenDesc
[29]  :case 'ParmsW'
[30]      (olddesc newdesc                   )←(∨/' '≠ SpouseScenDesc                                           )⌿¨ SpouseDesc  SpouseScenDesc
[31]  :case 'ParmsR'
[32]      (olddesc newdesc                   )←(∨/' '≠RetFactScenDesc                                           )⌿¨RetFactDesc RetFactScenDesc
[33]  :case 'ParmsT'
[34]      (olddesc newdesc                   )←(∨/' '≠  CommTScenDesc                                           )⌿¨  CommTDesc   CommTScenDesc
[35]  :case 'ParmsL'
[36]      (olddesc newdesc                   )←(∨/' '≠RetCashScenDesc                                           )⌿¨RetCashDesc RetCashScenDesc
[37]  :case 'ParmsS'
[38]      (olddesc newdesc                   )←(∨/' '≠ SpDateScenDesc                                           )⌿¨ SpDateDesc  SpDateScenDesc
[39]  :case 'ParmsN'
[40]      (olddesc newdesc                   )←(∨/' '≠    NEMScenDesc                                           )⌿¨    NEMDesc     NEMScenDesc
[41]  :caselist 'ParmsC' 'ParmsP' 'ParmsY' 'ParmsK' 'ParmsO' 'ParmsA'
[42]      :return
[43]  :endselect
[44]  
[45]  :if ~mt olddesc
[46]      :for varname :in tab at 'Field'
[47]          :if mt var←⍎varname ⍝ Only non-blank entries
[48]          :orif ^/0=msk←∊⍴¨z←(⊂olddesc) ExactTLU¨m2n MATRIX var ⍝ that have a alternate value
[49]              :continue
[50]          :endif
[51]  
[52]          z←(∊↑¨z)~0
[53]          :if (⊂type)∊'Fin' 'RelNum'
[54]              :if 2=⍴⍴var
[55]                  :if isValn ⋄ ⍎'sCEN_',varname,'←⎕split sCEN_',varname,' ⋄ (msk/sCEN_',varname,')←⎕split value[z;] ⋄ sCEN_',varname,'←⊃sCEN_',varname ⋄ :endif
[56]                  :if ScenAbs
[57]                      ⍎'lr',varname,'←⎕split lr',varname,' ⋄ (msk/lr',varname,')←desc←(∨\¨desc∊¨⊂"{⋄") sel¨desc←msk/lr',varname
[58]                      :if type≡'RelNum'
[59]                          ⍎varname,'←⎕split ',varname
[60]                          ⍎'(msk/lr',varname,')←msk/',varname
[61]                          ⍎'(msk/',varname,')←desc'
[62]                          ⍎varname,'←⊃',varname
[63]                      :endif
[64]                      ⍎'lr',varname,'←⊃lr',varname
[65]                  :endif
[66]              :else
[67]                  :if isValn ⋄ ⍎'sCEN_',varname,'←DLTB value[z;]' ⋄ :endif
[68]                  :if ScenAbs
[69]                      ⍎'lr',varname,'←(∨\lr',varname,'∊"{⋄")/lr',varname
[70]                      :if type≡'RelNum' ⋄ ⍎'(',varname,' lr',varname,')←lr',varname,' ',varname ⋄ :endif
[71]                  :endif
[72]              :endif
[73]          :elseif ~mt DLTB newdesc[z;]
[74]              :if 2=⍴⍴var ⋄ ⍎varname,'←⎕split ',varname,' ⋄ (msk/',varname,')←m2n newdesc[z;] ⋄ ',varname,'←⊃',varname
[75]              :else       ⋄ ⍎varname,'←DLTB newdesc[z;]'
[76]              :endif
[77]          :endif
[78]  
[79]          z←↑z ⍝ Make scalar for remainder
[80]          :if (⊂type)∊'ParmsM' 'ParmsMS' ⋄ :andif ∨/' '≠rating[z;],age[z;]
[81]              select←∨/'[Select]'⍷var←DLTB ⍎varname
[82]              list←⍙VALUESdict ReadDictFile ('Mortality_Rate',select/'_Select') '' 'NAMES'
[83]              :if ↑ClientFile ReadModule  ('Mortality_Rate',select/'_Select') ((9×select)↓var) ((select/'Select '),'Mortality Rates') var 1
[84]                  :if ∨/' '≠rating[z;]
[85]                  :andif ~(⊂desc←'{Ether} ',var,' {adjusted by ',(DLTB rating[z;]),'%}')∊etherGlobals[;1]
[86]                      RATING←1+0.01×ZWB rating[z;]
[87]                  :elseif ∨/' '≠age[z;]
[88]                  :andif ~(⊂desc←'{Ether} ',var,' ',(DLTMB '{life expectancy adjusted by ',lifeexp[z;],' years at age ',age[z;]),'}')∊etherGlobals[;1]
[89]                      RATING←(ZWB¨(age[z;]) (lifeexp[z;])) Scenario_LifeExpAdj ¯1 DEC∆CHECK mtTABXX
[90]                  :endif
[91]                  ⍎varname,'←desc'
[92]                  :if ~(⊂desc)∊etherGlobals[;1]
[93]                      :if RATING=⌊RATING←100×¯1+RATING×1+0.01×ZWB mtTABXX[3;]
[94]                          fmt←'I20'
[95]                      :else
[96]                          DecP←0
[97]                          :repeat ⋄ DecP←DecP+1 ⋄ :until (RATING×10*DecP)≡⌊RATING×10*DecP
[98]                          fmt←'F',(⍕DecP+5),'.',⍕DecP
[99]                      :endif
[100]                     mtTABXX←mtTABXX[⍳2;] OVER DLTB ('LM<->P<+>',fmt) ⎕FMT RATING
[101]                     etherGlobals←etherGlobals OVER desc (pack list)
[102]                 :endif
[103]             :endif
[104]             0 0⍴⎕ex 'list'
[105]         :elseif type≡'ParmsX' ⋄ :andif ∨/' '≠nra[z;],lra[z;]
[106]             ⍎varname,'←""'
[107]             :if ∨/' '≠nra[z;] ⋄ ⍎(2↑varname),'NRA←DLTB nra[z;]'
[108]                 :if ~bGAD ⋄     ⍎(2↑varname),'LRA←DLTB nra[z;]' ⋄ :endif
[109]             :endif
[110]             :if bGAD ⋄ :andif ∨/' '≠lra[z;] ⋄ ⍎(2↑varname),'LRA←DLTB lra[z;]' ⋄ :endif
[111]         :endif
[112]     :endfor
[113] :endif
[114] 
[115] etherGlobals←etherGlobals[;1] push etherGlobals[;2] ⍝ Make up a ws dictionary of "adjusted" Globals
    ∇
