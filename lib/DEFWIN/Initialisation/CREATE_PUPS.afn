    ∇ CREATE∆PUPS;z;vars
[1]   ⍝ DEFWIN.sf#2
[2]   ⍝ Assign all the PUPs Variables
[3]   
[4]   pupmult←(pupfreq='ASQMLFW')/ 1 2 4 12 13 26.09 52.18
[5]   WARFRAC←,'Def' DescToVariableUK WARFRAC
[6]   
[7]   ⍝ Normal PUPs
[8]   z←1+z⍳¯1↑z←+\∨/' '≠PUP←'Def' DescToVariableUK PUP ⋄ PUP←z↑[0]PUP
[9]   :if 0≠↑z
[10]      sCEN_INDREV←,m2n sCEN_INDREV
[11]      :for z :in ⍳⍴INDREV←,m2n INDREV
[12]          :if ^/^/¨' '=z⊃¨INDREV sCEN_INDREV ⋄ INDREV[z]←⊂REVN
[13]          :else                              ⋄ INDREV[z]←⊂termAdjFin BlendRates z⊃¨INDREV sCEN_INDREV
[14]              FinAdjTable←FinAdjTable OVER ('INDREV[',(⍕z),']') ('INDREV[',(⍕z),']') (⊃INDREV[z])
[15]          :endif
[16]      :endfor
[17]  ⍝⍝⍝    sCEN_TVINDREV←,m2n sCEN_TVINDREV
[18]  ⍝⍝⍝    :for z :in ⍳⍴TVINDREV←,m2n TVINDREV
[19]  ⍝⍝⍝        :if ^/^/¨' '=z⊃¨TVINDREV sCEN_TVINDREV ⋄ TVINDREV[z]←⊂TVREVN
[20]  ⍝⍝⍝        :else                                  ⋄ TVINDREV[z]←⊂termAdjFin BlendRates z⊃¨TVINDREV sCEN_TVINDREV
[21]  ⍝⍝⍝            FinAdjTable←FinAdjTable OVER ('TVINDREV[',(⍕z),']') ('TVINDREV[',(⍕z),']') (⊃TVINDREV[z])
[22]  ⍝⍝⍝        :endif
[23]  ⍝⍝⍝    :endfor
[24]      INDWARFRAC←⊃(⊂WARFRAC,' '),¨⎕split 'Def' DescToVariableUK INDWARFRAC
[25]      INDDBRFRAC←⊃(⊂WOFRAC ,' '),¨⎕split 'Def' DescToVariableUK INDDBRFRAC
[26]      INDREVYRS←,(0 1,REVYRS)['NY '⍳,1↑[1]INDREVYRS]
[27]      :if ∨/z←^/' '=INDNRARND←SelectRounding INDNRARND
[28]          :for z :in z/⍳⍴z
[29]              INDNRARND[z;]←NRARND
[30]          :endfor
[31]      :endif
[32]      :if ∨/z←(∨/INDSTART='/')∨^/' '=INDSTART←StripText ConvertDates ⊃↑¨⌽¨(⊂'Date') SwapRelFields¨spin (m2n lrINDSTART) (m2n INDSTART)
[33]          :for z :in z/⍳⍴z
[34]              (⍕'DD/MM/YYYY' DATEEXP 10↑INDSTART[z;]) ASSIGN∆Dict 'INDSTART[',(⍕z),';]'
[35]          :endfor
[36]      :endif
[37]      INDSTART←,⎕split INDSTART
[38]      :if ∨/z←(∨/INDFINISH='/')∨^/' '=INDFINISH←StripText ConvertDates ⊃↑¨⌽¨(⊂'Date') SwapRelFields¨spin (m2n lrINDFINISH) (m2n INDFINISH)
[39]          :for z :in z/⍳⍴z
[40]              (⍕'DD/MM/YYYY' DATEEXP 10↑INDFINISH[z;]) ASSIGN∆Dict 'INDFINISH[',(⍕z),';]'
[41]          :endfor
[42]      :endif
[43]      INDFINISH←,⎕split INDFINISH
[44]      PUPADJ←,↑+/MatrixZWB¨sCEN_PUPADJ PUPADJ
[45]  
[46]      COO←~,'N'=1↑[1]COO
[47]      MOO←~,'N'=1↑[1]MOO
[48]      BARBIND←,(⍕('' 'ERF1' 'ERF2' '' 'Use Barber Start and End Dates')⍳m2n BARBIND)~' '
[49]      DYNIND←,' MS34'[('' 'Main Pension' 'Special Pension' 'Pension Increase 3' 'Pension Increase 4')⍳m2n DYNIND]
[50]      UNDIND←,(⍕('' 'Exclude' 'Include' '' 'Split According To Service')⍳m2n UNDIND)~' '
[51]  :endif
[52]  
[53]  ⍝⍝⍝ :if ppf ⋄ :orif bencap
[54]      PPFPAYINC←,(⍕1⌈('' 'Pre 97' '97 to 09' 'Post 09')⍳m2n PPFPAYINC)~' '
[55]      :if ppf
[56]          PPFNRA←,MatrixZWB PPFNRA
[57]      :endif
[58]  ⍝⍝⍝ :endif
[59]  
[60]  :if bencap
[61]      vars←'PUP INDREV INDWARFRAC INDDBRFRAC INDREVYRS INDNRARND INDSTART INDFINISH PUPADJ COO MOO BARBIND DYNIND UNDIND PPFPAYINC IGNOREPre IGNOREPost'
[62]      notNPCRpack←notNPCRpack pins pack vars
[63]      :if ~FID ⍝ Creates a PUP equal to each GMP for capped non-PPF runs
[64]          :if ~IGNOREPre
[65]              PUP←PUP OVER 'GMP0'
[66]              INDREV←INDREV,⊂REVN
[67]  ⍝⍝⍝            TVINDREV←TVINDREV,⊂TVREVN
[68]              INDWARFRAC←INDWARFRAC OVER WARFRAC
[69]              INDDBRFRAC←INDDBRFRAC OVER WOFRAC
[70]              INDREVYRS←INDREVYRS,REVYRS
[71]              INDNRARND←INDNRARND OVER NRARND
[72]              INDSTART←INDSTART,⊂PreSTART
[73]              INDFINISH←INDFINISH,⊂PreFINISH
[74]              PUPADJ←PUPADJ,1 ⍝ preADJ built into OrigGMPs
[75]              COO←COO,COOPre
[76]              :select MOOPre
[77]              :case 'N' ⋄ MOO←MOO,0
[78]              :case 'L' ⋄ MOO←MOO,~Male
[79]              :else     ⋄ MOO←MOO,1
[80]              :endselect
[81]              BARBIND←BARBIND,bpreIND
[82]              DYNIND←DYNIND,mpreIND
[83]              UNDIND←UNDIND,upreIND
[84]              PPFPAYINC←PPFPAYINC,'1'
[85]              IGNOREPre←1
[86]          :endif
[87]          :if ~IGNOREPost
[88]              PUP←PUP OVER 'GMPE0'
[89]              INDREV←INDREV,⊂REVN
[90]  ⍝⍝⍝            TVINDREV←TVINDREV,⊂TVREVN
[91]              INDWARFRAC←INDWARFRAC OVER WARFRAC
[92]              INDDBRFRAC←INDDBRFRAC OVER WOFRAC
[93]              INDREVYRS←INDREVYRS,REVYRS
[94]              INDNRARND←INDNRARND OVER NRARND
[95]              INDSTART←INDSTART,⊂PostSTART
[96]              INDFINISH←INDFINISH,⊂PostFINISH
[97]              PUPADJ←PUPADJ,1 ⍝ postADJ built into OrigGMPs
[98]              COO←COO,COOPost
[99]              MOO←MOO,~MOOPost∊'LN'
[100]             BARBIND←BARBIND,bpostIND
[101]             DYNIND←DYNIND,mpostIND
[102]             UNDIND←UNDIND,upostIND
[103]             PPFPAYINC←PPFPAYINC,'1'
[104]             IGNOREPost←1
[105]         :endif
[106]     :endif
[107]     isNPCRpack←isNPCRpack pins pack vars
[108] :endif
[109] 
[110] ⍝ Non-Standard PUPs
[111] DataDBR1←,'Def' DescToVariableUK DATADBR1
[112] PERCENTDBR1←0.01×zwb '100 ',PERCENTDBR1
[113] :if ^/' '=REVDBR1 ⋄ REVDBR1←REVN
[114] :else             ⋄ FinAdjTable←FinAdjTable OVER 'REVDBR1' 'REVDBR1' (REVDBR1←termAdjFin BlendRates REVDBR1 sCEN_REVDBR1)
[115] :endif
[116] ⍝⍝⍝    :if TVRevSame           ⋄ TVREVDBR1←REVDBR1
[117] ⍝⍝⍝    :elseif ^/' '=TVREVDBR1 ⋄ TVREVDBR1←TVREVN
[118] ⍝⍝⍝    :else                   ⋄ FinAdjTable←FinAdjTable OVER 'TVREVDBR1' 'TVREVDBR1' (TVREVDBR1←termAdjFin BlendRates TVREVDBR1 sCEN_TVREVDBR1)
[119] ⍝⍝⍝    :endif
[120] PreNRAEXITDBR1←(0 1,REVYRS)['NY '⍳↑PreNRAEXITDBR1]
[121] DYNDBR1←' MS34'[('' 'Main Pension' 'Special Pension' 'Pension Increase 3' 'Pension Increase 4')⍳⊂DLTB DYNDBR1]
[122] DBR1ADJ←+/ZWB¨sCEN_DBR1ADJ DBR1ADJ
[123] :if ppf ⋄ :orif bencap
[124]     PPFPAYINCDBR1←zwb PPFPAYINCDBR1
[125] ⍝⍝⍝    :if ppf ⋄ PPFNRADBR1←zwb PPFNRADBR1 ⋄ :endif ⍝ Don't exist yet
[126] :endif
[127] 
[128] DataDBR2←,'Def' DescToVariableUK DATADBR2
[129] PERCENTDBR2←0.01×zwb '100 ',PERCENTDBR2
[130] :if ^/' '=REVDBR2 ⋄ REVDBR2←REVN
[131] :else             ⋄ FinAdjTable←FinAdjTable OVER 'REVDBR2' 'REVDBR2' (REVDBR2←termAdjFin BlendRates REVDBR2 sCEN_REVDBR2)
[132] :endif
[133] ⍝⍝⍝    :if TVRevSame           ⋄ TVREVDBR2←REVDBR2
[134] ⍝⍝⍝    :elseif ^/' '=TVREVDBR2 ⋄ TVREVDBR2←TVREVN
[135] ⍝⍝⍝    :else                   ⋄ FinAdjTable←FinAdjTable OVER 'TVREVDBR2' 'TVREVDBR2' (TVREVDBR2←termAdjFin BlendRates TVREVDBR2 sCEN_TVREVDBR2)
[136] ⍝⍝⍝    :endif
[137] PreNRAEXITDBR2←(0 1,REVYRS)['NY '⍳↑PreNRAEXITDBR2]
[138] DYNDBR2←' MS34'[('' 'Main Pension' 'Special Pension' 'Pension Increase 3' 'Pension Increase 4')⍳⊂DLTB DYNDBR2]
[139] DBR2ADJ←+/ZWB¨sCEN_DBR2ADJ DBR2ADJ
[140] :if ppf ⋄ :orif bencap
[141]     PPFPAYINCDBR2←zwb PPFPAYINCDBR2
[142] ⍝⍝⍝    :if ppf ⋄ PPFNRADBR2←zwb PPFNRADBR2 ⋄ :endif ⍝ Don't exist yet
[143] :endif
[144] 
[145] DataDAR1←,'Def' DescToVariableUK DATADAR1
[146] PERCENTDAR1←0.01×zwb '100 ',PERCENTDAR1
[147] :if ^/' '=REVDAR1 ⋄ REVDAR1←REVN
[148] :else             ⋄ FinAdjTable←FinAdjTable OVER 'REVDAR1' 'REVDAR1' (REVDAR1←termAdjFin BlendRates REVDAR1 sCEN_REVDAR1)
[149] :endif
[150] ⍝⍝⍝    :if TVRevSame           ⋄ TVREVDAR1←REVDAR1
[151] ⍝⍝⍝    :elseif ^/' '=TVREVDAR1 ⋄ TVREVDAR1←TVREVN
[152] ⍝⍝⍝    :else                   ⋄ FinAdjTable←FinAdjTable OVER 'TVREVDAR1' 'TVREVDAR1' (TVREVDAR1←termAdjFin BlendRates TVREVDAR1 sCEN_TVREVDAR1)
[153] ⍝⍝⍝    :endif
[154] PreNRAEXITDAR1←(0 1,REVYRS)['NY '⍳↑PreNRAEXITDAR1]
[155] :if ^/' '=NRAEXITDAR1←,SelectRounding NRAEXITDAR1 ⋄ NRAEXITDAR1←NRARND ⋄ :endif
[156] ERFDAR1←↑⍕(('None' 'ERF1' 'ERF2')⍳⊂DLTB ERFDAR1)-⎕io
[157] DYNDAR1←' MS34'[('' 'Main Pension' 'Special Pension' 'Pension Increase 3' 'Pension Increase 4')⍳⊂DLTB DYNDAR1]
[158] DAR1ADJ←+/ZWB¨sCEN_DAR1ADJ DAR1ADJ
[159] :if ppf ⋄ :orif bencap
[160]     PPFPAYINCDAR1←zwb PPFPAYINCDAR1
[161] ⍝⍝⍝    :if ppf ⋄ PPFNRADAR1←zwb PPFNRADAR1 ⋄ :endif ⍝ Don't exist yet
[162] :endif
[163] 
[164] DataDAR2←,'Def' DescToVariableUK DATADAR2
[165] PERCENTDAR2←0.01×zwb '100 ',PERCENTDAR2
[166] :if ^/' '=REVDAR2 ⋄ REVDAR2←REVN
[167] :else             ⋄ FinAdjTable←FinAdjTable OVER 'REVDAR2' 'REVDAR2' (REVDAR2←termAdjFin BlendRates REVDAR2 sCEN_REVDAR2)
[168] :endif
[169] ⍝⍝⍝    :if TVRevSame           ⋄ TVREVDAR2←REVDAR2
[170] ⍝⍝⍝    :elseif ^/' '=TVREVDAR2 ⋄ TVREVDAR2←TVREVN
[171] ⍝⍝⍝    :else                   ⋄ FinAdjTable←FinAdjTable OVER 'TVREVDAR2' 'TVREVDAR2' (TVREVDAR2←termAdjFin BlendRates TVREVDAR2 sCEN_TVREVDAR2)
[172] ⍝⍝⍝    :endif
[173] PreNRAEXITDAR2←(0 1,REVYRS)['NY '⍳↑PreNRAEXITDAR2]
[174] :if ^/' '=NRAEXITDAR2←,SelectRounding NRAEXITDAR2 ⋄ NRAEXITDAR2←NRARND ⋄ :endif
[175] ERFDAR2←↑⍕(('None' 'ERF1' 'ERF2')⍳⊂DLTB ERFDAR2)-⎕io
[176] DYNDAR2←' MS34'[('' 'Main Pension' 'Special Pension' 'Pension Increase 3' 'Pension Increase 4')⍳⊂DLTB DYNDAR2]
[177] DAR2ADJ←+/ZWB¨sCEN_DAR2ADJ DAR2ADJ
[178] :if ppf ⋄ :orif bencap
[179]     PPFPAYINCDAR2←zwb PPFPAYINCDAR2
[180] ⍝⍝⍝    :if ppf ⋄ PPFNRADAR2←zwb PPFNRADAR2 ⋄ :endif ⍝ Don't exist yet
[181] :endif
[182] 
[183] (NRADBR1 NRADBR2 NRADAR1 NRADAR2)←4/NRA ⍝⍝⍝ Hidden 8.50 Variables used in Calculations
[184] 
[185] ⍝ Independent PUPs
[186] :if ~0∊⍴IndPUP←IndPUPs⌿'Def' DescToVariableUK IndPUP
[187]     z←1+z⍳¯1↑z←+\∨/' '≠IndPUP ⋄ IndPUP←z↑[0]IndPUP
[188]     sCEN_IndINDREV←,m2n sCEN_IndINDREV
[189]     :for z :in ⍳⍴IndINDREV←,m2n IndINDREV
[190]         :if ^/^/¨' '=z⊃¨IndINDREV sCEN_IndINDREV ⋄ IndINDREV[z]←⊂REVN
[191]         :else                                    ⋄ IndINDREV[z]←⊂termAdjFin BlendRates z⊃¨IndINDREV sCEN_IndINDREV
[192]             FinAdjTable←FinAdjTable OVER ('IndINDREV[',(⍕z),']') ('IndINDREV[',(⍕z),']') (⊃IndINDREV[z])
[193]         :endif
[194]     :endfor
[195] ⍝⍝⍝    sCEN_IndTVINDREV←,m2n sCEN_IndTVINDREV
[196] ⍝⍝⍝    :for z :in ⍳⍴IndTVINDREV←,m2n IndTVINDREV
[197] ⍝⍝⍝        :if ^/^/¨' '=z⊃¨IndTVINDREV sCEN_IndTVINDREV ⋄ IndTVINDREV[z]←⊂TVREVN
[198] ⍝⍝⍝        :else                                        ⋄ IndTVINDREV[z]←⊂termAdjFin BlendRates z⊃¨IndTVINDREV sCEN_IndTVINDREV
[199] ⍝⍝⍝            FinAdjTable←FinAdjTable OVER ('IndTVINDREV[',(⍕z),']') ('IndTVINDREV[',(⍕z),']') (⊃IndTVINDREV[z])
[200] ⍝⍝⍝        :endif
[201] ⍝⍝⍝    :endfor
[202]     IndINDWARFRAC←⊃(⊂WARFRAC,' '),¨⎕split 'Def' DescToVariableUK IndINDWARFRAC
[203]     IndINDREVYRS←,(0 1,REVYRS)['NY '⍳,1↑[1]IndINDREVYRS]
[204]     :if ∨/z←^/' '=IndINDNRARND←SelectRounding IndINDNRARND
[205]         :for z :in z/⍳⍴z
[206]             IndINDNRARND[z;]←NRARND
[207]         :endfor
[208]     :endif
[209]     :if ∨/z←(∨/IndINDSTART='/')∨^/' '=IndINDSTART←StripText ConvertDates ⊃↑¨⌽¨(⊂'Date') SwapRelFields¨spin (m2n lrIndINDSTART) (m2n IndINDSTART)
[210]         :for z :in z/⍳⍴z
[211]             (⍕'DD/MM/YYYY' DATEEXP 10↑IndINDSTART[z;]) ASSIGN∆Dict 'IndINDSTART[',(⍕z),';]'
[212]         :endfor
[213]     :endif
[214]     IndINDSTART←,m2n IndINDSTART
[215]     :if ∨/z←(∨/IndINDFINISH='/')∨^/' '=IndINDFINISH←StripText ConvertDates ⊃↑¨⌽¨(⊂'Date') SwapRelFields¨spin (m2n lrIndINDFINISH) (m2n IndINDFINISH)
[216]         :for z :in z/⍳⍴z
[217]             (⍕'DD/MM/YYYY' DATEEXP 10↑IndINDFINISH[z;]) ASSIGN∆Dict 'IndINDFINISH[',(⍕z),';]'
[218]         :endfor
[219]     :endif
[220]     IndINDFINISH←,m2n IndINDFINISH
[221] 
[222]     z←^/' '=IndPayStart ⋄ IndPayStart←'Def' DescToVariableUK IndPayStart,z\z/'⍬'
[223]     z←^/' '=IndPayEnd   ⋄ IndPayEnd  ←'Def' DescToVariableUK IndPayEnd  ,z\z/'⍬'
[224]     IndPUPADJ←,↑+/MatrixZWB¨sCEN_IndPUPADJ IndPUPADJ
[225]     IndBARBIND←,(⍕('' 'ERF1' 'ERF2' '' 'Use Barber Start and End Dates')⍳m2n IndBARBIND)~' '
[226]     IndDYNIND ←,' MS34'[('' 'Main Pension' 'Special Pension' 'Pension Increase 3' 'Pension Increase 4')⍳m2n IndDYNIND ]
[227]     IndDYNIND2←,' MS34'[('' 'Main Pension' 'Special Pension' 'Pension Increase 3' 'Pension Increase 4')⍳m2n IndDYNIND2]
[228]     IndUNDIND←,(⍕('' 'Exclude' 'Include' '' 'Split According To Service')⍳m2n IndUNDIND)~' '
[229] 
[230] ⍝⍝⍝     :if ppf ⋄ :orif bencap
[231]         IndPPFPAYINC←,(⍕1⌈('' 'Pre 97' '97 to 09' 'Post 09')⍳m2n IndPPFPAYINC)~' ' ⍝ M8336: default to 1 ←→ Pre97
[232]         :if ppf ⋄ IndPPFNRA←,MatrixZWB IndPPFNRA ⋄ :endif
[233] ⍝⍝⍝     :endif
[234] :endif
    ∇
