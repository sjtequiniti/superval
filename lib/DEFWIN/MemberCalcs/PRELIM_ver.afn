    ∇ PRELIM∆ver;QYdis∆l;QYret∆l;idx;PRE∆l;POST∆l;SPOST∆l;L0;DY1XXA;DY2XXA;DY1XX;DY2XX;QY∆l;penadj;REVDURN;revn;FreqAdj;∆;pup;adj;benID;TVQYret∆l[1]   ⍝ DEFWIN.sf#3[2]   ⍝ Sets up the Annuity Values[3]   ⍝[4]   ⍝[5]   ⍝ V Windows RSE Aug 98 "Windowised"[6]   ⍝ Execute Member Specific Parameters[7]   PreStart  ←⍎PreSTART[8]   PreFinish ←⍎PreFINISH[9]   PostStart ←⍎PostSTART[10]  PostFinish←⍎PostFINISH[11]    PRE∆l←1+0.01×ZWB   PREMEMB[12]   POST∆l←1+0.01×ZWB PPOSTMEMB[13]  SPOST∆l←1+0.01×ZWB SPOSTMEMB[14]  :if ~0∊⍴LEAVING ⋄ LeaveDate←⍎LEAVING ⋄ :endif[15]  :if GMPREV2 ⋄ FixedRate←,FIXEDRATE LeaveDate ⋄ :endif[16]  [17]  :if GMPORIGIN[18]      :if GMPREV2 ⋄ revn←FixedRate ⍝ Establish GMP revaluation basis[19]      :else       ⋄ revn←GMPREV1[20]      :endif[21]      RevalueGMPs ↑revn[22]  :endif[23]  [24]  pups←pupmult×,ZWB PUP[25]  :if ~bencap[26]         WARFRAC∆l ←,0.01×ZWB WARFRAC[27]         INDWARFrac←,0.01×ZWB INDWARFRAC[28]      IndINDWARFrac←,0.01×ZWB IndINDWARFRAC[29]      INDDBRFrac←,0.01×ZWB INDDBRFRAC[30]      :if ~mt INDSTART[31]          INDStart ←,⍎¨INDSTART[32]          INDFinish←,⍎¨INDFINISH[33]      :endif[34]  :else[35]      OrigGMPs←GMP0 GMPE0×preADJ postADJ[36]  :endif[37]  [38]  MultPENCASH ←ZWB MULTPENCASH  ⋄ PerPENCASH ←0.01×ZWB PERPENCASH  ⋄ COMADayPER←0.01×ZWB COMADayPer[39]  MultPENCASH2←ZWB MULTPENCASH2 ⋄ PerPENCASH2←0.01×ZWB PERPENCASH2 ⋄ COTData←ZWB COTDATA[40]  DConts1←ZWB DCONTS1 ⋄ DConts2←ZWB DCONTS2[41]  :if ∨/0≠Indpups←,IndPUPs×pupmult×ZWB IndPUP[42]      IndINDStart ←,⍎¨IndINDSTART[43]      IndINDFinish←,⍎¨IndINDFINISH[44]      IndPaySTART←,ZWB IndPayStart[45]      IndPayEND  ←,ZWB IndPayEnd[46]  :endif[47]  DATADBR1 ←ZWB DataDBR1 ⋄ DATADBR2 ←ZWB DataDBR2[48]  DATADAR1 ←ZWB DataDAR1 ⋄ DATADAR2 ←ZWB DataDAR2[49]  DATACASHCAP←∊ZWB DataCASHCAP[50]  [51]  AC0←ACW←ZWB REC[fACW] ⋄ AC←PAC0←0[52]  GMP0←GMP0×~IGNOREPre ⋄ GMPE0←GMPE0×~IGNOREPost[53]  data←6↑PAC0,GMP0,GMPE0 ⍝ UK Data Fields[54]  GMP0←GMP0×preADJ ⋄ GMPE0←GMPE0×postADJ[55]  [56]  lX←↑NX                              ⍝ [X] EXIT ages - ⍝??⍝ why not use scalar NX???[57]  [58]  :if 's'=PASTREV[59]      idx←0⌈¯1++/,RevDates∘.≤100⊥⍉⌽LeaveDate[60]      REVFAC←RevBase[prevind] CDIV RevValues[idx][61]  :elseif 'F'=PASTREV[62]      :if ~REVFAC←0=REVDURN←↑0⌈PASTREVNRND DURN LeaveDate,ValDATE[63]          REVFAC←(×/(⌊REVDURN)↑PASTREVN)×(↑(⌊REVDURN)↓PASTREVN)*REVDURN-⌊REVDURN[64]      :endif[65]  :else[66]      REVFAC←1[67]  :endif[68]  [69]  :if ⍙dbresults ⋄ :andif ~ppf[70]      ⍝ Store GMPs at Valuation Date[71]      ⍙dbbenres←⍙dbbenres⍪2,0,1,31,(⍬⍴dbXe),0,GMP0[72]      ⍙dbbenres←⍙dbbenres⍪3,0,1,31,(⍬⍴dbXe),0,GMPE0[73]      ⍝ Store PUPs at Valuation Date[74]      :for ∆ :in spin pups PUPADJ (4+'MS34'⍳DYNIND) ⋄ (pup adj benID)←∆[75]          ⍙dbbenres←⍙dbbenres⍪benID,0,1,31,(⍬⍴dbXe),0,(REVFAC×adj×pup)[76]      :endfor[77]      ⍙dbbenres←⍙dbbenres⍪31,0,1,31,(⍬⍴dbXe),0,(REVFAC×(PERCENTDBR1×DBR1ADJ×DATADBR1)+(PERCENTDBR2×DBR2ADJ×DATADBR2)+(PERCENTDAR1×DAR1ADJ×DATADAR1)+(PERCENTDAR2×DAR2ADJ×DATADAR2))[78]  :endif[79]  [80]  ⍝⍝⍝ ⍝ Pre Retirement Mortality Improvement[81]  ⍝⍝⍝ :if aosind  ⍝ Need to use Cur or Prev versions of mortality improvement if 2D Table[82]  ⍝⍝⍝    IVper←0⌈(¯1↑ValDATE)-¯1↑pvDATE[83]  ⍝⍝⍝    :if 1 ⍝⍝⍝prevind[84]  ⍝⍝⍝        :if MORTIMPR ='2' ⋄ PreImp  ←(⊂MATRIX(⎕io⊃AllPreImp  )[IVper;;]),1↓AllPreImp   ⋄ :endif[85]  ⍝⍝⍝        :if PMORTIMPR='2' ⋄ PostImpM←(⊂MATRIX(⎕io⊃AllPostImpM)[IVper;;]),1↓AllPostImpM ⋄ :endif[86]  ⍝⍝⍝        :if SMORTIMPR='2'[87]  ⍝⍝⍝            PostImpS←(⊂MATRIX(⎕io⊃AllPostImpS)[IVper;;]),1↓AllPostImpS[88]  ⍝⍝⍝            DisImp←(⊂MATRIX(⎕io⊃AllDisImp)[IVper;;]),1↓AllDisImp[89]  ⍝⍝⍝        :endif[90]  ⍝⍝⍝    :else[91]  ⍝⍝⍝        :if MORTIMPR ='2' ⋄ PreImp  ←CurPreImp   ⋄ :endif[92]  ⍝⍝⍝        :if PMORTIMPR='2' ⋄ PostImpM←CurPostImpM ⋄ :endif[93]  ⍝⍝⍝        :if SMORTIMPR='2'[94]  ⍝⍝⍝            PostImpS←CurPostImpS ⋄ DisImp←CurDisImp[95]  ⍝⍝⍝        :endif[96]  ⍝⍝⍝    :endif[97]  ⍝⍝⍝ :endif[98]  [99]  DXX∆l←(X0,DecPS) Dec∆Select DXX[100] ⍝⍝⍝ DXX∆l←PRE∆l×DXX∆l×(LatestAge+1) OVERTAKE MORTIMPR RedFact PreImp,X0[101] DXX∆l←PRE∆l×DXX∆l×(LatestAge+1) OVERTAKE (MORTIMPR aosterm) RedFactCalc PreImp,X0[102] :if ~s143[103] ⍝⍝⍝    QXret∆l←POST∆l×QXret×120 OVERTAKE PMORTIMPR RedFact PostImpM,X0[104]     QXret∆l←POST∆l×QXret×120 OVERTAKE (PMORTIMPR aosterm) RedFactCalc PostImpM,X0[105]     :if varyAge∆[106] ⍝⍝⍝        QYdis∆l←SPOST∆l×(59 120⍴QY)×59 120⍴SMORTIMPR RedFact DisImp  ,⊂X0+29-⍳59[107] ⍝⍝⍝        QYret∆l←SPOST∆l×(59 120⍴QY)×59 120⍴SMORTIMPR RedFact PostImpS,⊂X0+29-⍳59[108] ⍝⍝⍝        QY∆l←120 OVERTAKE (∣0⌊AGEDIF[X0])↓((0⌈AGEDIF[X0])⍴0),SPOST∆l×QY×120 OVERTAKE SMORTIMPR RedFact DisImpDID[109]         ∆←AGEDIF[X0][110]         QYdis∆l←SPOST∆l×QY×[1]59 120⍴(SMORTIMPR aosterm) RedFactCalc DisImp  ,⊂X0+29-⍳59[111]         QYret∆l←SPOST∆l×QY×[1]59 120⍴(SMORTIMPR aosterm) RedFactCalc PostImpS,⊂X0+29-⍳59[112]         QY∆l←120 OVERTAKE (∣0⌊∆)↓((0⌈∆)⍴0),SPOST∆l×QY×120 OVERTAKE (SMORTIMPR aosterm) RedFactCalc DisImpDID,X0-∆[113]     :else[114] ⍝⍝⍝        QYdis∆l←SPOST∆l×QY×120 OVERTAKE SMORTIMPR RedFact DisImp[115] ⍝⍝⍝        QYret∆l←SPOST∆l×QY×120 OVERTAKE SMORTIMPR RedFact PostImpS[116]         QYdis∆l←SPOST∆l×QY×120 OVERTAKE (SMORTIMPR aosterm) RedFactCalc DisImp  ,X0-AGEDIF[117]         QYret∆l←SPOST∆l×QY×120 OVERTAKE (SMORTIMPR aosterm) RedFactCalc PostImpS,X0-AGEDIF[118]         QY∆l←120 OVERTAKE (∣0⌊AGEDIF)↓((0⌈AGEDIF)⍴0),QYdis∆l[119]     :endif[120] [121]     :if ppf[122]         L0←34489[123]         DY1XXA   ←120↑L0×1,×\(1-QY∆l)×(120 OVERTAKE (X0⍴↑NDYNINC   ),NDYNINC   ) CDIV 120 OVERTAKE (X0⍴↑pi),pi[124]         DY2XXA   ←120↑L0×1,×\(1-QY∆l)×(120 OVERTAKE (X0⍴↑ DYNINC   ), DYNINC   ) CDIV 120 OVERTAKE (X0⍴↑pi),pi[125]         DY1XX   ←120↑MID DY1XXA[126]         DY2XX   ←120↑MID DY2XXA[127]         penadj←((FREQ+¯1+2×MODE)÷2×FREQ)-0.5[128] [129]         ⍝ Need figures for all NRAs for DID[130]         DA1∆l←penadj+X0↓(⌽+\⌽DY1XX) CDIV DY1XXA[131]         DA2∆l←penadj+X0↓(⌽+\⌽DY2XX) CDIV DY2XXA[132]     :endif[133] [134]     :if 0≠∆←1⊃KnownExit ⍝ Known Death[135]         :if ∆<0 ⍝ Died on or before Valn Date[136]             QXret∆l←120⍴0.99999[137]         :else[138]             FreqAdj←↑(FREQ+¯1+2×MODE)÷2×FREQ[139]             QXret∆l←(⍴QXret∆l) OVERTAKE ((X0+⌊∆)↑QXret∆l),(0.99999⌊(1-1∣∆)÷1-FreqAdj),0.99999[140]         :endif[141]     :endif[142] [143]     Memb∆Output←X0 dbX0 dbXe ENX LNX NX SNX "" ⍬ (⌈/X0,NRA∆G) DXX∆l (120⍴0) QXret∆l QYret∆l QYdis∆l (120⍴0) AGEDIF ""[144]     :if aggopt[0] ⋄ Memb∆All[⎕io+X0;]←Memb∆Output ⋄ :endif ⍝ Header row so move down one[145]     Memb∆Output←PREPARE_MembAPP Memb∆Output[146] [147]     :if transfers[148]         :if TVIgnoreDiD    ⋄ TVDXX∆l←(⍴DXX∆l)⍴0[149]         :elseif TVDPreSame ⋄ TVDXX∆l←  DXX∆l[150]         :else[151]             TVDXX∆l←(X0,DecPS) Dec∆Select TVDXX[152]             PRE∆l←1+0.01×ZWB TVPREMEMB[153]             TVDXX∆l←PRE∆l×TVDXX∆l×(LatestAge+1) OVERTAKE (TVMORTIMPR aosterm) RedFactCalc TVPreImp,X0[154]         :endif[155]         :if TVDPostSame ⋄ TVQXret∆l←QXret∆l[156]         :else[157]             POST∆l←1+0.01×ZWB TVPPOSTMEMB[158]             TVQXret∆l←POST∆l×TVQXret×120 OVERTAKE (TVPMORTIMPR aosterm) RedFactCalc TVPostImpM,X0[159]         :endif[160]         TVQXret∆l←(NRA↑TVDXX∆l),NRA↓TVQXret∆l[161]         :if TVSDPostSame ⋄ TVQYret∆l←QYret∆l[162]         :else[163]             SPOST∆l←1+0.01×ZWB TVSPOSTMEMB[164]             :if varyAge∆[165]                 ∆←TVAGEDIF[X0][166]                 TVQYret∆l←SPOST∆l×TVQY×[1]59 120⍴(TVSMORTIMPR aosterm) RedFactCalc TVPostImpS,⊂X0+29-⍳59[167]             :else[168]                 TVQYret∆l←SPOST∆l×TVQY×120 OVERTAKE (TVSMORTIMPR aosterm) RedFactCalc TVPostImpS,X0-TVAGEDIF[169]             :endif[170]         :endif[171] [172]         Memb∆Transfers←X0 dbX0 dbXe ENX LNX NX SNX "" ⍬ (⌈/X0,NRA∆G) (120⍴0) (120⍴0) TVQXret∆l TVQYret∆l (120⍴0) (120⍴0) TVAGEDIF ""[173]         :if aggopt[0] ⋄ Memb∆TransAll[⎕io+X0;]←Memb∆Transfers ⋄ :endif ⍝ Header row so move down one[174]         Memb∆Transfers←PREPARE_MembAPP Memb∆Transfers[175]     :endif[176] :endif[177] [178] :if ~NoInd ⍝ Member details in headers[179]     H0[2;(23+⍳10),40,(,47+⍳10),, 105 124 ∘.+⍳7]←H1[2;(23+⍳10),40,(,47+⍳10),, 105 124∘.+⍳7]←(10↑NAME),SEX,(,SDATE DOB),,'CI7' ⎕FMT GMP0,GMPE0[180] :endif[181] [182] capflag←0[183] :if ppf[184]     OffCap←0.01×ZWB OFFCAP[185]     PPF∆ageadj←X0=⌊100∣(dfDOB DATEEXP REC[fDOB])YDAYS ValDATE ⍝ Means that age exact is more than age nearest[186]     v09←ppfI20*-⍳NX[187]     v09MP←ppfI20*-NX_1⌊0.5+⍳NX[188]     DXX∆PPF∆l←(X0,DecPS) Dec∆Select DXX∆PPF[189] ⍝⍝⍝    DXX∆PPF∆l←DXX∆PPF∆l×(⍴DXX∆PPF∆l) OVERTAKE MORTIMPR RedFact PreImp,X0[190]     DXX∆PPF∆l←DXX∆PPF∆l×(⍴DXX∆PPF∆l) OVERTAKE (MORTIMPR 0) RedFactCalc PreImp,X0[191] :endif[192] [193] :if ppf∨bencap ⋄ :andif PPFServiceCap[194]      PPFCAP←ppfcap×2⌊1+0.03×⌊0⌈((⍎PPFServCapBDate) YDAYS ⍎PPFServCapEDate)-20[195] :endif    ∇