    ∇ wPUP_LOOP2_TRACE2;hasCOT;hasCOM;PUP_iCom;GMPN_iCom;PUP_iPen;GMPN_iPen;gtr;GMPR;formula;com_method;com_fac;∆;com_capped;cot_revn;cot_erf;cot_base;cot_method;cot_fac;com_cashben;com_maxavail;com_ADaypc[1]   ⍝ DEFWIN.sf#9[2]   ⍝ Write second part of trace file for member, after calculating cash benefits[3]   ⍝ v8.50 DT/SJT summer 2010 [Enhanced Deferreds] OO/KS/SJT spring 2011[4]   ⍝ reads ext vars localised to calling fn wPUP_LOOP2[5]   ⍝ also trace vars captured in TRACE∆V[6]   ⍝ ⎕IO=0[7]   [8]   TRACE_BOOKMARK 'Retirement'[9]   TRACE_Def 'h1' xtag 'Retirement' ⍝ .............................................[10]  [11]  (hasCOT hasCOM)←1∊¨×COTCASH COMCASH                                         ⍝ same criteria used to choose whether to process SV5000228[12]  [13]  :If ∨/hasCOT,hasCOM[14]      :If cap≡⌊/⍬[15]          TRACE_Def 'p' xtag 'No cash cap set'[16]      :Else[17]          'Cash cap parameters' TRACE_Def ⊃('DATACASHCAP' '* PERCENTCASHCAP')(DATACASHCAP PERCENTCASHCAP)[18]          'Cash cap'            TRACE_Def 'age' 'revaln' 'ERF' 'cap'⍪ X, (PP rnd caprev,[.5] caperf), rnd cap[19]      :EndIf[20]  [21]      ('ComTab: ',sex,' cash commutation factors')             TRACE_Def IHEAD⍪          X,comtab[22]  :EndIf[23]  [24]  :If ∨/hasCOT[25]  [26]      TRACE_Def 'h2' xtag 'Cash on top'[27]  [28]      :Select ↑⍴⍴COTCASH[29]  [30]      :Case 2 ⍝ COT derived from COTDATA, not analysed by increase-rate SV5000165[31]  [32]          (cot_revn cot_erf cot_base)←'cot_revn' 'cot_erf' 'cot_base' zip TRACE∆V[33]  [34]          TRACE_Def 'p' xtag 'COTDATA: ',⍕COTData[35]          :If cap≡⌊/⍬                                                         ⍝ SV5000212[36]              ∆←'age' 'revn' 'ERF'                              'CotCsh'[37]              'Cash-on-top at retirement'                     TRACE_Def ∆⍪              X,(.0001 rnd cot_revn,[.5]cot_erf),rnd              ⍉COTCASH[iWho;][38]          :Else[39]              ∆←'age' 'revn' 'ERF' 'COTDATA x revn x ERF' 'cap' 'CotCsh'[40]              'Cash-on-top at retirement'                     TRACE_Def ∆⍪              X,(.0001 rnd cot_revn,[.5]cot_erf),rnd cot_base,cap,⍉COTCASH[iWho;][41]          :EndIf[42]  [43]      :Case 3[44]          (cot_fac cot_method)←'cot_fac' 'cot_method' zip TRACE∆V[45]  [46]          'PenC4C: Pension considered for cash on top'        TRACE_Def IHEAD          ⍪X,   rnd ⍉+/PRE[;↑iWho;↑iCot;↑iRet;;↑iWth;] ⍝ may include traces of GMP[47]  [48]          :Select cot_method[49]          :Case 'multiple'[50]              formula←(⍕cot_fac),' x PenC4C'[51]          :Case 'percentage'[52]              ∆←IHEAD ,[¯.5] (⊂''),comtnms[53]              ('ComTab: ',sex,' cash commutation tables')     TRACE_Def ∆⍪              X,       comtab[54]              formula←(⍕cot_fac×100),'% of commuted PenC4C'[55]          :EndSelect[56]  [57]          :if ppf ⋄ :orif isNPCR ⋄ 'COTCASH: Cash on top'     TRACE_Def(PHEAD,⊂'total')⍪X,   rnd COTCASH[↑iWho;;],+/COTCASH[↑iWho;;][58]          :else                  ⋄ 'COTCASH: Cash on top'     TRACE_Def(IHEAD,⊂'total')⍪X,   rnd COTCASH[↑iWho;;],+/COTCASH[↑iWho;;][59]          :endif[60]      :EndSelect[61]  [62]  :EndIf[63]  [64]  :If ∨/hasCOM[65]    ∆←'com_method' 'com_fac' 'PUP_iPen' 'GMPN_iPen' 'gtr' 'PUP_iCom' 'GMPN_iCom' 'com_cashben' 'GMPR' 'com_maxavail' 'com_capped' 'com_ADaypc'[66]      (com_method   com_fac   PUP_iPen   GMPN_iPen   gtr   PUP_iCom   GMPN_iCom   com_cashben   GMPR   com_maxavail   com_capped   com_ADaypc)←∆ zip TRACE∆V[67]  [68]      TRACE_Def 'h2' xtag 'Commute retirement pension rights from all PUPs to cash'[69]  [70]      TRACE_Def 'p'  xtag 'FID: ',FID⊃'No' 'Yes'[71]  [72]      :If FID[73]          'Mark where excess exceeds notional GMP'              TRACE_Def 'age' 'excess' 'GMPN' 'gtr'⍪X,(rnd⍉⊃+/¨PUP_iPen GMPN_iPen),('FALSE' 'TRUE')[⎕io+gtr] ⍝ SV5000238[74]      :EndIf[75]  [76]      'PUP_iCom: Excess to be considered for cash'              TRACE_Def IHEAD⍪          X,   rnd PUP_iCom[77]      'GMPN_iCom: Notional GMP to be considered for cash'       TRACE_Def IHEAD⍪          X,   rnd GMPN_iCom[78]  [79]  [80]      TRACE_Def 'h2' xtag 'Limit to cash benefits derived from method'[81]  [82]      :Select com_method[83]      :Case 'multiple'[84]          formula←(⍕com_fac),' x PenC4C'[85]      :Case 'percentage'[86]          ('commutation tables') TRACE_Def IHEAD ,[¯.5] (⊂''),comtnms[87]          formula←(⍕com_fac×100),'% of commuted PenC4C'[88]      :Case 'ADay'[89]          ('commutation tables') TRACE_Def IHEAD ,[¯.5] (⊂''),comtnms[90]          ('A-Day commutation factors') TRACE_Def IHEAD⍪X,rnd com_fac[91]          formula←(⍕com_ADaypc×100),'% of A-Day commutation factors of commuted PenC4C'[92]      :EndSelect[93]      TRACE_Def 'p' xtag 'Method limits commutation to ',formula[94]  [95]      ∆←((⊂com_method)∊'percentage' 'ADay')/' x ComTab'[96]      ('cashben: (PUP_iCom+GMPN_iCom) x fac',∆)                 TRACE_Def IHEAD⍪          X,   rnd com_cashben[97]  [98]      :If ~cap≡⌊/⍬                                                                                    ⍝ SV5000212[99]          'Cash cap'                                            TRACE_Def 'age' 'cap'⍪    X,[.5] rnd cap  ⍝ SV5000211[100]         'Capped: cashben limited by the cash cap'             TRACE_Def IHEAD⍪          X,   rnd com_capped[101]     :EndIf[102] [103] [104]     TRACE_Def 'h2' xtag 'Limit cash benefits so as to leave GMP funded'[105]     :If FID[106] ⍝⍝          'Max: max(PUP_iCom,GMPN_iCom);PUP_iPen>GMPR'          TRACE_Def (IHEAD,⊂'')⍪    X,  (rnd PUP_iCom⌈GMPN_iCom),('FALSE' 'TRUE')[↑>/+/¨PUP_iPen GMPR] ⍝ SV5000239[107]         ⍝ see Jan13 email thread V9.00 Deferreds test member crash[108]         ∆←'Pension>GMPR'[109]         'Max: max(PUP_iCom,GMPN_iCom);PUP_iPen>GMPR'          TRACE_Def (IHEAD,⊂∆)⍪     X,  (rnd PUP_iCom⌈GMPN_iCom),('FALSE' 'TRUE')[⎕io+↑>/+/¨PUP_iPen GMPR] ⍝ SV5000239[110]     :Else[111]         'Max: PUP_iPen+GMPN_iPen'                             TRACE_Def IHEAD⍪          X,   rnd PUP_iPen+GMPN_iPen[112]     :EndIf[113]     'maxavail: Max x ComTab'                                  TRACE_Def IHEAD⍪          X,   rnd com_maxavail[114] [115] [116] [117] ⍝       TRACE_Def 'p' xtag 'Need to provide for GMP limits commutation'[118] ⍝[119] ⍝       'Net GMP (notional-real)'                                 TRACE_Def IHEAD⍪          X,   rnd netgmp[120] ⍝       ∆←(method≡'multiple')/'comtab x '[121] ⍝       ('Maxavail: ',∆,'Excess + Net GMP')                       TRACE_Def IHEAD⍪          X,   rnd maxavail[122] ⍝       :If ~maxav≡maxavail ⋄ 'Removing negatives'                TRACE_Def IHEAD⍪          X,   rnd maxav    ⋄ :EndIf[123] [124] [125]     TRACE_Def 'h3' xtag 'Calculating the post-commutation pension'[126] ⍝       TRACE_Def 'p'  xtag 'Commuting across increase rates ',('PR'⍳↑CASHP)⊃'pro rata' 'by priority'[127]     :if ClntCode=3 ⋄ :orif bBuck[128]         ∆←('PRD'⍳CASHP)⊃'pro rata' 'by priority' 'by A-Day factors'[129]     :else[130]         ∆←                         'by priority' ⍝ no choice[131]     :endif[132]     TRACE_Def 'p'  xtag 'Commuting across increase rates ',∆[133] [134]     'ComCsh: Cash from commutation'                           TRACE_Def(IHEAD,⊂'total')⍪X,   rnd COMCASH[↑iWho;;],+/COMCASH[↑iWho;;][135]     'PenCom: Pension commuted to cash<br/>ComCsh/ComTab'      TRACE_Def IHEAD⍪          X,   rnd commuted[↑iWho;;][136]     'PrePen: Pre-commutation pension'                         TRACE_Def IHEAD⍪          X,   rnd (aAGE aINC)SUMSOF PRE[;iWho;iPen;iRet;;iWth;][137]     'fCom: fraction commuted<br/>PenCom/PrePen'               TRACE_Def IHEAD⍪          X,PP rnd fcom[↑iWho;;][138] ⍝       'Total pension post-commutation<br/>PrePen*(1-fCom)'      TRACE_Def IHEAD⍪          X,   rnd (aAGE aINC)SUMSOF POSTP[;iWho;iPen;iRet;;][139] [140] :EndIf[141] [142] 'Total pension at retirement'                                 TRACE_Def IHEAD⍪          X,   rnd (aAGE aINC)SUMSOF POSTP[;iWho;iPen;iRet;;][143] [144] [145] ⍝   :If ×udate ⍝ ...............................................................[146] :If ∨/hasCOM,hasCOT ⍝ ......................................................[147] [148]     TRACE_BOOKMARK 'Underpin'[149]     TRACE_Def 'h1' xtag 'Underpinned benefits at retirement'[150] [151] ⍝       'PenC4C: Whole pension considered for cash'                          TRACE_Def IHEAD⍪          X,   rnd whole←(aAGE aINC)SUMSOF PRE[;iWho;iCon;iRet;;iWth;][152] ⍝       'PenC4Cu: Underpinned pension considered for cash'                   TRACE_Def IHEAD⍪          X,   rnd under←(aAGE aINC)SUMSOF PRE[;iUnd;iCon;iRet;;iWth;][153] ⍝       'Underpinned fraction considered for cash<br/>PenC4C/PenC4Cu'        TRACE_Def IHEAD⍪          X,PP rnd ufrac←under CDIV whole[154] [155]     :If ∨/hasCOT[156]         'Pen4COT: Whole pension considered for cash on top'             TRACE_Def IHEAD⍪          X,   rnd whole←(aAGE aINC)SUMSOF PRE[;iWho;iCom;iRet;;iWth;][157]         'Pen4COTu: Underpinned pension considered for cash on top'      TRACE_Def IHEAD⍪          X,   rnd under←(aAGE aINC)SUMSOF PRE[;iUnd;iCom;iRet;;iWth;][158]         'Underpinned fraction considered for cash<br/>Pen4COT/Pen4COTu' TRACE_Def IHEAD⍪          X,PP rnd ufrac←under CDIV whole[159]         :Select ↑⍴⍴COTCASH[160]         :Case 2[161]             TRACE_Def 'p' xtag 'Cash-on-top is from COTDATA; none of this is underpinned'[162]         :Case 3[163]             :if ppf ⋄ :orif isNPCR[164]                 'Whole cash-on-top'                                     TRACE_Def PHEAD⍪          X,   rnd COTCASH[↑iWho;;][165]                 'Underpinned cash-on-top'                               TRACE_Def PHEAD⍪          X,   rnd COTCASH[↑iUnd;;][166]             :else[167]                 'Whole cash-on-top'                                     TRACE_Def IHEAD⍪          X,   rnd COTCASH[↑iWho;;][168]                 'Underpinned cash-on-top'                               TRACE_Def IHEAD⍪          X,   rnd COTCASH[↑iUnd;;][169]             :endif[170]         :EndSelect[171]     :EndIf[172] [173]     :If ∨/hasCOM[174] [175]         'Pen4COM: Whole pension considered for cash'                     TRACE_Def IHEAD⍪          X,   rnd whole←(aAGE aINC)SUMSOF PRE[;iWho;iCom;iRet;;iWth;][176]         'Pen4COMu: Underpinned pension considered for cash'              TRACE_Def IHEAD⍪          X,   rnd under←(aAGE aINC)SUMSOF PRE[;iUnd;iCom;iRet;;iWth;][177]         'Underpinned fraction considered for cash<br/>Pen4COM/Pen4COMu'  TRACE_Def IHEAD⍪          X,PP rnd ufrac←under CDIV whole[178]         'Cash commuted from whole pension'                               TRACE_Def IHEAD⍪          X,   rnd COMCASH[↑iWho;;][179]         'Cash commuted from underpinned pension'                         TRACE_Def IHEAD⍪          X,   rnd COMCASH[↑iUnd;;][180] [181]     :EndIf[182] [183]     'Total underpinned pension at retirement'                            TRACE_Def IHEAD⍪          X,   rnd (aAGE aINC)SUMSOF POSTP[;iUnd;iPen;iRet;;] ⍝ [IUTDXP][184] [185] :EndIf    ∇