    ∇ Z←L zip R;keys;vals;hasL;xxx;∆;kys;newv;newk;dep;find;ind[1]   ⍝ DEFWIN.sf#4[2]   ⍝ NDFBEN.8 V8.50 [EnhDef] SJT oct2010[3]   ⍝ emulate simple PHP-style keyed arrays[4]   ⍝ keys are character vectors[5]   ⍝ usage:[6]   ⍝                     Z ←               zip (key val)(key val)...[7]   ⍝                     Z ←             Z zip (key val)(key val)...[8]   ⍝ (key val)(key val)... ←               zip Z[9]   ⍝ (val val ...)         ← (key key ...) zip Z[10]  ⍝  val                  ←  key          zip Z[11]  [12]  hasL←×⎕NC 'L'[13]  :If isZip R                                 ⍝ R is a zip[14]  [15]      (xxx keys vals)←R[16]      :If hasL[17]      :AndIf (dep←≡,L)∊1 2                    ⍝ are strings[18]          find←(1 2⍳dep)⊃(⊂,L)(,¨L)[19]          :If (⍴keys)^.≥(ind←keys⍳find)+~⎕IO  ⍝ are keys[20]              Z←(1 2⍳dep)⊃(↑∆)(∆←vals[ind])   ⍝ return value/s[21]          :Else[22]              ⎕ERROR 'INDEX ERROR'[23]          :EndIf[24]      :Else[25]          Z←⊂[⎕IO] ⊃keys vals                 ⍝ return key/value pairs[26]      :EndIf[27]  [28]  :ElseIf 2^.=↑¨⍴¨R                           ⍝ are pairs[29]  :AndIf 2=≡,¨↑¨R                             ⍝ in which first elements are strings[30]  [31]      (newk newv)←⊂[⎕IO]⊃R                    ⍝ new keys and values[32]      :If hasL[33]          :If isZip L[34]              (xxx keys vals)←L               ⍝ prior keys and values[35]          :Else[36]              ⎕ERROR 'DOMAIN ERROR'[37]          :EndIf[38]      :Else[39]          (keys vals)←'' ⍬[40]      :EndIf[41]      Z←(⊂'zip:'),((∆⍳∆)=⍳⍴∆←newk,,¨keys)/¨(,¨newk,keys)(newv,vals)[42]  [43]  :Else[44]      ⎕ERROR 'DOMAIN ERROR'[45]  :EndIf    ∇