∇ Container←Form_Make;⎕wself;ControlName;childlist;list;Fieldlist;Fieldcontrol;FrameWidth;Caption;buttonsize;buttonwhere;where;size;alignment;Header;PickList;NameList;value;sortorder;SortList;MaxRow;MaxCol;Parent;level;node;no;nn;NN;x;fnsize;framelist;relTests[1] [2] Fieldlist←Fieldcontrol←list←0 0⍴""[3] "fmSV" ⎕wi "pointer" 13[4] buttonsize←25 65 ⋄ buttonwhere←¯5[5] FormName ⎕wi "caption" ((FormName ⎕wi "caption")," - Licence Key Creation")[6] "fmSV" ⎕wi "∆caption" (("fmSV" ⎕wi "∆caption"),⊂("fmSV" ⎕wi "caption"))[7] :if 300<fnsize←1↑⍴⎕cr "Form_Make"[8]     "Generating Form" Win∆ProgressBar "Open"[9]     ("Menu Items:" "Form Controls:") Win∆ProgressBar "SetLabels"[10]     (1 1 "Help About") Win∆ProgressBar "FileUpdate"[11] :endif[12] [13] Container←"∆Dialog"[14] [15] ⎕wself←"fmKeyCreate" ⎕wi "New" "Form" "Hide"[16] ⎕wi "caption" ("fmSV" ⎕wi "caption")[17] ⎕wi "scale" 5[18] ⎕wi "font" ("fmSV" ⎕wi "font")[19] ⎕wi "border" 2 32 64[20] ⎕wi "where" (Win∆CentrePos .80 .80×768 1024×1⌈CharSize÷13 6)[21] ⎕wi "limitwhere" (0.8×¯2↑⎕wi "where")[22] ⎕wi "tooltipwidth" 200[23] ⎕wi "onResize" "AutoResize"[24] ⎕wi "onClose" "ExitSystem ''"[25] ControlName←"fmKeyCreate"[26] relTests←0[27] 0 Menu_Make "fmSV"[28] 0 Menu_Make "fmKeyCreate"[29] "fmKeyCreate" Win∆CutCopyPaste "Build"[30] list←list OVER "fmKeyCreate.bnKey_CreationQuit"[31] ⎕wself←"fmKeyCreate.bnKey_CreationQuit" ⎕wi "New" "Button"[32] ⎕wi "style" 2[33] ⎕wi "deferexit" 1[34] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[35] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][36] ⎕wi "∆where" ((x,2)⍴where)[37] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize ⎕wi "∆where")[38] ⎕wi "tooltip" "Cancel and Return"[39] ⎕wi "onClick" ("fmSV.mKey_CreationFile.mQuit"⎕wi "onClick")[40] ⎕wi "caption" "Cancel"[41] ⎕wi "order" .5[42] ⎕wi "visible" ¯1[43] list←list OVER "fmKeyCreate.bnKey_CreationSave"[44] ⎕wself←"fmKeyCreate.bnKey_CreationSave" ⎕wi "New" "Button"[45] ⎕wi "style" 1[46] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[47] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][48] ⎕wi "∆where" ((x,2)⍴where)[49] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize ⎕wi "∆where")[50] ⎕wi "tooltip" "Save Parameters"[51] ⎕wi "onClick" ("fmSV.mKey_CreationFile.mSave"⎕wi "onClick")[52] ⎕wi "caption" "OK"[53] ⎕wi "order" .5[54] ⎕wi "visible" ¯1[55] "fmKeyCreate" ⎕wi "∆modified" 1[56] [57] ⎕wself←"fmKeyCreate.edCompanyName" ⎕wi "New" "Edit"[58] Fieldlist←Fieldlist OVER "fmKeyCreate.edCompanyName"[59] Fieldcontrol←Fieldcontrol OVER "Edit"[60] ⎕wi "∆name" "CompanyName"[61] ⎕wi "∆type" "Char"[62] ⎕wi "∆mandatory" 1[63] ⎕wi "tooltip" "Specifies the Client Name"[64] ⎕wi "∆where" (2 2⍴0.05 0 0.4 0)[65] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.05 0 0.4 0))[66] ⎕wi "onExit" "⍎(0∊⍴,⎕wres←0 INPUT∆CHECK 'fmKeyCreate.edCompanyName')/'0 0⍴(⊂⎕wi ''name'') Key_Creation ''Change'' ' "[67] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[68] ⎕wi "extent" (2+CharSize×1 41)[69] [70] ⎕wself←"fmKeyCreate.llCompanyName" ⎕wi "New" "Label"[71] ⎕wi "scale" 5[72] ⎕wi "style" 2[73] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Client Name"))[74] ⎕wi "caption" "Client Name"[75] where←4↑,"fmKeyCreate.edCompanyName" ⎕wi "∆where"[76] x←0.5×⍴where←Win∆Calcwhere where-0 ¯3 0,10+¯1↑⎕wi "extent"[77] ⎕wi "∆where" ((x,2)⍴where)[78] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize ⎕wi "∆where")[79] PickList←⍙POPUPSdict ReadDictFile "ClntCode"[80] :if 0∊⍴,Header←"Client Code" ⋄ Header←DLTB PickList[1;] ⋄ :endif[81] no←1↑⍴PickList←1 0↓PickList[82] [83] ⎕wself←"fmKeyCreate.fukcLNTcODE" ⎕wi "New" "Frame"[84] ⎕wi "scale" 5[85] ⎕wi "∆where" (4 2⍴0.15 0 0.2 0 0.2 0 0.2 0)[86] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (4 2⍴0.15 0 0.2 0 0.2 0 0.2 0))[87] ⎕wi "caption" "Client Code"[88] ⎕wi "style" 0[89] ⎕wi "onResize" "AutoResize"[90] ⎕wi "tooltip" "Specifies the Client Code"[91] [92] where←(0×1 0 1 0\0.15 0.2 )+0 1 0 1\25,10×1[93] alignment←1 0 ⋄ FrameWidth←10+¯1↑Win∆TextSize Header[94] :for nn :in ⍳no[95]     ⎕wself←(Name←"fmKeyCreate.fukcLNTcODE.opukcLNTcODE_",⍕nn) ⎕wi "New" "Option"[96]     :if nn=1 ⋄ ⎕wi "∆lastoption" ("fmKeyCreate.fukcLNTcODE.opukcLNTcODE_",⍕no) ⋄ :endif[97]     size←0.5×⍴x←Win∆Calcwhere where[98]     x←(size,2)⍴x[99]     ⎕wi "∆where" x[100]     ⎕wi "where" (("fmKeyCreate.fukcLNTcODE" ⎕wi "size") Win∆Resize x)[101]     ⎕wi "caption" (Caption←DLTB PickList[nn;])[102]     FrameWidth←FrameWidth⌈10+¯1↑size←0 25+Win∆TextSize Caption[103]     where←where+0 1 0 1\alignment×10 20+size[104]     ⎕wi "extent" size[105]     ⎕wi "tooltip" "Specifies the Client Code"[106]     ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[107] :endfor[108] ⎕wi "∆type" "Option"[109] ⎕wi "∆mandatory" 1[110] ⎕wi "∆name" "ukcLNTcODE"[111] ⎕wi "∆options" "⍺Client Code 0 ⍺Client Code 3"[112] Fieldlist←Fieldlist OVER Name[113] Fieldcontrol←Fieldcontrol OVER "Option"[114] :if 1[115]     ⎕wself←"fmKeyCreate.fukcLNTcODE"[116]     size←0.5×⍴x←Win∆Calcwhere 0.15 0 0.2 0,0 1 0 1×where+(2/⌽alignment)×0 25 0,FrameWidth[117]     x←(size,2)⍴x[118]     ⎕wi "∆where" x[119]     ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize x)[120] :endif[121] [122] ⎕wself←"fmKeyCreate.ckeXACTvAL" ⎕wi "New" "Check"[123] Fieldlist←Fieldlist OVER "fmKeyCreate.ckeXACTvAL"[124] Fieldcontrol←Fieldcontrol OVER "Check"[125] ⎕wi "∆name" "eXACTvAL"[126] ⎕wi "∆type" "Check"[127] ⎕wi "tooltip" "Indicates if ExactVal Version (with ClntCode Switch) is required"[128] ⎕wi "style" 0[129] ⎕wi "caption" "ExactVal Version"[130] ⎕wi "∆where" (2 2⍴0.4 0 0.2 0)[131] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.4 0 0.2 0))[132] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[133] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[134] [135] ⎕wself←"fmKeyCreate.ckgadMODULE" ⎕wi "New" "Check"[136] Fieldlist←Fieldlist OVER "fmKeyCreate.ckgadMODULE"[137] Fieldcontrol←Fieldcontrol OVER "Check"[138] ⎕wi "∆name" "gadMODULE"[139] ⎕wi "∆type" "Check"[140] ⎕wi "tooltip" "Indicates if GAD functionality is required"[141] ⎕wi "style" 0[142] ⎕wi "caption" "GAD functionality"[143] ⎕wi "∆where" (2 2⍴0.5 0 0.2 0)[144] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.5 0 0.2 0))[145] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[146] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[147] [148] ⎕wself←"fmKeyCreate.ckBLANKING" ⎕wi "New" "Check"[149] Fieldlist←Fieldlist OVER "fmKeyCreate.ckBLANKING"[150] Fieldcontrol←Fieldcontrol OVER "Check"[151] ⎕wi "∆name" "BLANKING"[152] ⎕wi "∆type" "Check"[153] ⎕wi "tooltip" "Indicates if Blanking Irrelevant Fields required"[154] ⎕wi "style" 0[155] ⎕wi "caption" "Blank Irrelevant Fields"[156] ⎕wi "∆where" (2 2⍴0.71 0 0.2 0)[157] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.71 0 0.2 0))[158] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[159] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[160] [161] ⎕wself←"fmKeyCreate.ckDevelopment" ⎕wi "New" "Check"[162] Fieldlist←Fieldlist OVER "fmKeyCreate.ckDevelopment"[163] Fieldcontrol←Fieldcontrol OVER "Check"[164] ⎕wi "∆name" "Development"[165] ⎕wi "∆type" "Check"[166] ⎕wi "tooltip" "Indicates if Development Version is required"[167] ⎕wi "style" 0[168] ⎕wi "caption" "Development Version"[169] ⎕wi "∆where" (2 2⍴0.78 0 0.2 0)[170] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.78 0 0.2 0))[171] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[172] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[173] [174] ⎕wself←"fmKeyCreate.ckxloUTPUT" ⎕wi "New" "Check"[175] Fieldlist←Fieldlist OVER "fmKeyCreate.ckxloUTPUT"[176] Fieldcontrol←Fieldcontrol OVER "Check"[177] ⎕wi "∆name" "xloUTPUT"[178] ⎕wi "∆type" "Check"[179] ⎕wi "tooltip" "Indicates if Excel Output is required"[180] ⎕wi "style" 0[181] ⎕wi "caption" "Database and Excel Output"[182] ⎕wi "∆where" (2 2⍴0.15 0 0.6 0)[183] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.15 0 0.6 0))[184] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[185] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[186] [187] ⎕wself←"fmKeyCreate.cksqlSERVER" ⎕wi "New" "Check"[188] Fieldlist←Fieldlist OVER "fmKeyCreate.cksqlSERVER"[189] Fieldcontrol←Fieldcontrol OVER "Check"[190] ⎕wi "∆name" "sqlSERVER"[191] ⎕wi "∆type" "Check"[192] ⎕wi "tooltip" "Indicates if SQL Server Database is required"[193] ⎕wi "style" 0[194] ⎕wi "caption" "SQL Server Database"[195] ⎕wi "∆where" (2 2⍴0.21 0 0.6 0)[196] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.21 0 0.6 0))[197] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[198] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[199] [200] ⎕wself←"fmKeyCreate.ckdbOPEN" ⎕wi "New" "Check"[201] Fieldlist←Fieldlist OVER "fmKeyCreate.ckdbOPEN"[202] Fieldcontrol←Fieldcontrol OVER "Check"[203] ⎕wi "∆name" "dbOPEN"[204] ⎕wi "∆type" "Check"[205] ⎕wi "tooltip" "Indicates if Open Database is required"[206] ⎕wi "style" 0[207] ⎕wi "caption" "Open Database"[208] ⎕wi "∆where" (2 2⍴0.27 0 0.6 0)[209] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.27 0 0.6 0))[210] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[211] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[212] [213] ⎕wself←"fmKeyCreate.ckasmMODULE" ⎕wi "New" "Check"[214] Fieldlist←Fieldlist OVER "fmKeyCreate.ckasmMODULE"[215] Fieldcontrol←Fieldcontrol OVER "Check"[216] ⎕wi "∆name" "asmMODULE"[217] ⎕wi "∆type" "Check"[218] ⎕wi "tooltip" "Indicates if Accurate Scenario Modeller is required"[219] ⎕wi "style" 0[220] ⎕wi "caption" "Accurate Scenario Modeller"[221] ⎕wi "∆where" (2 2⍴0.33 0 0.6 0)[222] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.33 0 0.6 0))[223] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[224] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[225] [226] ⎕wself←"fmKeyCreate.ckqsmMODULE" ⎕wi "New" "Check"[227] Fieldlist←Fieldlist OVER "fmKeyCreate.ckqsmMODULE"[228] Fieldcontrol←Fieldcontrol OVER "Check"[229] ⎕wi "∆name" "qsmMODULE"[230] ⎕wi "∆type" "Check"[231] ⎕wi "tooltip" "Indicates if Accurate Scenario Modeller is required"[232] ⎕wi "style" 0[233] ⎕wi "caption" "Quick Scenario Modeller"[234] ⎕wi "∆where" (2 2⍴0.39 0 0.6 0)[235] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.39 0 0.6 0))[236] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[237] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[238] [239] ⎕wself←"fmKeyCreate.ckaGGbEN" ⎕wi "New" "Check"[240] Fieldlist←Fieldlist OVER "fmKeyCreate.ckaGGbEN"[241] Fieldcontrol←Fieldcontrol OVER "Check"[242] ⎕wi "∆name" "aGGbEN"[243] ⎕wi "∆type" "Check"[244] ⎕wi "tooltip" "Indicates if Aggregated Benefits functionality is required"[245] ⎕wi "style" 0[246] ⎕wi "caption" "Aggregated Benefits"[247] ⎕wi "∆where" (2 2⍴0.45 0 0.6 0)[248] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.45 0 0.6 0))[249] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[250] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[251] [252] ⎕wself←"fmKeyCreate.ckaltNRA" ⎕wi "New" "Check"[253] Fieldlist←Fieldlist OVER "fmKeyCreate.ckaltNRA"[254] Fieldcontrol←Fieldcontrol OVER "Check"[255] ⎕wi "∆name" "altNRA"[256] ⎕wi "∆type" "Check"[257] ⎕wi "tooltip" "Indicates if Alternate NRA on all Methods"[258] ⎕wi "style" 0[259] ⎕wi "caption" "Alternate NRA All Methods"[260] ⎕wi "∆where" (2 2⍴0.51 0 0.6 0)[261] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.51 0 0.6 0))[262] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[263] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[264] [265] ⎕wself←"fmKeyCreate.ckalmMODULE" ⎕wi "New" "Check"[266] Fieldlist←Fieldlist OVER "fmKeyCreate.ckalmMODULE"[267] Fieldcontrol←Fieldcontrol OVER "Check"[268] ⎕wi "∆name" "almMODULE"[269] ⎕wi "∆type" "Check"[270] ⎕wi "tooltip" "Indicates if ALM/LDI functionality is required"[271] ⎕wi "style" 0[272] ⎕wi "caption" "ALM/LDI functionality"[273] ⎕wi "∆where" (2 2⍴0.57 0 0.6 0)[274] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.57 0 0.6 0))[275] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[276] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[277] [278] ⎕wself←"fmKeyCreate.ckaosMODULE" ⎕wi "New" "Check"[279] Fieldlist←Fieldlist OVER "fmKeyCreate.ckaosMODULE"[280] Fieldcontrol←Fieldcontrol OVER "Check"[281] ⎕wi "∆name" "aosMODULE"[282] ⎕wi "∆type" "Check"[283] ⎕wi "tooltip" "Indicates if AOS functionality is required"[284] ⎕wi "style" 0[285] ⎕wi "caption" "AOS functionality"[286] ⎕wi "∆where" (2 2⍴0.63 0 0.6 0)[287] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.63 0 0.6 0))[288] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[289] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[290] [291] ⎕wself←"fmKeyCreate.cktRANSFERS" ⎕wi "New" "Check"[292] Fieldlist←Fieldlist OVER "fmKeyCreate.cktRANSFERS"[293] Fieldcontrol←Fieldcontrol OVER "Check"[294] ⎕wi "∆name" "tRANSFERS"[295] ⎕wi "∆type" "Check"[296] ⎕wi "tooltip" "Indicates if AOS functionality is required"[297] ⎕wi "style" 0[298] ⎕wi "caption" "Transfer Values"[299] ⎕wi "∆where" (2 2⍴0.69 0 0.6 0)[300] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.69 0 0.6 0))[301] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[302] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[303] [304] ⎕wself←"fmKeyCreate.ckhpcMODULE" ⎕wi "New" "Check"[305] Fieldlist←Fieldlist OVER "fmKeyCreate.ckhpcMODULE"[306] Fieldcontrol←Fieldcontrol OVER "Check"[307] ⎕wi "∆name" "hpcMODULE"[308] ⎕wi "∆type" "Check"[309] ⎕wi "tooltip" "Indicates if AOS functionality is required"[310] ⎕wi "style" 0[311] ⎕wi "caption" "Load Share functionality"[312] ⎕wi "∆where" (2 2⍴0.75 0 0.6 0)[313] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.75 0 0.6 0))[314] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[315] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Key_Creation 'Change' )"[316] [317] ⎕wself←"fmKeyCreate.edExpDate" ⎕wi "New" "Edit"[318] Fieldlist←Fieldlist OVER "fmKeyCreate.edExpDate"[319] Fieldcontrol←Fieldcontrol OVER "Edit"[320] ⎕wi "∆name" "ExpDate"[321] ⎕wi "∆type" "Date"[322] ⎕wi "∆mandatory" 1[323] ⎕wi "tooltip" "Specify the Expiry Date"[324] ⎕wi "limit" 10[325] ⎕wi "∆where" (2 2⍴0.87 0 0.45 0)[326] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize (2 2⍴0.87 0 0.45 0))[327] ⎕wi "onExit" "⍎(0∊⍴,⎕wres←0 INPUT∆CHECK 'fmKeyCreate.edExpDate')/'0 0⍴(⊂⎕wi ''name'') Key_Creation ''Change'' ' "[328] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[329] ⎕wi "onKeyPress" "⎕wres←¯2×~⎕warg∊8 32 45 46 47 48 49 50 51 52 53 54 55 56 57"[330] ⎕wi "onKeyDown" "(⎕wi 'self') ChangesDates ⎕warg"[331] ⎕wi "extent" (2+CharSize×1 11)[332] [333] ⎕wself←"fmKeyCreate.lrExpDate" ⎕wi "New" "Label"[334] ⎕wi "scale" 5[335] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "(generally up to a month into the future)"))[336] ⎕wi "caption" "(generally up to a month into the future)"[337] where←4↑,"fmKeyCreate.edExpDate" ⎕wi "∆where"[338] x←0.5×⍴where←Win∆Calcwhere where+0,3,0,10+¯1↑"fmKeyCreate.edExpDate" ⎕wi "extent"[339] ⎕wi "∆where" ((x,2)⍴where)[340] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize ⎕wi "∆where")[341] [342] ⎕wself←"fmKeyCreate.llExpDate" ⎕wi "New" "Label"[343] ⎕wi "scale" 5[344] ⎕wi "style" 2[345] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Licence Key Expiry Date"))[346] ⎕wi "caption" "Licence Key Expiry Date"[347] where←4↑,"fmKeyCreate.edExpDate" ⎕wi "∆where"[348] x←0.5×⍴where←Win∆Calcwhere where-0 ¯3 0,10+¯1↑⎕wi "extent"[349] ⎕wi "∆where" ((x,2)⍴where)[350] ⎕wi "where" (("fmKeyCreate" ⎕wi "size") Win∆Resize ⎕wi "∆where")[351] [352] "fmKeyCreate" ⎕wi "∆multifile" ""[353] "fmKeyCreate" ⎕wi "∆singlefile" ""[354] "fmKeyCreate" ⎕wi "∆format" ""[355] "fmKeyCreate" ⎕wi "∆financial" 0[356] "fmKeyCreate" ⎕wi "∆relrules" 0[357] "fmKeyCreate" ⎕wi "∆parm" 0[358] "fmKeyCreate" ⎕wi "∆decr" 0[359] "fmKeyCreate" ⎕wi "∆file" 0[360] "fmKeyCreate" ⎕wi "∆codefile" CodeFile[361] "fmKeyCreate" ⎕wi "∆inputstype" ""[362] "fmKeyCreate" ⎕wi "∆inputsentry" ""[363] "fmKeyCreate" ⎕wi "∆savecn" (⍳0)[364] "fmKeyCreate" ⎕wi "∆savedesc" ""[365] list←list OVER "fmKeyCreate"[366] "fmKeyCreate" ⎕wi "∆fieldlist" Fieldlist[367] "fmKeyCreate" ⎕wi "∆fieldcontrol" Fieldcontrol[368] childlist←"fmSV" ⎕wi "∆childlist"[369] list←(⊃¯1↑childlist) OVER list[370] childlist[⍴childlist]←⊂list[371] "fmSV" ⎕wi "∆childlist" childlist[372] list←,⎕split list[373] 0 0⍴((∨/¨(⊂".mKey_Creation")⍷¨list)/list) MultiWI "enabled" 1[374] :if 300<fnsize[375]     (fnsize fnsize ".") Win∆ProgressBar "MemberUpdate"[376]     Win∆ProgressBar "Hide"[377] :endif[378] "Init" OpenParameters "Key_Creation"[379] "fmKeyCreate.bnKey_CreationQuit" ⎕wi "visible" 1[380] "fmKeyCreate.bnKey_CreationSave" ⎕wi "visible" 1[381] "#" ⎕wi "focus" "fmKeyCreate.edCompanyName"[382] :if ~0∊⍴,Error←Win∆Initialise "Key_Creation"[383]     "Quit" EndModule Module[384]     "fmSV" ⎕wi "pointer" 0[385]     0 0⍴"fmKeyCreate" ⎕wi "Delete"[386]     :return[387] :endif[388] :if bar_open←commandbar^"Multi"≡""[389]     bar_open←0×"fmKeyCreate.mKey_CreationFile.m" Win∆CommandBar "OK"[390] :endif[391] "fmKeyCreate" ⎕wi "Paint"[392] "fmSV" ⎕wi "pointer" 11[393] "fmKeyCreate" ⎕wi "onWait" "0 0⍴Key_Creation 'Wait' ⋄ 'fmKeyCreate' ⎕wi 'modified' 0"[394] 0 0⍴"fmKeyCreate" ⎕wi "Wait"[395] 0 0⍴"fmKeyCreate" ⎕wi "Delete"[396] "fmSV" ⎕wi "pointer" 0 ∇