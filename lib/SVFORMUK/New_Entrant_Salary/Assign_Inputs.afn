    ∇ Assign_Inputs modified;PickList;list;n;NameList;value;MaxRow;MaxCol;selection;nn;no;package;warnings;var;control;row[1]   warnings←0 0⍴""[2]   package←pack ⍙VALUESdict ReadDictFile "New_Entrant_Salary" "" "Names"[3]   [4]   :if 1=ControlName ⎕wi "∆relrules"[5]       :for control :in nub FormFields at "control"[6]           "New_Entrant_Salary" ParmColor control "" ⍬ 0[7]       :endfor[8]   :endif[9]   "FileSelections" Win∆Inherits "fILESelections"[10]  "fmSV.fNew_Entrant_Salary.fData.ckFileSelections" ⎕wi "value" (zwb FileSelections)[11]  "FILES" Win∆Inherits "Actsfile"[12]  "fmSV.fNew_Entrant_Salary.fData.edFILES" ⎕wi "text" (DLTB FILES)[13]  "fILENAME" Win∆Inherits "Actsfile"[14]  GetAbsFileList "Fund"[15]  warnings←warnings OVER "Investigation Data File" Win∆FileRelative "fILENAME" "lrfILENAME"[16]  "fmSV.fNew_Entrant_Salary.fData.edfILENAME" ⎕wi "text" (DLTB fILENAME)[17]  "Format" Win∆Inherits "FormatA"[18]  PickList←"fmSV.fNew_Entrant_Salary.fData.cbFormat" ⎕wi "list"[19]  warnings←warnings OVER "Data Format" Win∆FormatRelative "Format" "lrFormat"[20]  selection←(StripText PickList) ExactTLU DLTB StripText Format[21]  :if mt selection[22]      modified←⌈/modified,1[23]  :endif[24]  "fmSV.fNew_Entrant_Salary.fData.cbFormat" ⎕wi "value" (¯1↑1,selection)[25]  "fmSV.fNew_Entrant_Salary.fData.ckUseSex" ⎕wi "value" (zwb UseSex)[26]  "fmSV.fNew_Entrant_Salary.fData.ckUseCat" ⎕wi "value" (zwb UseCat)[27]  PickList←"fmSV.fNew_Entrant_Salary.fData.lsCatSels" ⎕wi "list"[28]  :if 0∊⍴selection←PickList ExactTLU SStoMAT CatSels[29]      "fmSV.fNew_Entrant_Salary.fData.lsCatSels" ⎕wi "value" ((×1↑⍴PickList)⍴1)[30]      modified←⌈/modified,"fmSV.fNew_Entrant_Salary.fData.lsCatSels" ⎕wi "value"[31]  :else[32]      "fmSV.fNew_Entrant_Salary.fData.lsCatSels" ⎕wi "visible" ¯1[33]      "fmSV.fNew_Entrant_Salary.fData.lsCatSels" ⎕wi "value" selection[34]      "fmSV.fNew_Entrant_Salary.fData.lsCatSels" ⎕wi "visible" 1[35]  :endif[36]  "fmSV.fNew_Entrant_Salary.fData.ckUseSubs" ⎕wi "value" (zwb UseSubs)[37]  "fmSV.fNew_Entrant_Salary.fData.ckDeleteSubs" ⎕wi "value" (zwb DeleteSubs)[38]  PickList←"fmSV.fNew_Entrant_Salary.fParms.cbBDATE" ⎕wi "list"[39]  warnings←warnings OVER "Start Date" Win∆DateRelative "BDATE" "lrBDATE"[40]  selection←(StripText PickList) ExactTLU DLTB StripText BDATE[41]  :if mt selection[42]          "fmSV.fNew_Entrant_Salary.fParms.cbBDATE" ⎕wi "text" (DLTB BDATE)[43]  :else[44]      "fmSV.fNew_Entrant_Salary.fParms.cbBDATE" ⎕wi "value" selection[45]  :endif[46]  PickList←"fmSV.fNew_Entrant_Salary.fParms.cbEDATE" ⎕wi "list"[47]  warnings←warnings OVER "End Date" Win∆DateRelative "EDATE" "lrEDATE"[48]  selection←(StripText PickList) ExactTLU DLTB StripText EDATE[49]  :if mt selection[50]          "fmSV.fNew_Entrant_Salary.fParms.cbEDATE" ⎕wi "text" (DLTB EDATE)[51]  :else[52]      "fmSV.fNew_Entrant_Salary.fParms.cbEDATE" ⎕wi "value" selection[53]  :endif[54]  "fmSV.fNew_Entrant_Salary.fParms.edBAGE" ⎕wi "text" (DLTB BAGE)[55]  "fmSV.fNew_Entrant_Salary.fParms.edEAGE" ⎕wi "text" (DLTB EAGE)[56]  "fmSV.fNew_Entrant_Salary.fParms.edGROUP" ⎕wi "text" (DLTB GROUP)[57]  no←1↑⍴PickList←SStoMAT ("fmSV.fNew_Entrant_Salary.fParms.fsalind.opsalind_1" ⎕wi "∆lastoption") ⎕wi "∆options"[58]  value←¯1↑1,selection←PickList ExactTLU salind[59]  :if 0∊⍴selection[60]      modified←⌈/modified,×value[61]  :endif[62]  :for nn :in ⍳no[63]      ("fmSV.fNew_Entrant_Salary.fParms.fsalind.opsalind_",⍕nn) ⎕wi "value" (value=nn)[64]  :endfor[65]  no←1↑⍴PickList←SStoMAT ("fmSV.fNew_Entrant_Salary.fParms.fservind.opservind_1" ⎕wi "∆lastoption") ⎕wi "∆options"[66]  value←¯1↑1,selection←PickList ExactTLU servind[67]  :if 0∊⍴selection[68]      modified←⌈/modified,×value[69]  :endif[70]  :for nn :in ⍳no[71]      ("fmSV.fNew_Entrant_Salary.fParms.fservind.opservind_",⍕nn) ⎕wi "value" (value=nn)[72]  :endfor[73]  PickList←"fmSV.fNew_Entrant_Salary.fParms.cbf" ⎕wi "list"[74]  warnings←warnings OVER "Increase on Previous Salary (% p.a.)" Win∆FinRelative "f" "lrf" 1[75]  selection←(⎕av[209] StripText PickList) ExactTLU DLTB ⎕av[209] StripText f[76]  :if mt selection[77]      :if ~mt DLTB f ⋄ :andif ~^/⎕vi f[78]          warnings←warnings OVER "Previous Selection for 'Increase on Previous Salary (% p.a.)' is no longer available"[79]      :else[80]          "fmSV.fNew_Entrant_Salary.fParms.cbf" ⎕wi "text" (DLTB f)[81]      :endif[82]  :else[83]      "fmSV.fNew_Entrant_Salary.fParms.cbf" ⎕wi "value" selection[84]  :endif[85]  "fmSV.fNew_Entrant_Salary.fParms.cksave" ⎕wi "value" (zwb save)[86]  0 0⍴GetDecrList "List"[87]  warnings←warnings OVER "Expected Table" Win∆CheckDecr (TABXX[1;]) (lrTABXX1)[88]  "fmSV.fNew_Entrant_Salary.fTable.edTABXX1" ⎕wi "text" (DLTB TABXX[1;])[89]  "fmSV.fNew_Entrant_Salary.fTable.edTABXX2" ⎕wi "text" (DLTB TABXX[2;])[90]  "fmSV.fNew_Entrant_Salary.fTable.edTABXX3" ⎕wi "text" (DLTB TABXX[3;])[91]  :if 1=ControlName ⎕wi "∆relrules" ⋄ :andif ×rowsIn Comment_New_Entrant_Salary[92]      :for var :in spin Comment_New_Entrant_Salary at "variable" "row" ⋄ (var row)←var[93]          "New_Entrant_Salary" ParmColor ((FormFields for "variable" var) at "control"),var row 1[94]      :endfor[95]  :endif[96]  :if ~0∊⍴,warnings[97]      MDISPLAY DLTMB warnings,⎕tcnl[98]      Win∆AssignVars "fmSV.fNew_Entrant_Salary"[99]  :endif[100] :if 0=modified←modified⌈~package≡pack ⍙VALUESdict ReadDictFile "New_Entrant_Salary" "" "Names"[101]     "fmSV.fNew_Entrant_Salary" ⎕wi "modified" 0[102] :endif    ∇