∇ Container←Form_Make;⎕wself;ControlName;childlist;list;Fieldlist;Fieldcontrol;FrameWidth;Caption;buttonsize;buttonwhere;where;size;alignment;Header;PickList;NameList;value;sortorder;SortList;MaxRow;MaxCol;Parent;level;node;no;nn;NN;x;fnsize;framelist;relTests[1] [2] Fieldlist←Fieldcontrol←list←0 0⍴""[3] "fmSV" ⎕wi "pointer" 13[4] buttonsize←25 65 ⋄ buttonwhere←¯5[5] FormName ⎕wi "caption" ((FormName ⎕wi "caption")," - Defining Batch of Valuation Runs")[6] "fmSV" ⎕wi "∆caption" (("fmSV" ⎕wi "∆caption"),⊂("fmSV" ⎕wi "caption"))[7] :if 300<fnsize←1↑⍴⎕cr "Form_Make"[8]     "Generating Form" Win∆ProgressBar "Open"[9]     ("Menu Items:" "Form Controls:") Win∆ProgressBar "SetLabels"[10]     (1 1 "Help About") Win∆ProgressBar "FileUpdate"[11] :endif[12] [13] Container←"∆Dialog"[14] [15] ⎕wself←"fmBatchDefine" ⎕wi "New" "Form" "Hide"[16] ⎕wi "caption" ("fmSV" ⎕wi "caption")[17] ⎕wi "scale" 5[18] ⎕wi "font" ("fmSV" ⎕wi "font")[19] ⎕wi "border" 2 32 64[20] ⎕wi "where" (Win∆CentrePos 1.1 1.1 ×768 1024×1⌈CharSize÷13 6)[21] ⎕wi "limitwhere" (0.8×¯2↑⎕wi "where")[22] ⎕wi "tooltipwidth" 200[23] ⎕wi "onResize" "AutoResize"[24] ⎕wi "onClose" "ExitSystem ''"[25] ControlName←"fmBatchDefine"[26] relTests←0[27] 0 Menu_Make "fmSV"[28] 0 Menu_Make "fmBatchDefine"[29] "fmBatchDefine" Win∆CutCopyPaste "Build"[30] "fmBatchDefine" ⎕wi "∆helpid" 2258[31] list←list OVER "fmBatchDefine.bnBatch_DefineHelp"[32] ⎕wself←"fmBatchDefine.bnBatch_DefineHelp" ⎕wi "New" "Button"[33] ⎕wi "deferexit" 1[34] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[35] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][36] ⎕wi "∆where" ((x,2)⍴where)[37] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize ⎕wi "∆where")[38] ⎕wi "tooltip" "SuperVal Help"[39] ⎕wi "onClick" ("fmSV.mBatch_DefineHelp.mContext"⎕wi "onClick")[40] ⎕wi "caption" "Help"[41] :if buttonimage[42]     ⎕wi "imagelist" "fmSV.iStandard"[43]     ⎕wi "imageindex" 12[44] :endif[45] ⎕wi "visible" ¯1[46] ⎕wi "onMouseDown" "∆HelpField←'#' ⎕wi 'focus' "[47] list←list OVER "fmBatchDefine.bnBatch_DefineQuit"[48] ⎕wself←"fmBatchDefine.bnBatch_DefineQuit" ⎕wi "New" "Button"[49] ⎕wi "style" 2[50] ⎕wi "deferexit" 1[51] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[52] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][53] ⎕wi "∆where" ((x,2)⍴where)[54] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize ⎕wi "∆where")[55] ⎕wi "tooltip" "Cancel and Return"[56] ⎕wi "onClick" ("fmSV.mBatch_DefineFile.mQuit"⎕wi "onClick")[57] ⎕wi "caption" "Cancel"[58] ⎕wi "∆helpid" 5391[59] ⎕wi "order" .5[60] ⎕wi "visible" ¯1[61] list←list OVER "fmBatchDefine.bnBatch_DefineSave"[62] ⎕wself←"fmBatchDefine.bnBatch_DefineSave" ⎕wi "New" "Button"[63] ⎕wi "style" 1[64] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[65] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][66] ⎕wi "∆where" ((x,2)⍴where)[67] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize ⎕wi "∆where")[68] ⎕wi "tooltip" "Save Parameters"[69] ⎕wi "onClick" ("fmSV.mBatch_DefineFile.mSave"⎕wi "onClick")[70] ⎕wi "caption" "OK"[71] ⎕wi "∆helpid" 5392[72] ⎕wi "order" .5[73] ⎕wi "visible" ¯1[74] [75] :if ppfenabled[76] [77] ⎕wself←"fmBatchDefine.lsValMeth" ⎕wi "New" "List"[78] Fieldlist←Fieldlist OVER "fmBatchDefine.lsValMeth"[79] Fieldcontrol←Fieldcontrol OVER "List"[80] ⎕wi "∆name" "ValMeth"[81] ⎕wi "∆type" "List"[82] ⎕wi "visible" (¯1+2×ppfenabled)[83] ⎕wi "∆helpid" 5393[84] ⎕wi "tooltip" "Select the Valuation Method"[85] ⎕wi "style" 16 0[86] PickList←⍙POPUPSdict ReadDictFile "ValMeth.PPF"[87] PickList←⊃m2n 1 0↓PickList[88] ⎕wi "list" PickList[89] size←0 0×Win∆TextSize "??? of ??? Selected"[90] size←size⌈(2↑0.3 )×"fmBatchDefine" ⎕wi "size"[91] size←1 0 1 0\(size⌈0,20+¯1↑Win∆TextSize PickList) CDIV "fmBatchDefine" ⎕wi "size"[92] size←0.5×⍴x←Win∆Calcwhere 0.02 0 0.06 0,size[93] x←(size,2)⍴x[94] ⎕wi "∆where" x[95] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize x)[96] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[97] ⎕wi "onExit" "⎕wres←0 List∆CHECK 'fmBatchDefine.lsValMeth'"[98] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[99] [100] ⎕wself←"fmBatchDefine.llValMeth" ⎕wi "New" "Label"[101] ⎕wi "scale" 5[102] ⎕wi "style" 2[103] ⎕wi "visible" (¯1+2×ppfenabled)[104] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Valuation⍺Method")))[105] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Valuation⍺Method")[106] where←4↑,"fmBatchDefine.lsValMeth" ⎕wi "∆where"[107] size←1↑"fmBatchDefine.lsValMeth" ⎕wi "extent"[108] size←¯3⌈0.5×(1↑⎕wi "extent")-size[109] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[110] ⎕wi "∆where" ((x,2)⍴where)[111] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize ⎕wi "∆where")[112] :endif[113] [114] :if ~ppfenabled[115] [116] ⎕wself←"fmBatchDefine.lsValMeth" ⎕wi "New" "List"[117] Fieldlist←Fieldlist OVER "fmBatchDefine.lsValMeth"[118] Fieldcontrol←Fieldcontrol OVER "List"[119] ⎕wi "∆name" "ValMeth"[120] ⎕wi "∆type" "List"[121] ⎕wi "visible" (¯1+2×~ppfenabled)[122] ⎕wi "∆helpid" 5393[123] ⎕wi "tooltip" "Select the Valuation Method"[124] ⎕wi "style" 16 0[125] PickList←⍙POPUPSdict ReadDictFile "ValMeth"[126] PickList←⊃m2n 1 0↓PickList[127] ⎕wi "list" PickList[128] size←0 0×Win∆TextSize "??? of ??? Selected"[129] size←size⌈(2↑0.3 )×"fmBatchDefine" ⎕wi "size"[130] size←1 0 1 0\(size⌈0,20+¯1↑Win∆TextSize PickList) CDIV "fmBatchDefine" ⎕wi "size"[131] size←0.5×⍴x←Win∆Calcwhere 0.02 0 0.06 0,size[132] x←(size,2)⍴x[133] ⎕wi "∆where" x[134] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize x)[135] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[136] ⎕wi "onExit" "⎕wres←0 List∆CHECK 'fmBatchDefine.lsValMeth'"[137] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[138] [139] ⎕wself←"fmBatchDefine.llValMeth" ⎕wi "New" "Label"[140] ⎕wi "scale" 5[141] ⎕wi "style" 2[142] ⎕wi "visible" (¯1+2×~ppfenabled)[143] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Valuation⍺Method")))[144] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Valuation⍺Method")[145] where←4↑,"fmBatchDefine.lsValMeth" ⎕wi "∆where"[146] size←1↑"fmBatchDefine.lsValMeth" ⎕wi "extent"[147] size←¯3⌈0.5×(1↑⎕wi "extent")-size[148] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[149] ⎕wi "∆where" ((x,2)⍴where)[150] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize ⎕wi "∆where")[151] :endif[152] [153] ⎕wself←"fmBatchDefine.lvBases" ⎕wi "New" "Listview"[154] Fieldlist←Fieldlist OVER "fmBatchDefine.lvBases"[155] Fieldcontrol←Fieldcontrol OVER "Listview"[156] ⎕wi "∆name" "Bases"[157] ⎕wi "∆type" "ListviewM"[158] ⎕wi "∆mandatory" 1[159] ⎕wi "∆helpid" 5394[160] ⎕wi "tooltip" "Select the Parameter Set(s) to be Batched"[161] list←list OVER "fmBatchDefine.lvBases"[162] ⎕wi "scale" 5[163] ⎕wi "viewmode" "report"[164] ⎕wi "style" 1 4 0[165] ⎕wi "∆where" (4 2⍴0.02 0 0.31 0 0.4 0 0.67 0)[166] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize (4 2⍴0.02 0 0.31 0 0.4 0 0.67 0))[167] ⎕wi "∆update" "GetParmDesc ''"[168] (PickList NameList sortorder SortList)←4↑GetParmDesc ''[169] ⎕wi "list" PickList[170] NameList[;1]←NameList[;1],¨⊂4↑" "[171] ⎕wi "columndisplay" NameList[172] ⎕wi "AutoFit" "header" "all"[173] ⎕wi "∆sortorder" sortorder[174] ⎕wi "∆sortlist" SortList[175] ⎕wi "onColClick" "('fmBatchDefine.lvBases' 'Batch_Define') Win∆SortListview ⎕warg"[176] :if 0=⎕nc "listviewDict"[177] listviewDict←MATRIX keysIn ListviewDict[178] :endif[179] :if ~mt sortorder←DLTB ↑((ListviewDict for "Control" "fmBatchDefine.lvBases") for "Parameters" "") at "Sort"[180] ("fmBatchDefine.lvBases" "Batch_Define") Win∆SortListview sortorder[181] :else[182] ("fmBatchDefine.lvBases" "Batch_Define") Win∆SortListview "Date/Time Saved"[183] :endif[184] ⎕wi "onResize" "Win∆SizeListview ⎕wi 'self'"[185] ⎕wi "onPaint" "0 Sel∆LabelUpdate 'fmBatchDefine.lvBases' "[186] ⎕wi "onSelect" "0 Sel∆LabelUpdate 'fmBatchDefine.lvBases' ⋄ 0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[187] ⎕wi "onExit" "⍎(0∊⍴,⎕wres←0 List∆CHECK 'fmBatchDefine.lvBases')/'0 0⍴(⊂⎕wi ''name'') Batch_Define ''Change'' ' "[188] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[189] ⎕wi "∆rightlabel" "fmBatchDefine.lrBases"[190] [191] ⎕wself←"fmBatchDefine.lrBases" ⎕wi "New" "Label"[192] ⎕wi "scale" 5[193] ⎕wi "extent" (CharSize×¯2↑1,19)[194] ⎕wi "style" 32[195] ⎕wi "caption" " "[196] where←4↑,"fmBatchDefine.lvBases" ⎕wi "∆where"[197] x←0.5×⍴where←Win∆Calcwhere where+((5+1↑2↓"fmBatchDefine.lvBases" ⎕wi "where") CDIV 1↑"fmBatchDefine" ⎕wi "size"),0 0 0[198] ⎕wi "∆where" ((x,2)⍴where)[199] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize ⎕wi "∆where")[200] [201] ⎕wself←"fmBatchDefine.llBases" ⎕wi "New" "Label"[202] ⎕wi "scale" 5[203] ⎕wi "style" 2[204] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Saved⍺Bases")))[205] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Saved⍺Bases")[206] where←4↑,"fmBatchDefine.lvBases" ⎕wi "∆where"[207] size←1↑"fmBatchDefine.lvBases" ⎕wi "extent"[208] size←¯3⌈0.5×(1↑⎕wi "extent")-size[209] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[210] ⎕wi "∆where" ((x,2)⍴where)[211] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize ⎕wi "∆where")[212] [213] :if 300<fnsize[214]     ((1↑⎕lc) fnsize "FrameV - Valuation Run Options") Win∆ProgressBar "MemberUpdate"[215] :endif[216] [217] ⎕wself←"fmBatchDefine.fRunOpt" ⎕wi "New" "Frame"[218] ⎕wi "scale" 5[219] ⎕wi "∆where" (4 2⍴0.45 0 0 0 0.55 ¯45 0.5 0)[220] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize (4 2⍴0.45 0 0 0 0.55 ¯45 0.5 0))[221] ⎕wi "caption" "Valuation Run Options"[222] ⎕wi "style" 0[223] ⎕wi "onResize" "AutoResize"[224] [225] ⎕wself←"fmBatchDefine.fRunOpt.cbSexSel" ⎕wi "New" "Combo"[226] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cbSexSel"[227] Fieldcontrol←Fieldcontrol OVER "Combo"[228] ⎕wi "∆name" "SexSel"[229] ⎕wi "∆type" "Char"[230] ⎕wi "∆mandatory" 1[231] ⎕wi "visible" (¯1+2×uk=1)[232] ⎕wi "∆helpid" 5395[233] ⎕wi "tooltip" "Select the Sex(es) to be Valued"[234] ⎕wi "style" 16 128 256 2[235] ⎕wi "∆where" (2 2⍴0.04 0 0.3 0)[236] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.04 0 0.3 0))[237] PickList←⍙POPUPSdict ReadDictFile "SelSex"[238] PickList←⊃m2n 1 0↓PickList[239] ⎕wi "list" PickList[240] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[241] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[242] [243] ⎕wself←"fmBatchDefine.fRunOpt.llSexSel" ⎕wi "New" "Label"[244] ⎕wi "scale" 5[245] ⎕wi "style" 2[246] ⎕wi "visible" (¯1+2×uk=1)[247] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Sex Selection"))[248] ⎕wi "caption" "Sex Selection"[249] where←4↑,"fmBatchDefine.fRunOpt.cbSexSel" ⎕wi "∆where"[250] x←0.5×⍴where←Win∆Calcwhere where-0 ¯3 0,10+¯1↑⎕wi "extent"[251] ⎕wi "∆where" ((x,2)⍴where)[252] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[253] [254] ⎕wself←"fmBatchDefine.fRunOpt.cbtest" ⎕wi "New" "Combo"[255] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cbtest"[256] Fieldcontrol←Fieldcontrol OVER "Combo"[257] ⎕wi "∆name" "test"[258] ⎕wi "∆type" "Char"[259] ⎕wi "∆mandatory" 1[260] ⎕wi "∆helpid" 5396[261] ⎕wi "tooltip" "Indicate Test Results Required (if any)"[262] ⎕wi "style" 16 128 256 2[263] ⎕wi "∆where" (2 2⍴0.12 0 0.3 0)[264] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.12 0 0.3 0))[265] PickList←⍙POPUPSdict ReadDictFile "TestMode"[266] PickList←⊃m2n 1 0↓PickList[267] ⎕wi "list" PickList[268] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[269] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[270] [271] ⎕wself←"fmBatchDefine.fRunOpt.lltest" ⎕wi "New" "Label"[272] ⎕wi "scale" 5[273] ⎕wi "style" 2[274] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Test Valuation Run"))[275] ⎕wi "caption" "Test Valuation Run"[276] where←4↑,"fmBatchDefine.fRunOpt.cbtest" ⎕wi "∆where"[277] x←0.5×⍴where←Win∆Calcwhere where-0 ¯3 0,10+¯1↑⎕wi "extent"[278] ⎕wi "∆where" ((x,2)⍴where)[279] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[280] [281] ⎕wself←"fmBatchDefine.fRunOpt.ckAgeInterp" ⎕wi "New" "Check"[282] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.ckAgeInterp"[283] Fieldcontrol←Fieldcontrol OVER "Check"[284] ⎕wi "∆name" "AgeInterp"[285] ⎕wi "∆type" "Check"[286] ⎕wi "∆helpid" 5397[287] ⎕wi "tooltip" "Indicate if Interpolated Exact Age Calculations are required"[288] ⎕wi "style" 0[289] ⎕wi "caption" "Interpolated Exact Age Results"[290] ⎕wi "∆where" (2 2⍴0.21 0 0.3 0)[291] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.21 0 0.3 0))[292] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[293] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[294] [295] ⎕wself←"fmBatchDefine.fRunOpt.ckaggopt" ⎕wi "New" "Check"[296] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.ckaggopt"[297] Fieldcontrol←Fieldcontrol OVER "Check"[298] ⎕wi "∆name" "aggopt"[299] ⎕wi "∆type" "Check"[300] ⎕wi "visible" (¯1+2×uk=1)[301] ⎕wi "∆helpid" 5398[302] ⎕wi "tooltip" "Indicate if Benefits are to be Aggregated by Age before Valuation"[303] ⎕wi "style" 0[304] ⎕wi "caption" "Aggregate Benefits before Valuing"[305] ⎕wi "∆where" (2 2⍴0.28 0 0.3 0)[306] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.28 0 0.3 0))[307] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[308] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[309] [310] ⎕wself←"fmBatchDefine.fRunOpt.ckPROPT" ⎕wi "New" "Check"[311] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.ckPROPT"[312] Fieldcontrol←Fieldcontrol OVER "Check"[313] ⎕wi "∆name" "PROPT"[314] ⎕wi "∆type" "Check"[315] ⎕wi "visible" (¯1+2×0)[316] ⎕wi "tooltip" "Indicate if a Accrued Benefit Calculations are desired"[317] ⎕wi "style" 0[318] ⎕wi "caption" "Accrued Benefit Calculations"[319] ⎕wi "∆where" (2 2⍴0.28 0 0.3 0)[320] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.28 0 0.3 0))[321] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[322] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[323] [324] ⎕wself←"fmBatchDefine.fRunOpt.edcontper" ⎕wi "New" "Edit"[325] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.edcontper"[326] Fieldcontrol←Fieldcontrol OVER "Edit"[327] ⎕wi "∆name" "contper"[328] ⎕wi "∆type" "Num"[329] ⎕wi "∆mandatory" 1[330] ⎕wi "∆valid" ('Int' 'Scalar' '+')[331] ⎕wi "∆helpid" 5399[332] ⎕wi "tooltip" "Specify the Control Period (years)"[333] ⎕wi "limit" 2[334] ⎕wi "∆where" (2 2⍴0.34 0 0.3 0)[335] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.34 0 0.3 0))[336] ⎕wi "∆range" "1 99"[337] ⎕wi "onExit" "⍎(0∊⍴,⎕wres←0 INPUT∆CHECK 'fmBatchDefine.fRunOpt.edcontper')/'0 0⍴(⊂⎕wi ''name'') Batch_Define ''Change'' ' "[338] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[339] ⎕wi "onKeyPress" "⎕wres←¯2×~⎕warg∊8 32 48 49 50 51 52 53 54 55 56 57"[340] ⎕wi "extent" (2+CharSize×1 3)[341] [342] ⎕wself←"fmBatchDefine.fRunOpt.lrcontper" ⎕wi "New" "Label"[343] ⎕wi "scale" 5[344] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "years"))[345] ⎕wi "caption" "years"[346] where←4↑,"fmBatchDefine.fRunOpt.edcontper" ⎕wi "∆where"[347] x←0.5×⍴where←Win∆Calcwhere where+0,3,0,10+¯1↑"fmBatchDefine.fRunOpt.edcontper" ⎕wi "extent"[348] ⎕wi "∆where" ((x,2)⍴where)[349] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[350] [351] ⎕wself←"fmBatchDefine.fRunOpt.llcontper" ⎕wi "New" "Label"[352] ⎕wi "scale" 5[353] ⎕wi "style" 2[354] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Control⍺Period")))[355] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Control⍺Period")[356] where←4↑,"fmBatchDefine.fRunOpt.edcontper" ⎕wi "∆where"[357] size←1↑"fmBatchDefine.fRunOpt.edcontper" ⎕wi "extent"[358] size←¯3⌈0.5×(1↑⎕wi "extent")-size[359] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[360] ⎕wi "∆where" ((x,2)⍴where)[361] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[362] [363] ⎕wself←"fmBatchDefine.fRunOpt.ckinsind" ⎕wi "New" "Check"[364] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.ckinsind"[365] Fieldcontrol←Fieldcontrol OVER "Check"[366] ⎕wi "∆name" "insind"[367] ⎕wi "∆type" "Check"[368] ⎕wi "∆helpid" 5400[369] ⎕wi "tooltip" "Indicate if the cost of Insured Benefits are to be included in the Normal Cost"[370] ⎕wi "style" 0[371] ⎕wi "caption" "Insured Benefits in Normal Cost"[372] ⎕wi "∆where" (2 2⍴0.42 0 0.3 0)[373] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.42 0 0.3 0))[374] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[375] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[376] [377] ⎕wself←"fmBatchDefine.fRunOpt.cbabNO" ⎕wi "New" "Combo"[378] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cbabNO"[379] Fieldcontrol←Fieldcontrol OVER "Combo"[380] ⎕wi "∆name" "abNO"[381] ⎕wi "∆type" "Char"[382] ⎕wi "∆mandatory" 1[383] ⎕wi "∆helpid" 5401[384] ⎕wi "tooltip" "Select the Target Accrued Benefit"[385] ⎕wi "style" 16 128 256 2[386] ⎕wi "∆where" (2 2⍴0.49 0 0.3 0)[387] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.49 0 0.3 0))[388] PickList←⍙POPUPSdict ReadDictFile "TargetBen"[389] PickList←⊃m2n 1 0↓PickList[390] ⎕wi "list" PickList[391] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[392] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[393] [394] ⎕wself←"fmBatchDefine.fRunOpt.llabNO" ⎕wi "New" "Label"[395] ⎕wi "scale" 5[396] ⎕wi "style" 2[397] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Target⍺Accrued Benefit")))[398] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Target⍺Accrued Benefit")[399] where←4↑,"fmBatchDefine.fRunOpt.cbabNO" ⎕wi "∆where"[400] size←1↑"fmBatchDefine.fRunOpt.cbabNO" ⎕wi "extent"[401] size←¯3⌈0.5×(1↑⎕wi "extent")-size[402] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[403] ⎕wi "∆where" ((x,2)⍴where)[404] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[405] [406] ⎕wself←"fmBatchDefine.fRunOpt.cknewent" ⎕wi "New" "Check"[407] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cknewent"[408] Fieldcontrol←Fieldcontrol OVER "Check"[409] ⎕wi "∆name" "newent"[410] ⎕wi "∆type" "Check"[411] ⎕wi "∆helpid" 5402[412] ⎕wi "tooltip" "Indicate if the New Entrant Model Replacement is desired"[413] ⎕wi "style" 0[414] ⎕wi "caption" "New Entrant Model Replacement"[415] ⎕wi "∆where" (2 2⍴0.58 0 0.3 0)[416] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.58 0 0.3 0))[417] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[418] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[419] [420] ⎕wself←"fmBatchDefine.fRunOpt.cbNEparms" ⎕wi "New" "Combo"[421] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cbNEparms"[422] Fieldcontrol←Fieldcontrol OVER "Combo"[423] ⎕wi "∆name" "NEparms"[424] ⎕wi "∆type" "Char"[425] ⎕wi "∆mandatory" 1[426] ⎕wi "∆helpid" 5403[427] ⎕wi "tooltip" "Select the New Entrant Model Parameters"[428] ⎕wi "style" 16 128 256 2[429] ⎕wi "∆where" (2 2⍴0.65 0 0.3 0)[430] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.65 0 0.3 0))[431] PickList←GetClientParms 'NE_Model'[432] ⎕wi "∆update" "GetClientParms 'NE_Model'"[433] PickList←⊃m2n 1 0↓PickList[434] ⎕wi "list" PickList[435] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[436] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[437] [438] ⎕wself←"fmBatchDefine.fRunOpt.llNEparms" ⎕wi "New" "Label"[439] ⎕wi "scale" 5[440] ⎕wi "style" 2[441] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "New Entrant⍺Model Parameters")))[442] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "New Entrant⍺Model Parameters")[443] where←4↑,"fmBatchDefine.fRunOpt.cbNEparms" ⎕wi "∆where"[444] size←1↑"fmBatchDefine.fRunOpt.cbNEparms" ⎕wi "extent"[445] size←¯3⌈0.5×(1↑⎕wi "extent")-size[446] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[447] ⎕wi "∆where" ((x,2)⍴where)[448] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[449] [450] ⎕wself←"fmBatchDefine.fRunOpt.cbvDATEind" ⎕wi "New" "Combo"[451] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cbvDATEind"[452] Fieldcontrol←Fieldcontrol OVER "Combo"[453] ⎕wi "∆name" "vDATEind"[454] ⎕wi "∆type" "Char"[455] ⎕wi "∆mandatory" 1[456] ⎕wi "visible" (¯1+2×uk≠0)[457] ⎕wi "∆helpid" 5404[458] ⎕wi "tooltip" "Select the Valuation Date"[459] ⎕wi "style" 16 128 256 2[460] ⎕wi "∆where" (2 2⍴0.73 0 0.3 0)[461] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.73 0 0.3 0))[462] PickList←⍙POPUPSdict ReadDictFile "ValDate"[463] PickList←⊃m2n 1 0↓PickList[464] ⎕wi "list" PickList[465] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[466] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[467] [468] ⎕wself←"fmBatchDefine.fRunOpt.llvDATEind" ⎕wi "New" "Label"[469] ⎕wi "scale" 5[470] ⎕wi "style" 2[471] ⎕wi "visible" (¯1+2×uk≠0)[472] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Valuation Date"))[473] ⎕wi "caption" "Valuation Date"[474] where←4↑,"fmBatchDefine.fRunOpt.cbvDATEind" ⎕wi "∆where"[475] x←0.5×⍴where←Win∆Calcwhere where-0 ¯3 0,10+¯1↑⎕wi "extent"[476] ⎕wi "∆where" ((x,2)⍴where)[477] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[478] [479] ⎕wself←"fmBatchDefine.fRunOpt.cbSurcparms" ⎕wi "New" "Combo"[480] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cbSurcparms"[481] Fieldcontrol←Fieldcontrol OVER "Combo"[482] ⎕wi "∆name" "Surcparms"[483] ⎕wi "∆type" "Char"[484] ⎕wi "∆mandatory" 1[485] ⎕wi "visible" (¯1+2×0)[486] ⎕wi "tooltip" "Select the Surcharge Parameters"[487] ⎕wi "style" 16 128 256 2[488] ⎕wi "∆where" (2 2⍴0.73 0 0.3 0)[489] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.73 0 0.3 0))[490] PickList←GetClientParms 'Surcharge_Parameter' 0[491] ⎕wi "∆update" "GetClientParms 'Surcharge_Parameter' 0"[492] PickList←⊃m2n 1 0↓PickList[493] ⎕wi "list" PickList[494] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[495] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[496] [497] ⎕wself←"fmBatchDefine.fRunOpt.llSurcparms" ⎕wi "New" "Label"[498] ⎕wi "scale" 5[499] ⎕wi "style" 2[500] ⎕wi "visible" (¯1+2×0)[501] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Surcharge⍺Parameters")))[502] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Surcharge⍺Parameters")[503] where←4↑,"fmBatchDefine.fRunOpt.cbSurcparms" ⎕wi "∆where"[504] size←1↑"fmBatchDefine.fRunOpt.cbSurcparms" ⎕wi "extent"[505] size←¯3⌈0.5×(1↑⎕wi "extent")-size[506] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[507] ⎕wi "∆where" ((x,2)⍴where)[508] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[509] [510] ⎕wself←"fmBatchDefine.fRunOpt.ckaosind" ⎕wi "New" "Check"[511] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.ckaosind"[512] Fieldcontrol←Fieldcontrol OVER "Check"[513] ⎕wi "∆name" "aosind"[514] ⎕wi "∆type" "Check"[515] ⎕wi "visible" (¯1+2×uk≠0)[516] ⎕wi "∆helpid" 5405[517] ⎕wi "tooltip" "Indicate if Analysis of Surplus calculations are desired"[518] ⎕wi "style" 0[519] ⎕wi "caption" "Analysis of Surplus"[520] ⎕wi "∆where" (2 2⍴0.81 0 0.3 0)[521] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.81 0 0.3 0))[522] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[523] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[524] [525] ⎕wself←"fmBatchDefine.fRunOpt.ckbencap" ⎕wi "New" "Check"[526] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.ckbencap"[527] Fieldcontrol←Fieldcontrol OVER "Check"[528] ⎕wi "∆name" "bencap"[529] ⎕wi "∆type" "Check"[530] ⎕wi "visible" (¯1+2×uk=1)[531] ⎕wi "∆helpid" 5406[532] ⎕wi "tooltip" "Indicate if Accrued Benefits are to be Capped"[533] ⎕wi "style" 0[534] ⎕wi "caption" "Cap Accrued Benefits"[535] ⎕wi "∆where" (2 2⍴0.88 0 0.3 0)[536] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.88 0 0.3 0))[537] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[538] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[539] [540] ⎕wself←"fmBatchDefine.fRunOpt.cks143" ⎕wi "New" "Check"[541] Fieldlist←Fieldlist OVER "fmBatchDefine.fRunOpt.cks143"[542] Fieldcontrol←Fieldcontrol OVER "Check"[543] ⎕wi "∆name" "s143"[544] ⎕wi "∆type" "Check"[545] ⎕wi "visible" (¯1+2×uk=1)[546] ⎕wi "∆helpid" 5407[547] ⎕wi "tooltip" "Indicate if an S143 Entry Valuation is required"[548] ⎕wi "style" 0[549] ⎕wi "caption" "S143 Entry Valuation"[550] ⎕wi "∆where" (2 2⍴0.95 0 0.3 0)[551] ⎕wi "where" (("fmBatchDefine.fRunOpt" ⎕wi "size") Win∆Resize (2 2⍴0.95 0 0.3 0))[552] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[553] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[554] [555] :if 300<fnsize[556]     ((1↑⎕lc) fnsize "FrameV - Output Options") Win∆ProgressBar "MemberUpdate"[557] :endif[558] [559] ⎕wself←"fmBatchDefine.fOutOpt" ⎕wi "New" "Frame"[560] ⎕wi "scale" 5[561] ⎕wi "∆where" (4 2⍴0.45 0 0.5 0 0.55 ¯45 0.5 0)[562] ⎕wi "where" (("fmBatchDefine" ⎕wi "size") Win∆Resize (4 2⍴0.45 0 0.5 0 0.55 ¯45 0.5 0))[563] ⎕wi "caption" "Output Options"[564] ⎕wi "style" 0[565] ⎕wi "onResize" "AutoResize"[566] [567] ⎕wself←"fmBatchDefine.fOutOpt.ckKeepResult" ⎕wi "New" "Check"[568] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckKeepResult"[569] Fieldcontrol←Fieldcontrol OVER "Check"[570] ⎕wi "∆name" "KeepResult"[571] ⎕wi "∆type" "Check"[572] ⎕wi "∆helpid" 5408[573] ⎕wi "tooltip" "Indicate if the Valuation Results are to stored for Consolidation"[574] ⎕wi "style" 0[575] ⎕wi "caption" "Store Results for Consolidation"[576] ⎕wi "∆where" (2 2⍴0.05 0 0.3 0)[577] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.05 0 0.3 0))[578] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[579] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[580] [581] ⎕wself←"fmBatchDefine.fOutOpt.ckfscopt" ⎕wi "New" "Check"[582] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckfscopt"[583] Fieldcontrol←Fieldcontrol OVER "Check"[584] ⎕wi "∆name" "fscopt"[585] ⎕wi "∆type" "Check"[586] ⎕wi "visible" (¯1+2×uk=1)[587] ⎕wi "∆helpid" 5409[588] ⎕wi "tooltip" "Indicate if Cash Flows required for ALM/LDI are desired"[589] ⎕wi "style" 0[590] ⎕wi "caption" "ALM/LDI Interface Required"[591] ⎕wi "∆where" (2 2⍴0.13 0 0.3 0)[592] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.13 0 0.3 0))[593] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[594] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[595] [596] ⎕wself←"fmBatchDefine.fOutOpt.cksummopt" ⎕wi "New" "Check"[597] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.cksummopt"[598] Fieldcontrol←Fieldcontrol OVER "Check"[599] ⎕wi "∆name" "summopt"[600] ⎕wi "∆type" "Check"[601] ⎕wi "∆helpid" 5410[602] ⎕wi "tooltip" "Indicate if a Summary of Results by Age is desired"[603] ⎕wi "style" 0[604] ⎕wi "caption" "Summarise All Results by Age"[605] ⎕wi "∆where" (2 2⍴0.21 0 0.3 0)[606] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.21 0 0.3 0))[607] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[608] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[609] [610] ⎕wself←"fmBatchDefine.fOutOpt.ckIndCashFlow" ⎕wi "New" "Check"[611] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckIndCashFlow"[612] Fieldcontrol←Fieldcontrol OVER "Check"[613] ⎕wi "∆name" "IndCashFlow"[614] ⎕wi "∆type" "Check"[615] ⎕wi "∆helpid" 5411[616] ⎕wi "tooltip" "Indicate if Individual Member Cash Flows are desired"[617] ⎕wi "style" 0[618] ⎕wi "caption" "Individual Member Cash Flows"[619] ⎕wi "∆where" (2 2⍴0.29 0 0.3 0)[620] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.29 0 0.3 0))[621] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[622] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[623] [624] ⎕wself←"fmBatchDefine.fOutOpt.ckVFtables" ⎕wi "New" "Check"[625] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckVFtables"[626] Fieldcontrol←Fieldcontrol OVER "Check"[627] ⎕wi "∆name" "VFtables"[628] ⎕wi "∆type" "Check"[629] ⎕wi "∆helpid" 5412[630] ⎕wi "tooltip" "Indicate if Valuation Factor Tables output to the Database/Excel are desired"[631] ⎕wi "style" 0[632] ⎕wi "caption" "Output Valuation Factor Tables"[633] ⎕wi "∆where" (2 2⍴0.37 0 0.3 0)[634] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.37 0 0.3 0))[635] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[636] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[637] [638] ⎕wself←"fmBatchDefine.fOutOpt.ckdecopt" ⎕wi "New" "Check"[639] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckdecopt"[640] Fieldcontrol←Fieldcontrol OVER "Check"[641] ⎕wi "∆name" "decopt"[642] ⎕wi "∆type" "Check"[643] ⎕wi "visible" (¯1+2×0)[644] ⎕wi "tooltip" "Indicate if a Printout of Decrement and Other Rates is desired"[645] ⎕wi "style" 0[646] ⎕wi "caption" "Decrement and Other Rates"[647] ⎕wi "∆where" (2 2⍴0.44 0 0.3 0)[648] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.44 0 0.3 0))[649] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[650] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[651] [652] ⎕wself←"fmBatchDefine.fOutOpt.ckpbens" ⎕wi "New" "Check"[653] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckpbens"[654] Fieldcontrol←Fieldcontrol OVER "Check"[655] ⎕wi "∆name" "pbens"[656] ⎕wi "∆type" "Check"[657] ⎕wi "visible" (¯1+2×0)[658] ⎕wi "tooltip" "Indicate if a Printout of Benefit Functions is desired"[659] ⎕wi "style" 0[660] ⎕wi "caption" "Benefit Functions"[661] ⎕wi "∆where" (2 2⍴0.51 0 0.3 0)[662] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.51 0 0.3 0))[663] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[664] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[665] [666] ⎕wself←"fmBatchDefine.fOutOpt.cbdataind" ⎕wi "New" "Combo"[667] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.cbdataind"[668] Fieldcontrol←Fieldcontrol OVER "Combo"[669] ⎕wi "∆name" "dataind"[670] ⎕wi "∆type" "Char"[671] ⎕wi "∆mandatory" 1[672] ⎕wi "∆helpid" 5413[673] ⎕wi "tooltip" "Indicate if any Printout of the Input Data File is desired"[674] ⎕wi "style" 16 128 256 2[675] ⎕wi "∆where" (2 2⍴0.57 0 0.3 0)[676] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.57 0 0.3 0))[677] PickList←⍙POPUPSdict ReadDictFile "DataInd"[678] PickList←⊃m2n 1 0↓PickList[679] ⎕wi "list" PickList[680] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[681] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' "[682] [683] ⎕wself←"fmBatchDefine.fOutOpt.lldataind" ⎕wi "New" "Label"[684] ⎕wi "scale" 5[685] ⎕wi "style" 2[686] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Input Data File⍺in Text Output")))[687] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Input Data File⍺in Text Output")[688] where←4↑,"fmBatchDefine.fOutOpt.cbdataind" ⎕wi "∆where"[689] size←1↑"fmBatchDefine.fOutOpt.cbdataind" ⎕wi "extent"[690] size←¯3⌈0.5×(1↑⎕wi "extent")-size[691] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[692] ⎕wi "∆where" ((x,2)⍴where)[693] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize ⎕wi "∆where")[694] [695] ⎕wself←"fmBatchDefine.fOutOpt.ckmemsumm" ⎕wi "New" "Check"[696] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckmemsumm"[697] Fieldcontrol←Fieldcontrol OVER "Check"[698] ⎕wi "∆name" "memsumm"[699] ⎕wi "∆type" "Check"[700] ⎕wi "∆helpid" 5414[701] ⎕wi "tooltip" "Indicate if a Summary of Results by Member is desired"[702] ⎕wi "style" 0[703] ⎕wi "caption" "Consolidate Member Results"[704] ⎕wi "∆where" (2 2⍴0.65 0 0.3 0)[705] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.65 0 0.3 0))[706] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[707] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[708] [709] ⎕wself←"fmBatchDefine.fOutOpt.ckvalout" ⎕wi "New" "Check"[710] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckvalout"[711] Fieldcontrol←Fieldcontrol OVER "Check"[712] ⎕wi "∆name" "valout"[713] ⎕wi "∆type" "Check"[714] ⎕wi "visible" (¯1+2×0)[715] ⎕wi "tooltip" "Indicate if a PUC Output is desired"[716] ⎕wi "style" 0[717] ⎕wi "caption" "PUC Output"[718] ⎕wi "∆where" (2 2⍴0.72 0 0.3 0)[719] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.72 0 0.3 0))[720] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[721] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[722] [723] ⎕wself←"fmBatchDefine.fOutOpt.ckkeepfile" ⎕wi "New" "Check"[724] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckkeepfile"[725] Fieldcontrol←Fieldcontrol OVER "Check"[726] ⎕wi "∆name" "keepfile"[727] ⎕wi "∆type" "Check"[728] ⎕wi "visible" (¯1+2×0)[729] ⎕wi "tooltip" "Indicate if you wish to retain the 'Notional Members' Data File"[730] ⎕wi "style" 0[731] ⎕wi "caption" "Retain 'Notional Members' Data File"[732] ⎕wi "∆where" (2 2⍴0.79 0 0.3 0)[733] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.79 0 0.3 0))[734] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[735] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[736] [737] ⎕wself←"fmBatchDefine.fOutOpt.ckSSexport" ⎕wi "New" "Check"[738] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckSSexport"[739] Fieldcontrol←Fieldcontrol OVER "Check"[740] ⎕wi "∆name" "SSexport"[741] ⎕wi "∆type" "Check"[742] ⎕wi "visible" (¯1+2×gmc∨uk=1)[743] ⎕wi "∆helpid" 5415[744] ⎕wi "tooltip" "Indicate if Individual Member Results are to exported to a Spreadsheet Import (CSV) File"[745] ⎕wi "style" 0[746] ⎕wi "caption" "Export Individual Member Results"[747] ⎕wi "∆where" (2 2⍴0.86 0 0.3 0)[748] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.86 0 0.3 0))[749] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[750] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[751] [752] ⎕wself←"fmBatchDefine.fOutOpt.ckSSexpparms" ⎕wi "New" "Check"[753] Fieldlist←Fieldlist OVER "fmBatchDefine.fOutOpt.ckSSexpparms"[754] Fieldcontrol←Fieldcontrol OVER "Check"[755] ⎕wi "∆name" "SSexpparms"[756] ⎕wi "∆type" "Check"[757] ⎕wi "visible" (¯1+2×0)[758] ⎕wi "tooltip" "Indicate if the Extended Version of Member Results are to exported to a Spreadsheet Import (CSV) File"[759] ⎕wi "style" 0[760] ⎕wi "caption" "Export Extended Version of Individual Member Results"[761] ⎕wi "∆where" (2 2⍴0.93 0 0.3 0)[762] ⎕wi "where" (("fmBatchDefine.fOutOpt" ⎕wi "size") Win∆Resize (2 2⍴0.93 0 0.3 0))[763] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[764] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') Batch_Define 'Change' )"[765] [766] "fmBatchDefine" ⎕wi "∆multifile" ""[767] "fmBatchDefine" ⎕wi "∆singlefile" ""[768] "fmBatchDefine" ⎕wi "∆format" ""[769] "fmBatchDefine" ⎕wi "∆financial" 0[770] "fmBatchDefine" ⎕wi "∆relrules" 0[771] "fmBatchDefine" ⎕wi "∆parm" 0[772] "fmBatchDefine" ⎕wi "∆decr" 0[773] "fmBatchDefine" ⎕wi "∆file" 0[774] "fmBatchDefine" ⎕wi "∆codefile" CodeFile[775] "fmBatchDefine" ⎕wi "∆inputstype" "ClientFile"[776] "fmBatchDefine" ⎕wi "∆inputsentry" "Single"[777] "fmBatchDefine" ⎕wi "∆savecn" (⍳0)[778] "fmBatchDefine" ⎕wi "∆savedesc" ""[779] list←list OVER "fmBatchDefine"[780] "fmBatchDefine" ⎕wi "∆fieldlist" Fieldlist[781] "fmBatchDefine" ⎕wi "∆fieldcontrol" Fieldcontrol[782] childlist←"fmSV" ⎕wi "∆childlist"[783] list←(⊃¯1↑childlist) OVER list[784] childlist[⍴childlist]←⊂list[785] "fmSV" ⎕wi "∆childlist" childlist[786] list←,⎕split list[787] 0 0⍴((∨/¨(⊂".mBatch_Define")⍷¨list)/list) MultiWI "enabled" 1[788] :if 300<fnsize[789]     (fnsize fnsize ".") Win∆ProgressBar "MemberUpdate"[790]     Win∆ProgressBar "Hide"[791] :endif[792] "Init" OpenParameters "Batch_Define"[793] "fmBatchDefine.bnBatch_DefineHelp" ⎕wi "visible" 1[794] "fmBatchDefine.bnBatch_DefineQuit" ⎕wi "visible" 1[795] "fmBatchDefine.bnBatch_DefineSave" ⎕wi "visible" 1[796] "#" ⎕wi "focus" "fmBatchDefine.lsValMeth"[797] :if ~0∊⍴,Error←Win∆Initialise "Batch_Define"[798]     "Quit" EndModule Module[799]     "fmSV" ⎕wi "pointer" 0[800]     0 0⍴"fmBatchDefine" ⎕wi "Delete"[801]     :return[802] :endif[803] :if bar_open←commandbar^"Multi"≡"Single"[804]     bar_open←0×"fmBatchDefine.mBatch_DefineFile.m" Win∆CommandBar "OKHelp"[805] :endif[806] "fmBatchDefine" ⎕wi "Paint"[807] "fmSV" ⎕wi "pointer" 11[808] "fmBatchDefine" ⎕wi "onWait" "0 0⍴Batch_Define 'Wait' ⋄ 'fmBatchDefine' ⎕wi 'modified' 0"[809] 0 0⍴"fmBatchDefine" ⎕wi "Wait"[810] 0 0⍴"fmBatchDefine" ⎕wi "Delete"[811] "fmSV" ⎕wi "pointer" 0 ∇