∇ Container←Form_Make;⎕wself;ControlName;childlist;list;Fieldlist;Fieldcontrol;FrameWidth;Caption;buttonsize;buttonwhere;where;size;alignment;Header;PickList;NameList;value;sortorder;SortList;MaxRow;MaxCol;Parent;level;node;no;nn;NN;x;fnsize;framelist;relTests[1] [2] Fieldlist←Fieldcontrol←list←0 0⍴""[3] "fmSV" ⎕wi "pointer" 13[4] buttonsize←25 65 ⋄ buttonwhere←¯5[5] FormName ⎕wi "caption" ((FormName ⎕wi "caption")," - Migration of SuperVal21 Parameters")[6] "fmSV" ⎕wi "∆caption" (("fmSV" ⎕wi "∆caption"),⊂("fmSV" ⎕wi "caption"))[7] :if 300<fnsize←1↑⍴⎕cr "Form_Make"[8]     "Generating Form" Win∆ProgressBar "Open"[9]     ("Menu Items:" "Form Controls:") Win∆ProgressBar "SetLabels"[10]     (1 1 "Help About") Win∆ProgressBar "FileUpdate"[11] :endif[12] [13] Container←"∆Wizard"[14] [15] ⎕wself←"fmMigration" ⎕wi "New" "Form" "Hide"[16] ⎕wi "caption" ("fmSV" ⎕wi "caption")[17] ⎕wi "scale" 5[18] ⎕wi "font" ("fmSV" ⎕wi "font")[19] ⎕wi "border" 2 32 64[20] ⎕wi "where" (Win∆CentrePos 1.25 1.25×768 1024×1⌈CharSize÷13 6)[21] ⎕wi "limitwhere" (0.8×¯2↑⎕wi "where")[22] ⎕wi "tooltipwidth" 200[23] ⎕wi "onResize" "AutoResize"[24] ⎕wi "onClose" "ExitSystem ''"[25] ControlName←"fmMigration"[26] relTests←0[27] 0 Menu_Make "fmSV"[28] 0 Menu_Make "fmMigration"[29] "fmMigration" Win∆CutCopyPaste "Build"[30] list←list OVER "fmMigration.bnV9MigrationHelp"[31] ⎕wself←"fmMigration.bnV9MigrationHelp" ⎕wi "New" "Button"[32] ⎕wi "deferexit" 1[33] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[34] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][35] ⎕wi "∆where" ((x,2)⍴where)[36] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize ⎕wi "∆where")[37] ⎕wi "tooltip" "SuperVal Help"[38] ⎕wi "onClick" ("fmSV.mV9MigrationHelp.mContext"⎕wi "onClick")[39] ⎕wi "caption" "Help"[40] :if buttonimage[41]     ⎕wi "imagelist" "fmSV.iStandard"[42]     ⎕wi "imageindex" 12[43] :endif[44] ⎕wi "visible" ¯1[45] ⎕wi "onMouseDown" "∆HelpField←'#' ⎕wi 'focus' "[46] list←list OVER "fmMigration.bnV9MigrationQuit"[47] ⎕wself←"fmMigration.bnV9MigrationQuit" ⎕wi "New" "Button"[48] ⎕wi "style" 2[49] ⎕wi "deferexit" 1[50] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[51] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][52] ⎕wi "∆where" ((x,2)⍴where)[53] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize ⎕wi "∆where")[54] ⎕wi "tooltip" "Cancel and Return"[55] ⎕wi "onClick" ("fmSV.mV9MigrationFile.mQuit"⎕wi "onClick")[56] ⎕wi "caption" "Cancel"[57] ⎕wi "∆helpid" 4117[58] ⎕wi "order" .5[59] ⎕wi "visible" ¯1[60] list←list OVER "fmMigration.bnV9MigrationNext"[61] ⎕wself←"fmMigration.bnV9MigrationNext" ⎕wi "New" "Button"[62] ⎕wi "style" 1[63] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[64] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][65] ⎕wi "∆where" ((x,2)⍴where)[66] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize ⎕wi "∆where")[67] ⎕wi "tooltip" "Move on to Next Form"[68] ⎕wi "onClick" ("fmSV.mV9MigrationFile.mNext"⎕wi "onClick")[69] ⎕wi "caption" "Next"[70] :if buttonimage[71]     ⎕wi "imagelist" "fmSV.iStandard"[72]     ⎕wi "imageindex" 29[73] :endif[74] ⎕wi "∆helpid" 4118[75] list←list OVER "fmMigration.bnV9MigrationBack"[76] ⎕wself←"fmMigration.bnV9MigrationBack" ⎕wi "New" "Button"[77] ⎕wi "enabled" (0)[78] ⎕wi "extent" (size←1×buttonsize×1⌈CharSize÷13 6)[79] x←0.5×⍴where←Win∆Calcwhere 1,(¯10-size[1]),1,buttonwhere←buttonwhere-5+size[2][80] ⎕wi "∆where" ((x,2)⍴where)[81] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize ⎕wi "∆where")[82] ⎕wi "tooltip" "Move back to Previous Form"[83] ⎕wi "onClick" ("fmSV.mV9MigrationFile.mBack"⎕wi "onClick")[84] ⎕wi "caption" "Back"[85] :if buttonimage[86]     ⎕wi "imagelist" "fmSV.iStandard"[87]     ⎕wi "imageindex" 28[88] :endif[89] ⎕wi "∆helpid" 4119[90] framelist←0 0⍴""[91] [92] :if 300<fnsize[93]     ((1↑⎕lc) fnsize "FrameV - Basis Selections") Win∆ProgressBar "MemberUpdate"[94] :endif[95] [96] ⎕wself←"fmMigration.fBases" ⎕wi "New" "Frame"[97] ⎕wi "scale" 5[98] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[99] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[100] ⎕wi "caption" "Basis Selections"[101] ⎕wi "style" 0[102] ⎕wi "onResize" "AutoResize"[103] framelist←framelist OVER "fmMigration.fBases"[104] [105] :if 300<fnsize[106]     ((1↑⎕lc) fnsize "FrameV - Actives Bases") Win∆ProgressBar "MemberUpdate"[107] :endif[108] [109] ⎕wself←"fmMigration.fBases.fActives" ⎕wi "New" "Frame"[110] ⎕wi "scale" 5[111] ⎕wi "∆where" (4 2⍴0.03 0 0 0 0.32 0 1 0)[112] ⎕wi "where" (("fmMigration.fBases" ⎕wi "size") Win∆Resize (4 2⍴0.03 0 0 0 0.32 0 1 0))[113] ⎕wi "caption" "Actives Bases"[114] ⎕wi "style" 0[115] ⎕wi "onResize" "AutoResize"[116] [117] ⎕wself←"fmMigration.fBases.fActives.lvActBases" ⎕wi "New" "Listview"[118] Fieldlist←Fieldlist OVER "fmMigration.fBases.fActives.lvActBases"[119] Fieldcontrol←Fieldcontrol OVER "Listview"[120] ⎕wi "∆name" "ActBases"[121] ⎕wi "∆type" "ListviewM"[122] ⎕wi "∆helpid" 4120[123] ⎕wi "tooltip" "Select the Superval/21 Bases you wish to be migrated"[124] list←list OVER "fmMigration.fBases.fActives.lvActBases"[125] ⎕wi "scale" 5[126] ⎕wi "viewmode" "report"[127] ⎕wi "style" 1 4 0[128] ⎕wi "∆where" (4 2⍴0.08 0 0.01 0 0.82 0 0.7 0)[129] ⎕wi "where" (("fmMigration.fBases.fActives" ⎕wi "size") Win∆Resize (4 2⍴0.08 0 0.01 0 0.82 0 0.7 0))[130] ⎕wi "∆update" "'A' GetS21Bases MigFolder"[131] (PickList NameList sortorder SortList)←4↑'A' GetS21Bases MigFolder[132] ⎕wi "list" PickList[133] NameList[;1]←NameList[;1],¨⊂4↑" "[134] ⎕wi "columndisplay" NameList[135] ⎕wi "AutoFit" "header" "all"[136] ⎕wi "∆sortorder" sortorder[137] ⎕wi "∆sortlist" SortList[138] ⎕wi "onColClick" "('fmMigration.fBases.fActives.lvActBases' 'V9Migration') Win∆SortListview ⎕warg"[139] :if 0=⎕nc "listviewDict"[140] listviewDict←MATRIX keysIn ListviewDict[141] :endif[142] :if ~mt sortorder←DLTB ↑((ListviewDict for "Control" "fmMigration.fBases.fActives.lvActBases") for "Parameters" "") at "Sort"[143] ("fmMigration.fBases.fActives.lvActBases" "V9Migration") Win∆SortListview sortorder[144] :else[145] ("fmMigration.fBases.fActives.lvActBases" "V9Migration") Win∆SortListview "Basis File Name"[146] :endif[147] ⎕wi "onResize" "Win∆SizeListview ⎕wi 'self'"[148] ⎕wi "onPaint" "0 Sel∆LabelUpdate 'fmMigration.fBases.fActives.lvActBases' "[149] ⎕wi "onSelect" "0 Sel∆LabelUpdate 'fmMigration.fBases.fActives.lvActBases' ⋄ 0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[150] ⎕wi "onExit" "⍎(0∊⍴,⎕wres←0 List∆CHECK 'fmMigration.fBases.fActives.lvActBases')/'0 0⍴(⊂⎕wi ''name'') V9Migration ''Change'' ' "[151] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[152] ⎕wi "∆rightlabel" "fmMigration.fBases.fActives.lrActBases"[153] [154] ⎕wself←"fmMigration.fBases.fActives.lrActBases" ⎕wi "New" "Label"[155] ⎕wi "scale" 5[156] ⎕wi "extent" (CharSize×¯2↑1,19)[157] ⎕wi "style" 32[158] ⎕wi "caption" " "[159] where←4↑,"fmMigration.fBases.fActives.lvActBases" ⎕wi "∆where"[160] x←0.5×⍴where←Win∆Calcwhere where+((5+1↑2↓"fmMigration.fBases.fActives.lvActBases" ⎕wi "where") CDIV 1↑"fmMigration.fBases.fActives" ⎕wi "size"),0 0 0[161] ⎕wi "∆where" ((x,2)⍴where)[162] ⎕wi "where" (("fmMigration.fBases.fActives" ⎕wi "size") Win∆Resize ⎕wi "∆where")[163] [164] ⎕wself←"fmMigration.fBases.fActives.ckActKeepName" ⎕wi "New" "Check"[165] Fieldlist←Fieldlist OVER "fmMigration.fBases.fActives.ckActKeepName"[166] Fieldcontrol←Fieldcontrol OVER "Check"[167] ⎕wi "∆name" "ActKeepName"[168] ⎕wi "∆type" "Check"[169] ⎕wi "∆helpid" 4121[170] ⎕wi "tooltip" "Check this if Basis File Names are to mirror those used in Superval/21"[171] ⎕wi "style" 0[172] ⎕wi "caption" "Basis File Names to mirror those used in Superval/21"[173] ⎕wi "∆where" (2 2⍴0.3 0 0.75 0)[174] ⎕wi "where" (("fmMigration.fBases.fActives" ⎕wi "size") Win∆Resize (2 2⍴0.3 0 0.75 0))[175] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[176] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[177] [178] ⎕wself←"fmMigration.fBases.fActives.cbActBasisFile" ⎕wi "New" "Combo"[179] Fieldlist←Fieldlist OVER "fmMigration.fBases.fActives.cbActBasisFile"[180] Fieldcontrol←Fieldcontrol OVER "Combo"[181] ⎕wi "∆name" "ActBasisFile"[182] ⎕wi "∆type" "Char"[183] ⎕wi "∆mandatory" 1[184] ⎕wi "∆valid" ('File')[185] ⎕wi "∆helpid" 4122[186] ⎕wi "tooltip" "Specify the Basis Parameters File Name for storing Actives Bases"[187] ⎕wi "limit" 40[188] ⎕wi "onExit" "⍎(mt ,⎕wres←0 INPUT∆CHECK 'fmMigration.fBases.fActives.cbActBasisFile')/'0 0⍴(⊂⎕wi ''name'') V9Migration ''Change'' ' "[189] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[190] ⎕wi "style" 16 128 256 0[191] ⎕wi "∆where" (2 2⍴0.6 0 0.8 0)[192] ⎕wi "where" (("fmMigration.fBases.fActives" ⎕wi "size") Win∆Resize (2 2⍴0.6 0 0.8 0))[193] PickList←'BasisFile' GetParmFiles 1[194] ⎕wi "∆update" "'BasisFile' GetParmFiles 1"[195] PickList←⊃m2n 1 0↓PickList[196] PickList←" " OVER PickList[197] ⎕wi "list" PickList[198] ⎕wi "extent" (150,(¯10+8×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[199] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[200] [201] ⎕wself←"fmMigration.fBases.fActives.llActBasisFile" ⎕wi "New" "Label"[202] ⎕wi "scale" 5[203] ⎕wi "style" 2[204] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Basis⍺File Name")))[205] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Basis⍺File Name")[206] where←4↑,"fmMigration.fBases.fActives.cbActBasisFile" ⎕wi "∆where"[207] size←1↑"fmMigration.fBases.fActives.cbActBasisFile" ⎕wi "extent"[208] size←¯3⌈0.5×(1↑⎕wi "extent")-size[209] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[210] ⎕wi "∆where" ((x,2)⍴where)[211] ⎕wi "where" (("fmMigration.fBases.fActives" ⎕wi "size") Win∆Resize ⎕wi "∆where")[212] [213] :if 300<fnsize[214]     ((1↑⎕lc) fnsize "FrameV - Deferreds Bases") Win∆ProgressBar "MemberUpdate"[215] :endif[216] [217] ⎕wself←"fmMigration.fBases.fDeferreds" ⎕wi "New" "Frame"[218] ⎕wi "scale" 5[219] ⎕wi "∆where" (4 2⍴0.35 0 0 0 0.32 0 1 0)[220] ⎕wi "where" (("fmMigration.fBases" ⎕wi "size") Win∆Resize (4 2⍴0.35 0 0 0 0.32 0 1 0))[221] ⎕wi "caption" "Deferreds Bases"[222] ⎕wi "style" 0[223] ⎕wi "onResize" "AutoResize"[224] [225] ⎕wself←"fmMigration.fBases.fDeferreds.lvDefBases" ⎕wi "New" "Listview"[226] Fieldlist←Fieldlist OVER "fmMigration.fBases.fDeferreds.lvDefBases"[227] Fieldcontrol←Fieldcontrol OVER "Listview"[228] ⎕wi "∆name" "DefBases"[229] ⎕wi "∆type" "ListviewM"[230] ⎕wi "∆helpid" 4120[231] ⎕wi "tooltip" "Select the Superval/21 Bases you wish to be migrated"[232] list←list OVER "fmMigration.fBases.fDeferreds.lvDefBases"[233] ⎕wi "scale" 5[234] ⎕wi "viewmode" "report"[235] ⎕wi "style" 1 4 0[236] ⎕wi "∆where" (4 2⍴0.08 0 0.01 0 0.82 0 0.7 0)[237] ⎕wi "where" (("fmMigration.fBases.fDeferreds" ⎕wi "size") Win∆Resize (4 2⍴0.08 0 0.01 0 0.82 0 0.7 0))[238] ⎕wi "∆update" "'E' GetS21Bases MigFolder"[239] (PickList NameList sortorder SortList)←4↑'E' GetS21Bases MigFolder[240] ⎕wi "list" PickList[241] NameList[;1]←NameList[;1],¨⊂4↑" "[242] ⎕wi "columndisplay" NameList[243] ⎕wi "AutoFit" "header" "all"[244] ⎕wi "∆sortorder" sortorder[245] ⎕wi "∆sortlist" SortList[246] ⎕wi "onColClick" "('fmMigration.fBases.fDeferreds.lvDefBases' 'V9Migration') Win∆SortListview ⎕warg"[247] :if 0=⎕nc "listviewDict"[248] listviewDict←MATRIX keysIn ListviewDict[249] :endif[250] :if ~mt sortorder←DLTB ↑((ListviewDict for "Control" "fmMigration.fBases.fDeferreds.lvDefBases") for "Parameters" "") at "Sort"[251] ("fmMigration.fBases.fDeferreds.lvDefBases" "V9Migration") Win∆SortListview sortorder[252] :else[253] ("fmMigration.fBases.fDeferreds.lvDefBases" "V9Migration") Win∆SortListview "Basis File Name"[254] :endif[255] ⎕wi "onResize" "Win∆SizeListview ⎕wi 'self'"[256] ⎕wi "onPaint" "0 Sel∆LabelUpdate 'fmMigration.fBases.fDeferreds.lvDefBases' "[257] ⎕wi "onSelect" "0 Sel∆LabelUpdate 'fmMigration.fBases.fDeferreds.lvDefBases' ⋄ 0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[258] ⎕wi "onExit" "⍎(0∊⍴,⎕wres←0 List∆CHECK 'fmMigration.fBases.fDeferreds.lvDefBases')/'0 0⍴(⊂⎕wi ''name'') V9Migration ''Change'' ' "[259] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[260] ⎕wi "∆rightlabel" "fmMigration.fBases.fDeferreds.lrDefBases"[261] [262] ⎕wself←"fmMigration.fBases.fDeferreds.lrDefBases" ⎕wi "New" "Label"[263] ⎕wi "scale" 5[264] ⎕wi "extent" (CharSize×¯2↑1,19)[265] ⎕wi "style" 32[266] ⎕wi "caption" " "[267] where←4↑,"fmMigration.fBases.fDeferreds.lvDefBases" ⎕wi "∆where"[268] x←0.5×⍴where←Win∆Calcwhere where+((5+1↑2↓"fmMigration.fBases.fDeferreds.lvDefBases" ⎕wi "where") CDIV 1↑"fmMigration.fBases.fDeferreds" ⎕wi "size"),0 0 0[269] ⎕wi "∆where" ((x,2)⍴where)[270] ⎕wi "where" (("fmMigration.fBases.fDeferreds" ⎕wi "size") Win∆Resize ⎕wi "∆where")[271] [272] ⎕wself←"fmMigration.fBases.fDeferreds.ckDefKeepName" ⎕wi "New" "Check"[273] Fieldlist←Fieldlist OVER "fmMigration.fBases.fDeferreds.ckDefKeepName"[274] Fieldcontrol←Fieldcontrol OVER "Check"[275] ⎕wi "∆name" "DefKeepName"[276] ⎕wi "∆type" "Check"[277] ⎕wi "∆helpid" 4121[278] ⎕wi "tooltip" "Check this if Basis File Names are to mirror those used in Superval/21"[279] ⎕wi "style" 0[280] ⎕wi "caption" "Basis File Names to mirror those used in Superval/21"[281] ⎕wi "∆where" (2 2⍴0.3 0 0.75 0)[282] ⎕wi "where" (("fmMigration.fBases.fDeferreds" ⎕wi "size") Win∆Resize (2 2⍴0.3 0 0.75 0))[283] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[284] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[285] [286] ⎕wself←"fmMigration.fBases.fDeferreds.cbDefBasisFile" ⎕wi "New" "Combo"[287] Fieldlist←Fieldlist OVER "fmMigration.fBases.fDeferreds.cbDefBasisFile"[288] Fieldcontrol←Fieldcontrol OVER "Combo"[289] ⎕wi "∆name" "DefBasisFile"[290] ⎕wi "∆type" "Char"[291] ⎕wi "∆mandatory" 1[292] ⎕wi "∆valid" ('File')[293] ⎕wi "∆helpid" 4122[294] ⎕wi "tooltip" "Specify the Basis Parameters File Name for storing Actives Bases"[295] ⎕wi "limit" 40[296] ⎕wi "onExit" "⍎(mt ,⎕wres←0 INPUT∆CHECK 'fmMigration.fBases.fDeferreds.cbDefBasisFile')/'0 0⍴(⊂⎕wi ''name'') V9Migration ''Change'' ' "[297] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[298] ⎕wi "style" 16 128 256 0[299] ⎕wi "∆where" (2 2⍴0.6 0 0.8 0)[300] ⎕wi "where" (("fmMigration.fBases.fDeferreds" ⎕wi "size") Win∆Resize (2 2⍴0.6 0 0.8 0))[301] PickList←'BasisFile' GetParmFiles 1[302] ⎕wi "∆update" "'BasisFile' GetParmFiles 1"[303] PickList←⊃m2n 1 0↓PickList[304] PickList←" " OVER PickList[305] ⎕wi "list" PickList[306] ⎕wi "extent" (150,(¯10+8×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[307] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[308] [309] ⎕wself←"fmMigration.fBases.fDeferreds.llDefBasisFile" ⎕wi "New" "Label"[310] ⎕wi "scale" 5[311] ⎕wi "style" 2[312] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Basis⍺File Name")))[313] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Basis⍺File Name")[314] where←4↑,"fmMigration.fBases.fDeferreds.cbDefBasisFile" ⎕wi "∆where"[315] size←1↑"fmMigration.fBases.fDeferreds.cbDefBasisFile" ⎕wi "extent"[316] size←¯3⌈0.5×(1↑⎕wi "extent")-size[317] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[318] ⎕wi "∆where" ((x,2)⍴where)[319] ⎕wi "where" (("fmMigration.fBases.fDeferreds" ⎕wi "size") Win∆Resize ⎕wi "∆where")[320] [321] :if 300<fnsize[322]     ((1↑⎕lc) fnsize "FrameV - Pensioners Bases") Win∆ProgressBar "MemberUpdate"[323] :endif[324] [325] ⎕wself←"fmMigration.fBases.fPensioners" ⎕wi "New" "Frame"[326] ⎕wi "scale" 5[327] ⎕wi "∆where" (4 2⍴0.67 0 0 0 0.32 0 1 0)[328] ⎕wi "where" (("fmMigration.fBases" ⎕wi "size") Win∆Resize (4 2⍴0.67 0 0 0 0.32 0 1 0))[329] ⎕wi "caption" "Pensioners Bases"[330] ⎕wi "style" 0[331] ⎕wi "onResize" "AutoResize"[332] [333] ⎕wself←"fmMigration.fBases.fPensioners.lvPenBases" ⎕wi "New" "Listview"[334] Fieldlist←Fieldlist OVER "fmMigration.fBases.fPensioners.lvPenBases"[335] Fieldcontrol←Fieldcontrol OVER "Listview"[336] ⎕wi "∆name" "PenBases"[337] ⎕wi "∆type" "ListviewM"[338] ⎕wi "∆helpid" 4120[339] ⎕wi "tooltip" "Select the Superval/21 Bases you wish to be migrated"[340] list←list OVER "fmMigration.fBases.fPensioners.lvPenBases"[341] ⎕wi "scale" 5[342] ⎕wi "viewmode" "report"[343] ⎕wi "style" 1 4 0[344] ⎕wi "∆where" (4 2⍴0.08 0 0.01 0 0.82 0 0.7 0)[345] ⎕wi "where" (("fmMigration.fBases.fPensioners" ⎕wi "size") Win∆Resize (4 2⍴0.08 0 0.01 0 0.82 0 0.7 0))[346] ⎕wi "∆update" "'NP' GetS21Bases MigFolder"[347] (PickList NameList sortorder SortList)←4↑'NP' GetS21Bases MigFolder[348] ⎕wi "list" PickList[349] NameList[;1]←NameList[;1],¨⊂4↑" "[350] ⎕wi "columndisplay" NameList[351] ⎕wi "AutoFit" "header" "all"[352] ⎕wi "∆sortorder" sortorder[353] ⎕wi "∆sortlist" SortList[354] ⎕wi "onColClick" "('fmMigration.fBases.fPensioners.lvPenBases' 'V9Migration') Win∆SortListview ⎕warg"[355] :if 0=⎕nc "listviewDict"[356] listviewDict←MATRIX keysIn ListviewDict[357] :endif[358] :if ~mt sortorder←DLTB ↑((ListviewDict for "Control" "fmMigration.fBases.fPensioners.lvPenBases") for "Parameters" "") at "Sort"[359] ("fmMigration.fBases.fPensioners.lvPenBases" "V9Migration") Win∆SortListview sortorder[360] :else[361] ("fmMigration.fBases.fPensioners.lvPenBases" "V9Migration") Win∆SortListview "Basis File Name"[362] :endif[363] ⎕wi "onResize" "Win∆SizeListview ⎕wi 'self'"[364] ⎕wi "onPaint" "0 Sel∆LabelUpdate 'fmMigration.fBases.fPensioners.lvPenBases' "[365] ⎕wi "onSelect" "0 Sel∆LabelUpdate 'fmMigration.fBases.fPensioners.lvPenBases' ⋄ 0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[366] ⎕wi "onExit" "⍎(0∊⍴,⎕wres←0 List∆CHECK 'fmMigration.fBases.fPensioners.lvPenBases')/'0 0⍴(⊂⎕wi ''name'') V9Migration ''Change'' ' "[367] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[368] ⎕wi "∆rightlabel" "fmMigration.fBases.fPensioners.lrPenBases"[369] [370] ⎕wself←"fmMigration.fBases.fPensioners.lrPenBases" ⎕wi "New" "Label"[371] ⎕wi "scale" 5[372] ⎕wi "extent" (CharSize×¯2↑1,19)[373] ⎕wi "style" 32[374] ⎕wi "caption" " "[375] where←4↑,"fmMigration.fBases.fPensioners.lvPenBases" ⎕wi "∆where"[376] x←0.5×⍴where←Win∆Calcwhere where+((5+1↑2↓"fmMigration.fBases.fPensioners.lvPenBases" ⎕wi "where") CDIV 1↑"fmMigration.fBases.fPensioners" ⎕wi "size"),0 0 0[377] ⎕wi "∆where" ((x,2)⍴where)[378] ⎕wi "where" (("fmMigration.fBases.fPensioners" ⎕wi "size") Win∆Resize ⎕wi "∆where")[379] [380] ⎕wself←"fmMigration.fBases.fPensioners.ckPenKeepName" ⎕wi "New" "Check"[381] Fieldlist←Fieldlist OVER "fmMigration.fBases.fPensioners.ckPenKeepName"[382] Fieldcontrol←Fieldcontrol OVER "Check"[383] ⎕wi "∆name" "PenKeepName"[384] ⎕wi "∆type" "Check"[385] ⎕wi "∆helpid" 4121[386] ⎕wi "tooltip" "Check this if Basis File Names are to mirror those used in Superval/21"[387] ⎕wi "style" 0[388] ⎕wi "caption" "Basis File Names to mirror those used in Superval/21"[389] ⎕wi "∆where" (2 2⍴0.3 0 0.75 0)[390] ⎕wi "where" (("fmMigration.fBases.fPensioners" ⎕wi "size") Win∆Resize (2 2⍴0.3 0 0.75 0))[391] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[392] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[393] [394] ⎕wself←"fmMigration.fBases.fPensioners.cbPenBasisFile" ⎕wi "New" "Combo"[395] Fieldlist←Fieldlist OVER "fmMigration.fBases.fPensioners.cbPenBasisFile"[396] Fieldcontrol←Fieldcontrol OVER "Combo"[397] ⎕wi "∆name" "PenBasisFile"[398] ⎕wi "∆type" "Char"[399] ⎕wi "∆mandatory" 1[400] ⎕wi "∆valid" ('File')[401] ⎕wi "∆helpid" 4122[402] ⎕wi "tooltip" "Specify the Basis Parameters File Name for storing Actives Bases"[403] ⎕wi "limit" 40[404] ⎕wi "onExit" "⍎(mt ,⎕wres←0 INPUT∆CHECK 'fmMigration.fBases.fPensioners.cbPenBasisFile')/'0 0⍴(⊂⎕wi ''name'') V9Migration ''Change'' ' "[405] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[406] ⎕wi "style" 16 128 256 0[407] ⎕wi "∆where" (2 2⍴0.6 0 0.8 0)[408] ⎕wi "where" (("fmMigration.fBases.fPensioners" ⎕wi "size") Win∆Resize (2 2⍴0.6 0 0.8 0))[409] PickList←'BasisFile' GetParmFiles 1[410] ⎕wi "∆update" "'BasisFile' GetParmFiles 1"[411] PickList←⊃m2n 1 0↓PickList[412] PickList←" " OVER PickList[413] ⎕wi "list" PickList[414] ⎕wi "extent" (150,(¯10+8×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[415] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[416] [417] ⎕wself←"fmMigration.fBases.fPensioners.llPenBasisFile" ⎕wi "New" "Label"[418] ⎕wi "scale" 5[419] ⎕wi "style" 2[420] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Basis⍺File Name")))[421] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Basis⍺File Name")[422] where←4↑,"fmMigration.fBases.fPensioners.cbPenBasisFile" ⎕wi "∆where"[423] size←1↑"fmMigration.fBases.fPensioners.cbPenBasisFile" ⎕wi "extent"[424] size←¯3⌈0.5×(1↑⎕wi "extent")-size[425] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[426] ⎕wi "∆where" ((x,2)⍴where)[427] ⎕wi "where" (("fmMigration.fBases.fPensioners" ⎕wi "size") Win∆Resize ⎕wi "∆where")[428] [429] :if 300<fnsize[430]     ((1↑⎕lc) fnsize "FrameV - Scheme Parameters - Anomalies") Win∆ProgressBar "MemberUpdate"[431] :endif[432] [433] ⎕wself←"fmMigration.fAnomaly" ⎕wi "New" "Frame"[434] ⎕wi "scale" 5[435] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[436] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[437] ⎕wi "caption" "Scheme Parameters - Anomalies"[438] ⎕wi "style" 0[439] ⎕wi "onResize" "AutoResize"[440] framelist←framelist OVER "fmMigration.fAnomaly"[441] [442] ⎕wself←"fmMigration.fAnomaly.webAnomaly" ⎕wi "New" "Microsoft Web Browser"[443] Fieldlist←Fieldlist OVER "fmMigration.fAnomaly.webAnomaly"[444] Fieldcontrol←Fieldcontrol OVER "Microsoft Web Browser"[445] ⎕wi "∆name" "Anomaly"[446] ⎕wi "∆type" "Web"[447] ⎕wi "∆helpid" 4123[448] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.9 0 0.98 0)[449] ⎕wi "where" (("fmMigration.fAnomaly" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.9 0 0.98 0))[450] [451] ⎕wself←"fmMigration.fAnomaly.llAnomaly" ⎕wi "New" "Label"[452] ⎕wi "scale" 5[453] ⎕wi "style" 2[454] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Anomalies Report"))[455] ⎕wi "caption" "Anomalies Report"[456] where←4↑,"fmMigration.fAnomaly.webAnomaly" ⎕wi "∆where"[457] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[458] ⎕wi "∆where" ((x,2)⍴where)[459] ⎕wi "where" (("fmMigration.fAnomaly" ⎕wi "size") Win∆Resize ⎕wi "∆where")[460] [461] :if 300<fnsize[462]     ((1↑⎕lc) fnsize "FrameV - Migration Parameters") Win∆ProgressBar "MemberUpdate"[463] :endif[464] [465] ⎕wself←"fmMigration.fParms" ⎕wi "New" "Frame"[466] ⎕wi "scale" 5[467] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[468] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[469] ⎕wi "caption" "Migration Parameters"[470] ⎕wi "style" 0[471] ⎕wi "onResize" "AutoResize"[472] framelist←framelist OVER "fmMigration.fParms"[473] [474] :if 300<fnsize[475]     ((1↑⎕lc) fnsize "FrameV - Migration Names") Win∆ProgressBar "MemberUpdate"[476] :endif[477] [478] ⎕wself←"fmMigration.fParms.fNames" ⎕wi "New" "Frame"[479] ⎕wi "scale" 5[480] ⎕wi "∆where" (4 2⍴0.03 0 0 0 0.17 0 1 0)[481] ⎕wi "where" (("fmMigration.fParms" ⎕wi "size") Win∆Resize (4 2⍴0.03 0 0 0 0.17 0 1 0))[482] ⎕wi "caption" "Migration Names"[483] ⎕wi "style" 0[484] ⎕wi "onResize" "AutoResize"[485] [486] ⎕wself←"fmMigration.fParms.fNames.cbmigTable" ⎕wi "New" "Combo"[487] Fieldlist←Fieldlist OVER "fmMigration.fParms.fNames.cbmigTable"[488] Fieldcontrol←Fieldcontrol OVER "Combo"[489] ⎕wi "∆name" "migTable"[490] ⎕wi "∆type" "Char"[491] ⎕wi "∆helpid" 4124[492] ⎕wi "tooltip" "Select the Migration Names Table"[493] ⎕wi "style" 16 128 256 2[494] ⎕wi "∆where" (2 2⍴0.4 0 0.35 0)[495] ⎕wi "where" (("fmMigration.fParms.fNames" ⎕wi "size") Win∆Resize (2 2⍴0.4 0 0.35 0))[496] PickList←GetClientParms 'Migration_Names'[497] ⎕wi "∆update" "GetClientParms 'Migration_Names'"[498] PickList←⊃m2n 1 0↓PickList[499] PickList←" " OVER PickList[500] ⎕wi "list" PickList[501] ⎕wi "extent" (150,(¯10+6×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[502] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[503] [504] ⎕wself←"fmMigration.fParms.fNames.llmigTable" ⎕wi "New" "Label"[505] ⎕wi "scale" 5[506] ⎕wi "style" 2[507] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Table of Migration Default Names"))[508] ⎕wi "caption" "Table of Migration Default Names"[509] where←4↑,"fmMigration.fParms.fNames.cbmigTable" ⎕wi "∆where"[510] x←0.5×⍴where←Win∆Calcwhere where-0 ¯3 0,10+¯1↑⎕wi "extent"[511] ⎕wi "∆where" ((x,2)⍴where)[512] ⎕wi "where" (("fmMigration.fParms.fNames" ⎕wi "size") Win∆Resize ⎕wi "∆where")[513] list←list OVER "fmMigration.fParms.fNames.bnV9MigrationDefaults"[514] ⎕wself←"fmMigration.fParms.fNames.bnV9MigrationDefaults" ⎕wi "New" "Button"[515] ⎕wi "deferexit" 1[516] ⎕wi "extent" (size←1.4 1.384615385×buttonsize×1⌈CharSize÷13 6)[517] ⎕wi "∆where" (2 2⍴0.35 0 0.85 0)[518] ⎕wi "where" (("fmMigration.fParms.fNames" ⎕wi "size") Win∆Resize (2 2⍴0.35 0 0.85 0))[519] ⎕wi "tooltip" "Ad/Edit Default Migration Names"[520] ⎕wi "onClick" ("fmSV.mV9MigrationFile.mDefs"⎕wi "onClick")[521] ⎕wi "∆helpid" 4125[522] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Add/Edit⍺Default Names")[523] [524] :if 300<fnsize[525]     ((1↑⎕lc) fnsize "FrameV - Financial Globals") Win∆ProgressBar "MemberUpdate"[526] :endif[527] [528] ⎕wself←"fmMigration.fParms.fFinancials" ⎕wi "New" "Frame"[529] ⎕wi "scale" 5[530] ⎕wi "∆where" (4 2⍴0.2 0 0 0 0.43 0 1 0)[531] ⎕wi "where" (("fmMigration.fParms" ⎕wi "size") Win∆Resize (4 2⍴0.2 0 0 0 0.43 0 1 0))[532] ⎕wi "caption" "Financial Globals"[533] ⎕wi "style" 0[534] ⎕wi "onResize" "AutoResize"[535] [536] ⎕wself←"fmMigration.fParms.fFinancials.cbfaParms" ⎕wi "New" "Combo"[537] Fieldlist←Fieldlist OVER "fmMigration.fParms.fFinancials.cbfaParms"[538] Fieldcontrol←Fieldcontrol OVER "Combo"[539] ⎕wi "∆name" "faParms"[540] ⎕wi "∆type" "Char"[541] ⎕wi "∆mandatory" 1[542] ⎕wi "∆helpid" 4126[543] ⎕wi "tooltip" "Select or Specify the description of the Financial Parameters"[544] ⎕wi "limit" 50[545] ⎕wi "onExit" "⍎(mt ,⎕wres←0 INPUT∆CHECK 'fmMigration.fParms.fFinancials.cbfaParms')/'0 0⍴(⊂⎕wi ''name'') V9Migration ''Change'' ' "[546] ⎕wi "onExitError" "Win∆ExitError ⎕warg"[547] ⎕wi "style" 16 128 256 0[548] ⎕wi "∆where" (2 2⍴0.15 0 0.35 0)[549] ⎕wi "where" (("fmMigration.fParms.fFinancials" ⎕wi "size") Win∆Resize (2 2⍴0.15 0 0.35 0))[550] PickList←GetClientParms 'Financials' 0[551] ⎕wi "∆update" "GetClientParms 'Financials' 0"[552] PickList←⊃m2n 1 0↓PickList[553] PickList←" " OVER PickList[554] ⎕wi "list" PickList[555] ⎕wi "extent" (150,(¯10+8×¯1↑CharSize)+¯1↑Win∆TextSize ((0,⎕wi "limit")⌈⍴PickList)↑PickList)[556] ⎕wi "onClick" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change' "[557] [558] ⎕wself←"fmMigration.fParms.fFinancials.llfaParms" ⎕wi "New" "Label"[559] ⎕wi "scale" 5[560] ⎕wi "style" 2[561] ⎕wi "extent" (↑⎕wi "Draw" ("?text" (("⍺",⎕tcnl) char_replace "Store Financial Globals⍺under Description")))[562] ⎕wi "caption" (("⍺",⎕tcnl) char_replace "Store Financial Globals⍺under Description")[563] where←4↑,"fmMigration.fParms.fFinancials.cbfaParms" ⎕wi "∆where"[564] size←1↑"fmMigration.fParms.fFinancials.cbfaParms" ⎕wi "extent"[565] size←¯3⌈0.5×(1↑⎕wi "extent")-size[566] x←0.5×⍴where←Win∆Calcwhere where-0,size,0,10+¯1↑⎕wi "extent"[567] ⎕wi "∆where" ((x,2)⍴where)[568] ⎕wi "where" (("fmMigration.fParms.fFinancials" ⎕wi "size") Win∆Resize ⎕wi "∆where")[569] [570] ⎕wself←"fmMigration.fParms.fFinancials.ckmigParm3" ⎕wi "New" "Check"[571] Fieldlist←Fieldlist OVER "fmMigration.fParms.fFinancials.ckmigParm3"[572] Fieldcontrol←Fieldcontrol OVER "Check"[573] ⎕wi "∆name" "migParm[3;]"[574] ⎕wi "∆type" "Check"[575] ⎕wi "∆helpid" 4127[576] ⎕wi "tooltip" "Check this to differentiate Global Financial Assumptions by Membership Groups (ie Actives, Deferreds and Pensioners kept separate)"[577] ⎕wi "style" 0[578] ⎕wi "caption" "Match Existing Financial Globals where matching Financial Assumptions found"[579] ⎕wi "∆where" (2 2⍴0.32 0 0.35 0)[580] ⎕wi "where" (("fmMigration.fParms.fFinancials" ⎕wi "size") Win∆Resize (2 2⍴0.32 0 0.35 0))[581] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[582] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[583] [584] ⎕wself←"fmMigration.fParms.fFinancials.lHeading" ⎕wi "New" "Label"[585] ⎕wi "scale" 5[586] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Differentiate unnamed/unmatched Global Financial Assumptions by the following:"))[587] ⎕wi "caption" "Differentiate unnamed/unmatched Global Financial Assumptions by the following:"[588] ⎕wi "∆where" (2 2⍴0.5 0 0.35 0)[589] ⎕wi "where" (("fmMigration.fParms.fFinancials" ⎕wi "size") Win∆Resize (2 2⍴0.5 0 0.35 0))[590] [591] ⎕wself←"fmMigration.fParms.fFinancials.ckmigParm1" ⎕wi "New" "Check"[592] Fieldlist←Fieldlist OVER "fmMigration.fParms.fFinancials.ckmigParm1"[593] Fieldcontrol←Fieldcontrol OVER "Check"[594] ⎕wi "∆name" "migParm[1;]"[595] ⎕wi "∆type" "Check"[596] ⎕wi "∆helpid" 4127[597] ⎕wi "tooltip" "Check this to differentiate Global Financial Assumptions by Membership Groups (ie Actives, Deferreds and Pensioners kept separate)"[598] ⎕wi "style" 0[599] ⎕wi "caption" "Membership Groups (ie Actives, Deferreds and Pensioners kept separate)"[600] ⎕wi "∆where" (2 2⍴0.67 0 0.35 0)[601] ⎕wi "where" (("fmMigration.fParms.fFinancials" ⎕wi "size") Win∆Resize (2 2⍴0.67 0 0.35 0))[602] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[603] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[604] [605] ⎕wself←"fmMigration.fParms.fFinancials.ckmigParm2" ⎕wi "New" "Check"[606] Fieldlist←Fieldlist OVER "fmMigration.fParms.fFinancials.ckmigParm2"[607] Fieldcontrol←Fieldcontrol OVER "Check"[608] ⎕wi "∆name" "migParm[2;]"[609] ⎕wi "∆type" "Check"[610] ⎕wi "∆helpid" 4127[611] ⎕wi "tooltip" "Check this to differentiate Global Financial Assumptions by the Field Types (eg Pre and Post Retirement Interest Rates kept separate)"[612] ⎕wi "style" 0[613] ⎕wi "caption" "Field Types (eg Pre and Post Retirement Interest Rates kept separate)"[614] ⎕wi "∆where" (2 2⍴0.84 0 0.35 0)[615] ⎕wi "where" (("fmMigration.fParms.fFinancials" ⎕wi "size") Win∆Resize (2 2⍴0.84 0 0.35 0))[616] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[617] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[618] [619] :if 300<fnsize[620]     ((1↑⎕lc) fnsize "FrameV - Global Parameter Sets") Win∆ProgressBar "MemberUpdate"[621] :endif[622] [623] ⎕wself←"fmMigration.fParms.fGlobals" ⎕wi "New" "Frame"[624] ⎕wi "scale" 5[625] ⎕wi "∆where" (4 2⍴0.63 0 0 0 0.36 0 1 0)[626] ⎕wi "where" (("fmMigration.fParms" ⎕wi "size") Win∆Resize (4 2⍴0.63 0 0 0 0.36 0 1 0))[627] ⎕wi "caption" "Global Parameter Sets"[628] ⎕wi "style" 0[629] ⎕wi "onResize" "AutoResize"[630] [631] ⎕wself←"fmMigration.fParms.fGlobals.lHeading" ⎕wi "New" "Label"[632] ⎕wi "scale" 5[633] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Use Existing Global Parameter Sets if matching Migrated Parameter Sets"))[634] ⎕wi "caption" "Use Existing Global Parameter Sets if matching Migrated Parameter Sets"[635] ⎕wi "∆where" (2 2⍴0.14 0 0.3 0)[636] ⎕wi "where" (("fmMigration.fParms.fGlobals" ⎕wi "size") Win∆Resize (2 2⍴0.14 0 0.3 0))[637] [638] ⎕wself←"fmMigration.fParms.fGlobals.ckmigGpMatch1" ⎕wi "New" "Check"[639] Fieldlist←Fieldlist OVER "fmMigration.fParms.fGlobals.ckmigGpMatch1"[640] Fieldcontrol←Fieldcontrol OVER "Check"[641] ⎕wi "∆name" "migGpMatch[1;]"[642] ⎕wi "∆type" "Check"[643] ⎕wi "∆helpid" 4128[644] ⎕wi "tooltip" "Check this if you wish use Existing Global Parameter Sets (Financials/Mortality/Mortality Improvement/Contributions) for Actives Bases where they match migrated Parameter Sets"[645] ⎕wi "style" 0[646] ⎕wi "caption" "Actives"[647] ⎕wi "∆where" (2 2⍴0.34 0 0.3 0)[648] ⎕wi "where" (("fmMigration.fParms.fGlobals" ⎕wi "size") Win∆Resize (2 2⍴0.34 0 0.3 0))[649] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[650] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[651] [652] ⎕wself←"fmMigration.fParms.fGlobals.ckmigGpMatch2" ⎕wi "New" "Check"[653] Fieldlist←Fieldlist OVER "fmMigration.fParms.fGlobals.ckmigGpMatch2"[654] Fieldcontrol←Fieldcontrol OVER "Check"[655] ⎕wi "∆name" "migGpMatch[2;]"[656] ⎕wi "∆type" "Check"[657] ⎕wi "∆helpid" 4128[658] ⎕wi "tooltip" "Check this if you wish use Existing Global Parameter Sets (Financials/Mortality/Mortality Improvement) for Deferreds Bases where they match migrated Parameter Sets"[659] ⎕wi "style" 0[660] ⎕wi "caption" "Deferreds"[661] ⎕wi "∆where" (2 2⍴0.54 0 0.3 0)[662] ⎕wi "where" (("fmMigration.fParms.fGlobals" ⎕wi "size") Win∆Resize (2 2⍴0.54 0 0.3 0))[663] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[664] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[665] [666] ⎕wself←"fmMigration.fParms.fGlobals.ckmigGpMatch3" ⎕wi "New" "Check"[667] Fieldlist←Fieldlist OVER "fmMigration.fParms.fGlobals.ckmigGpMatch3"[668] Fieldcontrol←Fieldcontrol OVER "Check"[669] ⎕wi "∆name" "migGpMatch[3;]"[670] ⎕wi "∆type" "Check"[671] ⎕wi "∆helpid" 4128[672] ⎕wi "tooltip" "Check this if you wish use Existing Global Parameter Sets (Financials/Mortality/Mortality Improvement) for Pensioners Bases where they match migrated Parameter Sets"[673] ⎕wi "style" 0[674] ⎕wi "caption" "Pensioners"[675] ⎕wi "∆where" (2 2⍴0.74 0 0.3 0)[676] ⎕wi "where" (("fmMigration.fParms.fGlobals" ⎕wi "size") Win∆Resize (2 2⍴0.74 0 0.3 0))[677] ⎕wi "extent" ((0 5×CharSize)+Win∆TextSize ⎕wi "caption")[678] ⎕wi "onClick" "(0 0⍴(⊂⎕wi 'name') V9Migration 'Change' )"[679] [680] :if 300<fnsize[681]     ((1↑⎕lc) fnsize "FrameV - Scheme Financial Globals - Interest Assumptions") Win∆ProgressBar "MemberUpdate"[682] :endif[683] [684] ⎕wself←"fmMigration.fInterest" ⎕wi "New" "Frame"[685] ⎕wi "scale" 5[686] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[687] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[688] ⎕wi "caption" "Scheme Financial Globals - Interest Assumptions"[689] ⎕wi "style" 0[690] ⎕wi "onResize" "AutoResize"[691] framelist←framelist OVER "fmMigration.fInterest"[692] [693] ⎕wself←"fmMigration.fInterest.trInterest" ⎕wi "New" "Tree"[694] Fieldlist←Fieldlist OVER "fmMigration.fInterest.trInterest"[695] Fieldcontrol←Fieldcontrol OVER "Tree"[696] ⎕wi "∆name" "Interest"[697] ⎕wi "∆type" "Tree"[698] ⎕wi "∆helpid" 4129[699] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[700] ⎕wi "style" 0 8[701] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[702] ⎕wi "where" (("fmMigration.fInterest" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[703] PickList←DummyTree[704] Win∆PopulateTree PickList "Interest Assumptions"[705] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[706] ⎕wgive 0[707] [708] ⎕wself←"fmMigration.fInterest.edResults" ⎕wi "New" "Edit"[709] Fieldlist←Fieldlist OVER "fmMigration.fInterest.edResults"[710] Fieldcontrol←Fieldcontrol OVER "Edit"[711] ⎕wi "∆name" "Results"[712] ⎕wi "∆type" "Multi"[713] ⎕wi "style" 4096[714] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[715] ⎕wi "∆name" "Results"[716] ⎕wi "scale" 5[717] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[718] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[719] ⎕wi "where" (("fmMigration.fInterest" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[720] [721] ⎕wself←"fmMigration.fInterest.llResults" ⎕wi "New" "Label"[722] ⎕wi "scale" 5[723] ⎕wi "style" 2[724] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Setting"))[725] ⎕wi "caption" "Parameter Setting"[726] where←4↑,"fmMigration.fInterest.edResults" ⎕wi "∆where"[727] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[728] ⎕wi "∆where" ((x,2)⍴where)[729] ⎕wi "where" (("fmMigration.fInterest" ⎕wi "size") Win∆Resize ⎕wi "∆where")[730] [731] :if 300<fnsize[732]     ((1↑⎕lc) fnsize "FrameV - Scheme Financial Globals - Inflation Assumptions") Win∆ProgressBar "MemberUpdate"[733] :endif[734] [735] ⎕wself←"fmMigration.fInflation" ⎕wi "New" "Frame"[736] ⎕wi "scale" 5[737] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[738] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[739] ⎕wi "caption" "Scheme Financial Globals - Inflation Assumptions"[740] ⎕wi "style" 0[741] ⎕wi "onResize" "AutoResize"[742] framelist←framelist OVER "fmMigration.fInflation"[743] [744] ⎕wself←"fmMigration.fInflation.trInflation" ⎕wi "New" "Tree"[745] Fieldlist←Fieldlist OVER "fmMigration.fInflation.trInflation"[746] Fieldcontrol←Fieldcontrol OVER "Tree"[747] ⎕wi "∆name" "Inflation"[748] ⎕wi "∆type" "Tree"[749] ⎕wi "∆helpid" 4129[750] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[751] ⎕wi "style" 0 8[752] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[753] ⎕wi "where" (("fmMigration.fInflation" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[754] PickList←DummyTree[755] Win∆PopulateTree PickList "Inflation Assumptions"[756] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[757] ⎕wgive 0[758] [759] ⎕wself←"fmMigration.fInflation.edResults" ⎕wi "New" "Edit"[760] Fieldlist←Fieldlist OVER "fmMigration.fInflation.edResults"[761] Fieldcontrol←Fieldcontrol OVER "Edit"[762] ⎕wi "∆name" "Results"[763] ⎕wi "∆type" "Multi"[764] ⎕wi "style" 4096[765] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[766] ⎕wi "∆name" "Results"[767] ⎕wi "scale" 5[768] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[769] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[770] ⎕wi "where" (("fmMigration.fInflation" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[771] [772] ⎕wself←"fmMigration.fInflation.llResults" ⎕wi "New" "Label"[773] ⎕wi "scale" 5[774] ⎕wi "style" 2[775] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Setting"))[776] ⎕wi "caption" "Parameter Setting"[777] where←4↑,"fmMigration.fInflation.edResults" ⎕wi "∆where"[778] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[779] ⎕wi "∆where" ((x,2)⍴where)[780] ⎕wi "where" (("fmMigration.fInflation" ⎕wi "size") Win∆Resize ⎕wi "∆where")[781] [782] :if 300<fnsize[783]     ((1↑⎕lc) fnsize "FrameV - Scheme Financial Globals - Revaluation Assumptions") Win∆ProgressBar "MemberUpdate"[784] :endif[785] [786] ⎕wself←"fmMigration.fRevaluation" ⎕wi "New" "Frame"[787] ⎕wi "scale" 5[788] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[789] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[790] ⎕wi "caption" "Scheme Financial Globals - Revaluation Assumptions"[791] ⎕wi "style" 0[792] ⎕wi "onResize" "AutoResize"[793] framelist←framelist OVER "fmMigration.fRevaluation"[794] [795] ⎕wself←"fmMigration.fRevaluation.trRevaluation" ⎕wi "New" "Tree"[796] Fieldlist←Fieldlist OVER "fmMigration.fRevaluation.trRevaluation"[797] Fieldcontrol←Fieldcontrol OVER "Tree"[798] ⎕wi "∆name" "Revaluation"[799] ⎕wi "∆type" "Tree"[800] ⎕wi "∆helpid" 4129[801] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[802] ⎕wi "style" 0 8[803] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[804] ⎕wi "where" (("fmMigration.fRevaluation" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[805] PickList←DummyTree[806] Win∆PopulateTree PickList "Revaluation Assumptions"[807] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[808] ⎕wgive 0[809] [810] ⎕wself←"fmMigration.fRevaluation.edResults" ⎕wi "New" "Edit"[811] Fieldlist←Fieldlist OVER "fmMigration.fRevaluation.edResults"[812] Fieldcontrol←Fieldcontrol OVER "Edit"[813] ⎕wi "∆name" "Results"[814] ⎕wi "∆type" "Multi"[815] ⎕wi "style" 4096[816] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[817] ⎕wi "∆name" "Results"[818] ⎕wi "scale" 5[819] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[820] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[821] ⎕wi "where" (("fmMigration.fRevaluation" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[822] [823] ⎕wself←"fmMigration.fRevaluation.llResults" ⎕wi "New" "Label"[824] ⎕wi "scale" 5[825] ⎕wi "style" 2[826] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Setting"))[827] ⎕wi "caption" "Parameter Setting"[828] where←4↑,"fmMigration.fRevaluation.edResults" ⎕wi "∆where"[829] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[830] ⎕wi "∆where" ((x,2)⍴where)[831] ⎕wi "where" (("fmMigration.fRevaluation" ⎕wi "size") Win∆Resize ⎕wi "∆where")[832] [833] :if 300<fnsize[834]     ((1↑⎕lc) fnsize "FrameV - Scheme Financial Globals - Increase Assumptions") Win∆ProgressBar "MemberUpdate"[835] :endif[836] [837] ⎕wself←"fmMigration.fIncrease" ⎕wi "New" "Frame"[838] ⎕wi "scale" 5[839] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[840] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[841] ⎕wi "caption" "Scheme Financial Globals - Increase Assumptions"[842] ⎕wi "style" 0[843] ⎕wi "onResize" "AutoResize"[844] framelist←framelist OVER "fmMigration.fIncrease"[845] [846] ⎕wself←"fmMigration.fIncrease.trIncrease" ⎕wi "New" "Tree"[847] Fieldlist←Fieldlist OVER "fmMigration.fIncrease.trIncrease"[848] Fieldcontrol←Fieldcontrol OVER "Tree"[849] ⎕wi "∆name" "Increase"[850] ⎕wi "∆type" "Tree"[851] ⎕wi "∆helpid" 4129[852] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[853] ⎕wi "style" 0 8[854] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[855] ⎕wi "where" (("fmMigration.fIncrease" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[856] PickList←DummyTree[857] Win∆PopulateTree PickList "Increase Assumptions"[858] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[859] ⎕wgive 0[860] [861] ⎕wself←"fmMigration.fIncrease.edResults" ⎕wi "New" "Edit"[862] Fieldlist←Fieldlist OVER "fmMigration.fIncrease.edResults"[863] Fieldcontrol←Fieldcontrol OVER "Edit"[864] ⎕wi "∆name" "Results"[865] ⎕wi "∆type" "Multi"[866] ⎕wi "style" 4096[867] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[868] ⎕wi "∆name" "Results"[869] ⎕wi "scale" 5[870] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[871] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[872] ⎕wi "where" (("fmMigration.fIncrease" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[873] [874] ⎕wself←"fmMigration.fIncrease.llResults" ⎕wi "New" "Label"[875] ⎕wi "scale" 5[876] ⎕wi "style" 2[877] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Setting"))[878] ⎕wi "caption" "Parameter Setting"[879] where←4↑,"fmMigration.fIncrease.edResults" ⎕wi "∆where"[880] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[881] ⎕wi "∆where" ((x,2)⍴where)[882] ⎕wi "where" (("fmMigration.fIncrease" ⎕wi "size") Win∆Resize ⎕wi "∆where")[883] [884] :if 300<fnsize[885]     ((1↑⎕lc) fnsize "FrameV - Scheme Global Parameter Sets - Select Mortality Assumptions") Win∆ProgressBar "MemberUpdate"[886] :endif[887] [888] ⎕wself←"fmMigration.fSelMort" ⎕wi "New" "Frame"[889] ⎕wi "scale" 5[890] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[891] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[892] ⎕wi "caption" "Scheme Global Parameter Sets - Select Mortality Assumptions"[893] ⎕wi "style" 0[894] ⎕wi "onResize" "AutoResize"[895] framelist←framelist OVER "fmMigration.fSelMort"[896] [897] ⎕wself←"fmMigration.fSelMort.trSelMort" ⎕wi "New" "Tree"[898] Fieldlist←Fieldlist OVER "fmMigration.fSelMort.trSelMort"[899] Fieldcontrol←Fieldcontrol OVER "Tree"[900] ⎕wi "∆name" "SelMort"[901] ⎕wi "∆type" "Tree"[902] ⎕wi "∆helpid" 4129[903] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[904] ⎕wi "style" 0 8[905] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[906] ⎕wi "where" (("fmMigration.fSelMort" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[907] PickList←DummyTree[908] Win∆PopulateTree PickList "Select Mortality Assumptions"[909] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[910] ⎕wgive 0[911] [912] ⎕wself←"fmMigration.fSelMort.edResults" ⎕wi "New" "Edit"[913] Fieldlist←Fieldlist OVER "fmMigration.fSelMort.edResults"[914] Fieldcontrol←Fieldcontrol OVER "Edit"[915] ⎕wi "∆name" "Results"[916] ⎕wi "∆type" "Multi"[917] ⎕wi "style" 4096[918] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[919] ⎕wi "∆name" "Results"[920] ⎕wi "scale" 5[921] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[922] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[923] ⎕wi "where" (("fmMigration.fSelMort" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[924] [925] ⎕wself←"fmMigration.fSelMort.llResults" ⎕wi "New" "Label"[926] ⎕wi "scale" 5[927] ⎕wi "style" 2[928] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Settings"))[929] ⎕wi "caption" "Parameter Settings"[930] where←4↑,"fmMigration.fSelMort.edResults" ⎕wi "∆where"[931] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[932] ⎕wi "∆where" ((x,2)⍴where)[933] ⎕wi "where" (("fmMigration.fSelMort" ⎕wi "size") Win∆Resize ⎕wi "∆where")[934] [935] :if 300<fnsize[936]     ((1↑⎕lc) fnsize "FrameV - Scheme Global Parameter Sets - Mortality Assumptions") Win∆ProgressBar "MemberUpdate"[937] :endif[938] [939] ⎕wself←"fmMigration.fMortality" ⎕wi "New" "Frame"[940] ⎕wi "scale" 5[941] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[942] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[943] ⎕wi "caption" "Scheme Global Parameter Sets - Mortality Assumptions"[944] ⎕wi "style" 0[945] ⎕wi "onResize" "AutoResize"[946] framelist←framelist OVER "fmMigration.fMortality"[947] [948] ⎕wself←"fmMigration.fMortality.trMortality" ⎕wi "New" "Tree"[949] Fieldlist←Fieldlist OVER "fmMigration.fMortality.trMortality"[950] Fieldcontrol←Fieldcontrol OVER "Tree"[951] ⎕wi "∆name" "Mortality"[952] ⎕wi "∆type" "Tree"[953] ⎕wi "∆helpid" 4129[954] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[955] ⎕wi "style" 0 8[956] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[957] ⎕wi "where" (("fmMigration.fMortality" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[958] PickList←DummyTree[959] Win∆PopulateTree PickList "Mortality Assumptions"[960] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[961] ⎕wgive 0[962] [963] ⎕wself←"fmMigration.fMortality.edResults" ⎕wi "New" "Edit"[964] Fieldlist←Fieldlist OVER "fmMigration.fMortality.edResults"[965] Fieldcontrol←Fieldcontrol OVER "Edit"[966] ⎕wi "∆name" "Results"[967] ⎕wi "∆type" "Multi"[968] ⎕wi "style" 4096[969] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[970] ⎕wi "∆name" "Results"[971] ⎕wi "scale" 5[972] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[973] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[974] ⎕wi "where" (("fmMigration.fMortality" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[975] [976] ⎕wself←"fmMigration.fMortality.llResults" ⎕wi "New" "Label"[977] ⎕wi "scale" 5[978] ⎕wi "style" 2[979] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Settings"))[980] ⎕wi "caption" "Parameter Settings"[981] where←4↑,"fmMigration.fMortality.edResults" ⎕wi "∆where"[982] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[983] ⎕wi "∆where" ((x,2)⍴where)[984] ⎕wi "where" (("fmMigration.fMortality" ⎕wi "size") Win∆Resize ⎕wi "∆where")[985] [986] :if 300<fnsize[987]     ((1↑⎕lc) fnsize "FrameV - Scheme Global Parameter Sets - Mortality Improvement Assumptions") Win∆ProgressBar "MemberUpdate"[988] :endif[989] [990] ⎕wself←"fmMigration.fMortImp" ⎕wi "New" "Frame"[991] ⎕wi "scale" 5[992] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[993] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[994] ⎕wi "caption" "Scheme Global Parameter Sets - Mortality Improvement Assumptions"[995] ⎕wi "style" 0[996] ⎕wi "onResize" "AutoResize"[997] framelist←framelist OVER "fmMigration.fMortImp"[998] [999] ⎕wself←"fmMigration.fMortImp.trMortImp" ⎕wi "New" "Tree"[1000] Fieldlist←Fieldlist OVER "fmMigration.fMortImp.trMortImp"[1001] Fieldcontrol←Fieldcontrol OVER "Tree"[1002] ⎕wi "∆name" "MortImp"[1003] ⎕wi "∆type" "Tree"[1004] ⎕wi "∆helpid" 4129[1005] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[1006] ⎕wi "style" 0 8[1007] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[1008] ⎕wi "where" (("fmMigration.fMortImp" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[1009] PickList←DummyTree[1010] Win∆PopulateTree PickList "Mortality Improvement Assumptions"[1011] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[1012] ⎕wgive 0[1013] [1014] ⎕wself←"fmMigration.fMortImp.edResults" ⎕wi "New" "Edit"[1015] Fieldlist←Fieldlist OVER "fmMigration.fMortImp.edResults"[1016] Fieldcontrol←Fieldcontrol OVER "Edit"[1017] ⎕wi "∆name" "Results"[1018] ⎕wi "∆type" "Multi"[1019] ⎕wi "style" 4096[1020] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[1021] ⎕wi "∆name" "Results"[1022] ⎕wi "scale" 5[1023] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[1024] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[1025] ⎕wi "where" (("fmMigration.fMortImp" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[1026] [1027] ⎕wself←"fmMigration.fMortImp.llResults" ⎕wi "New" "Label"[1028] ⎕wi "scale" 5[1029] ⎕wi "style" 2[1030] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Settings"))[1031] ⎕wi "caption" "Parameter Settings"[1032] where←4↑,"fmMigration.fMortImp.edResults" ⎕wi "∆where"[1033] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[1034] ⎕wi "∆where" ((x,2)⍴where)[1035] ⎕wi "where" (("fmMigration.fMortImp" ⎕wi "size") Win∆Resize ⎕wi "∆where")[1036] [1037] :if 300<fnsize[1038]     ((1↑⎕lc) fnsize "FrameV - Scheme Global Parameter Sets - Contributions Assumptions") Win∆ProgressBar "MemberUpdate"[1039] :endif[1040] [1041] ⎕wself←"fmMigration.fConts" ⎕wi "New" "Frame"[1042] ⎕wi "scale" 5[1043] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[1044] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[1045] ⎕wi "caption" "Scheme Global Parameter Sets - Contributions Assumptions"[1046] ⎕wi "style" 0[1047] ⎕wi "onResize" "AutoResize"[1048] framelist←framelist OVER "fmMigration.fConts"[1049] [1050] ⎕wself←"fmMigration.fConts.trConts" ⎕wi "New" "Tree"[1051] Fieldlist←Fieldlist OVER "fmMigration.fConts.trConts"[1052] Fieldcontrol←Fieldcontrol OVER "Tree"[1053] ⎕wi "∆name" "Conts"[1054] ⎕wi "∆type" "Tree"[1055] ⎕wi "∆helpid" 4129[1056] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[1057] ⎕wi "style" 0 8[1058] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[1059] ⎕wi "where" (("fmMigration.fConts" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[1060] PickList←DummyTree[1061] Win∆PopulateTree PickList "Contributions Assumptions"[1062] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[1063] ⎕wgive 0[1064] [1065] ⎕wself←"fmMigration.fConts.edResults" ⎕wi "New" "Edit"[1066] Fieldlist←Fieldlist OVER "fmMigration.fConts.edResults"[1067] Fieldcontrol←Fieldcontrol OVER "Edit"[1068] ⎕wi "∆name" "Results"[1069] ⎕wi "∆type" "Multi"[1070] ⎕wi "style" 4096[1071] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[1072] ⎕wi "∆name" "Results"[1073] ⎕wi "scale" 5[1074] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[1075] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[1076] ⎕wi "where" (("fmMigration.fConts" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[1077] [1078] ⎕wself←"fmMigration.fConts.llResults" ⎕wi "New" "Label"[1079] ⎕wi "scale" 5[1080] ⎕wi "style" 2[1081] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Settings"))[1082] ⎕wi "caption" "Parameter Settings"[1083] where←4↑,"fmMigration.fConts.edResults" ⎕wi "∆where"[1084] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[1085] ⎕wi "∆where" ((x,2)⍴where)[1086] ⎕wi "where" (("fmMigration.fConts" ⎕wi "size") Win∆Resize ⎕wi "∆where")[1087] [1088] :if 300<fnsize[1089]     ((1↑⎕lc) fnsize "FrameV - Scheme Global Parameter Sets - New Entrant Model") Win∆ProgressBar "MemberUpdate"[1090] :endif[1091] [1092] ⎕wself←"fmMigration.fNEM" ⎕wi "New" "Frame"[1093] ⎕wi "scale" 5[1094] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[1095] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[1096] ⎕wi "caption" "Scheme Global Parameter Sets - New Entrant Model"[1097] ⎕wi "style" 0[1098] ⎕wi "onResize" "AutoResize"[1099] framelist←framelist OVER "fmMigration.fNEM"[1100] [1101] ⎕wself←"fmMigration.fNEM.trNEM" ⎕wi "New" "Tree"[1102] Fieldlist←Fieldlist OVER "fmMigration.fNEM.trNEM"[1103] Fieldcontrol←Fieldcontrol OVER "Tree"[1104] ⎕wi "∆name" "NEM"[1105] ⎕wi "∆type" "Tree"[1106] ⎕wi "∆helpid" 4129[1107] ⎕wi "tooltip" "Primary Nodes (when selected) can be:
. Renamed (by typing new description)
. Cloned (via Right Click Menu)
. Deleted (via Right Click Menu)
Secondary Nodes can be dragged and dropped to associate with a different Primary Node (with the same value)"[1108] ⎕wi "style" 0 8[1109] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0)[1110] ⎕wi "where" (("fmMigration.fNEM" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.92 0 0.48 0))[1111] PickList←DummyTree[1112] Win∆PopulateTree PickList "New Entrant Model Assumptions"[1113] ⎕wi "onChange" "0 0⍴(⊂⎕wi 'name') V9Migration 'Change'"[1114] ⎕wgive 0[1115] [1116] ⎕wself←"fmMigration.fNEM.edResults" ⎕wi "New" "Edit"[1117] Fieldlist←Fieldlist OVER "fmMigration.fNEM.edResults"[1118] Fieldcontrol←Fieldcontrol OVER "Edit"[1119] ⎕wi "∆name" "Results"[1120] ⎕wi "∆type" "Multi"[1121] ⎕wi "style" 4096[1122] ⎕wi "tooltip" "The Parameter settings of the currently selected node."[1123] ⎕wi "∆name" "Results"[1124] ⎕wi "scale" 5[1125] ⎕wi "style" ((⎕wi "style"),4 16 2048 8192 64 )[1126] ⎕wi "∆where" (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0)[1127] ⎕wi "where" (("fmMigration.fNEM" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.51 0 0.92 0 0.48 0))[1128] [1129] ⎕wself←"fmMigration.fNEM.llResults" ⎕wi "New" "Label"[1130] ⎕wi "scale" 5[1131] ⎕wi "style" 2[1132] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Parameter Settings"))[1133] ⎕wi "caption" "Parameter Settings"[1134] where←4↑,"fmMigration.fNEM.edResults" ⎕wi "∆where"[1135] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[1136] ⎕wi "∆where" ((x,2)⍴where)[1137] ⎕wi "where" (("fmMigration.fNEM" ⎕wi "size") Win∆Resize ⎕wi "∆where")[1138] [1139] :if 300<fnsize[1140]     ((1↑⎕lc) fnsize "FrameV - Scheme/Basis Parameters - Summary") Win∆ProgressBar "MemberUpdate"[1141] :endif[1142] [1143] ⎕wself←"fmMigration.fSummary" ⎕wi "New" "Frame"[1144] ⎕wi "scale" 5[1145] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[1146] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[1147] ⎕wi "caption" "Scheme/Basis Parameters - Summary"[1148] ⎕wi "style" 0[1149] ⎕wi "onResize" "AutoResize"[1150] framelist←framelist OVER "fmMigration.fSummary"[1151] [1152] ⎕wself←"fmMigration.fSummary.webSummary" ⎕wi "New" "Microsoft Web Browser"[1153] Fieldlist←Fieldlist OVER "fmMigration.fSummary.webSummary"[1154] Fieldcontrol←Fieldcontrol OVER "Microsoft Web Browser"[1155] ⎕wi "∆name" "Summary"[1156] ⎕wi "∆type" "Web"[1157] ⎕wi "∆helpid" 4130[1158] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.9 0 0.98 0)[1159] ⎕wi "where" (("fmMigration.fSummary" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.9 0 0.98 0))[1160] [1161] ⎕wself←"fmMigration.fSummary.llSummary" ⎕wi "New" "Label"[1162] ⎕wi "scale" 5[1163] ⎕wi "style" 2[1164] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "Summary Report"))[1165] ⎕wi "caption" "Summary Report"[1166] where←4↑,"fmMigration.fSummary.webSummary" ⎕wi "∆where"[1167] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[1168] ⎕wi "∆where" ((x,2)⍴where)[1169] ⎕wi "where" (("fmMigration.fSummary" ⎕wi "size") Win∆Resize ⎕wi "∆where")[1170] [1171] :if 300<fnsize[1172]     ((1↑⎕lc) fnsize "FrameV - Files/Parameters Overwrites") Win∆ProgressBar "MemberUpdate"[1173] :endif[1174] [1175] ⎕wself←"fmMigration.fOverwrite" ⎕wi "New" "Frame"[1176] ⎕wi "scale" 5[1177] ⎕wi "∆where" (4 2⍴0 0 0 0 1 ¯45 1 0)[1178] ⎕wi "where" (("fmMigration" ⎕wi "size") Win∆Resize (4 2⍴0 0 0 0 1 ¯45 1 0))[1179] ⎕wi "caption" "Files/Parameters Overwrites"[1180] ⎕wi "style" 0[1181] ⎕wi "onResize" "AutoResize"[1182] framelist←framelist OVER "fmMigration.fOverwrite"[1183] [1184] ⎕wself←"fmMigration.fOverwrite.webOverwrite" ⎕wi "New" "Microsoft Web Browser"[1185] Fieldlist←Fieldlist OVER "fmMigration.fOverwrite.webOverwrite"[1186] Fieldcontrol←Fieldcontrol OVER "Microsoft Web Browser"[1187] ⎕wi "∆name" "Overwrite"[1188] ⎕wi "∆type" "Web"[1189] ⎕wi "∆helpid" 4131[1190] ⎕wi "∆where" (4 2⍴0.05 0 0.01 0 0.9 0 0.98 0)[1191] ⎕wi "where" (("fmMigration.fOverwrite" ⎕wi "size") Win∆Resize (4 2⍴0.05 0 0.01 0 0.9 0 0.98 0))[1192] [1193] ⎕wself←"fmMigration.fOverwrite.llOverwrite" ⎕wi "New" "Label"[1194] ⎕wi "scale" 5[1195] ⎕wi "style" 2[1196] ⎕wi "extent" (↑⎕wi "Draw" ("?text" "File Copying Report"))[1197] ⎕wi "caption" "File Copying Report"[1198] where←4↑,"fmMigration.fOverwrite.webOverwrite" ⎕wi "∆where"[1199] x←0.5×⍴where←Win∆Calcwhere where-0,(5+1↑⎕wi "extent"),0 0[1200] ⎕wi "∆where" ((x,2)⍴where)[1201] ⎕wi "where" (("fmMigration.fOverwrite" ⎕wi "size") Win∆Resize ⎕wi "∆where")[1202] [1203] "fmMigration" ⎕wi "∆multifile" ""[1204] "fmMigration" ⎕wi "∆singlefile" ""[1205] "fmMigration" ⎕wi "∆format" ""[1206] "fmMigration" ⎕wi "∆financial" 0[1207] "fmMigration" ⎕wi "∆relrules" 0[1208] "fmMigration" ⎕wi "∆parm" 0[1209] "fmMigration" ⎕wi "∆decr" 0[1210] "fmMigration" ⎕wi "∆file" 0[1211] "fmMigration" ⎕wi "∆codefile" CodeFile[1212] "fmMigration" ⎕wi "∆inputstype" "ClientFile"[1213] "fmMigration" ⎕wi "∆inputsentry" "Single"[1214] "fmMigration" ⎕wi "∆savecn" (⍳0)[1215] "fmMigration" ⎕wi "∆savedesc" ""[1216] list←list OVER "fmMigration"[1217] "fmMigration" ⎕wi "∆fieldlist" Fieldlist[1218] "fmMigration" ⎕wi "∆fieldcontrol" Fieldcontrol[1219] childlist←"fmSV" ⎕wi "∆childlist"[1220] list←(⊃¯1↑childlist) OVER list[1221] childlist[⍴childlist]←⊂list[1222] "fmSV" ⎕wi "∆childlist" childlist[1223] list←,⎕split list[1224] 0 0⍴((∨/¨(⊂".mV9Migration")⍷¨list)/list) MultiWI "enabled" 1[1225] :if 300<fnsize[1226]     (fnsize fnsize ".") Win∆ProgressBar "MemberUpdate"[1227]     Win∆ProgressBar "Hide"[1228] :endif[1229] "Init" OpenParameters "V9Migration"[1230] "fmMigration.bnV9MigrationHelp" ⎕wi "visible" 1[1231] "fmMigration.bnV9MigrationQuit" ⎕wi "visible" 1[1232] "#" ⎕wi "focus" "fmMigration.fBases.fActives.lvActBases"[1233] "fmMigration" ⎕wi "∆framelist" framelist[1234] (⎕split 1 0↓framelist) MultiWI "visible" ¯1[1235] :if ~0∊⍴,Error←Win∆Initialise "V9Migration"[1236]     "Quit" EndModule Module[1237]     "fmSV" ⎕wi "pointer" 0[1238]     0 0⍴"fmMigration" ⎕wi "Delete"[1239]     :return[1240] :endif[1241] :if bar_open←commandbar^"Multi"≡"Single"[1242]     bar_open←0×"fmMigration.mV9MigrationFile.m" Win∆CommandBar "CancelHelp"[1243] :endif[1244] "fmMigration" ⎕wi "Paint"[1245] "fmSV" ⎕wi "pointer" 11[1246] "fmMigration" ⎕wi "onWait" "0 0⍴V9Migration 'Wait' ⋄ 'fmMigration' ⎕wi 'modified' 0"[1247] 0 0⍴"fmMigration" ⎕wi "Wait"[1248] 0 0⍴"fmMigration" ⎕wi "Delete"[1249] "fmSV" ⎕wi "pointer" 0 ∇