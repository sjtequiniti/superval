    ∇ esc←PENPRELIM esc;QY;RFX;RFY;ct;M∆l;F∆l;QX;ivper;PMXX∆l;SMXX∆l;ENX;LNX;SNX;SpAge;PMXX∆;SMXX∆;FreqAdj;H;YsinceRA;sMXX∆;sMXX∆l;s∆l
[1]   ⍝ PENWIN.sf#3
[2]   ⍝ Does all the preliminary work for the valuation of a pensioner. Sets up
[3]   ⍝ vectors of Lx and Ly etc,  Also takes all the information from the
[4]   ⍝ pensioner record and stores in the variable name.
[5]   ⍝
[6]   ⍝ V2.50u RE 1/11/93 Standardised
[7]   esc STANDARD∆FIELDS MembGroup
[8]   NAME←(2×0=KnownExit)↓'$>',NAME
[9]   
[10]  VAR∆FIELDS ⍝ Creating the data in the variable fields.
[11]  
[12]  REV←WARFRAC
[13]  REVind←SPONLY
[14]  SpAge←Y0←0 ⋄ X0←Xe←Xe+100×0≥Xe←'DN' DURN DOB,VDATE
[15]  
[16]  :if SPMethod=1 ⋄ H←∨/0≠(⌊0.5+X0)↓HXX
[17]  :else          ⋄ H←HXX [⌊0.5+X0]
[18]  :endif
[19]  
[20]  esc←esc∨(KnownExit<0)^(~NotSpouse)∨(~ppf∨SpouseProj)^0=(1,2 3/H,0)['MU SW'⍳MS]
[21]  
[22]  →esc/ESC
[23]  VLS←LS←0 ⍝ Set LS to zero
[24]  nzANP←ANP←No∆Pens⍴0
[25]  :for ct :in ⍳No∆Pens
[26]      :if 0≠⍴DLTB PENDATA[ct;]
[27]          nzANP[ct]←∣×ANP[ct]←ZWB PENDATA[ct;]
[28]      :endif
[29]      :if NotSpouse ⋄ :andif 0≠⍴DLTB SPENDATA[ct;]
[30]          :if 0≠ANP[ct]
[31]              REV[ct]←(ZWB SPENDATA[ct;]) CDIV ANP[ct]
[32]          :else
[33]              ANP[ct]←ZWB SPENDATA[ct;]
[34]              REV[ct]←REVind[ct]←1
[35]          :endif
[36]      :endif
[37]  :endfor
[38]  
[39]  PENind←penind⌈REVind
[40]  ⍝⍀⍝ 'Executing Member Data' 'Pension Amounts' FOURDIT 'GMP0 GMPE0 PenDesc penind⊃ PENDATA SPENDATA WARFRAC SPONLY⊃ PONLY⊃ NotSpouse ANP← REV←'
[41]  
[42]  LatestAge←LatestRA←lra←⌈/lra,BAGE←,ZWB bage ⋄ EAGE←,ZWB eage
[43]  
[44]  ⍝⍀⍝ INIT∆TRACE
[45]  ANP←penmult×ANP
[46]  ⍝⍀⍝ '' 'Annualised Pension Amounts' FOURDIT 'penmult PenDesc ANP←'
[47]  
[48]  :if ppf∨bencap ⋄ :andif PPFServiceCap
[49]       PPFCAP←ppfcap×2⌊1+0.03×⌊0⌈((⍎PPFServCapBDate) YDAYS ⍎PPFServCapEDate)-20
[50]      ⍝⍀⍝ '' 'Service Related Cap' FOURDIT 'ppfcap PPFServCapBDate PPFServCapEDate PPFCAP←'
[51]  :endif
[52]  
[53]  :if 0≠⍴fDPC ⋄ :andif 100≠↑DPC
[54]      Xdpc←No∆Pens⍴'YU' DURN DOB,DPC
[55]      YOP←(~^/prevind,∨/EXIT[2 4])×'DN' DURN DPC,VDATE
[56]      Xe←Xe+(∨/25<EAGE~0)×100×Xe<YOP
[57]      DEF←0⌈-YOP←⌊0.5+YOP-(∨/25<EAGE~0)×100×Xe<YOP ⋄ YOP←0⌈YOP
[58]  :else
[59]      Xdpc←BAGE ⋄ YOP←DEF←0
[60]  :endif
[61]  
[62]  :if AgeInterp
[63]      :if lowerAge ⋄ X0←⌊Xe ⋄ AgeMult←X0+1-Xe ⋄ dbX0←⌊0.5+dbXe←Xe
[64]      :else        ⋄ X0←⌈Xe ⋄ AgeMult←1-AgeMult
[65]      :endif
[66]      VFYear∆pp←(lowerAge^AgeMult≠1)⊃0 ¯1 ⍝ Annuities at VDate at Higher Age
[67]  :else
[68]      dbXe←dbX0←X0←⌊0.5+Xe
[69]  :endif
[70]  ⍝⍀⍝ '' 'Ages/Terms' FOURDIT ('Xe← X0← PenDesc Xdpc← YOP← DEF←',AgeInterp/' AgeMult←')
[71]  
[72]  :if aosind  ⍝ Need to use Cur or Prev versions of mortality improvement if 2D Table
[73]      aos∆cf←((2+No∆Pens),4,20)↑aos∆results←((2+No∆Pens),4,ResSize)⍴0
[74]      aosterm←prevind×PerToEnt-ResSize
[75]  ⍝⍝⍝    ivper←0⌈(¯1↑VDATE)-¯1↑pvDATE
[76]  ⍝⍝⍝    :if '2'=PMORTIMPR ⋄ MortImpP←(⊂MATRIX(0⊃AllMortImpP)[ivper;;]),1↓AllMortImpP ⋄ :endif
[77]  ⍝⍝⍝    :if '2'=SMORTIMPR ⋄ MortImpS←(⊂MATRIX(0⊃AllMortImpS)[ivper;;]),1↓AllMortImpS ⋄ :endif
[78]  :endif
[79]  
[80]  :if ~NotSpouse ⍝⍝⍝ ⋄ :andif ppf∨bGAD
[81]      sMXX∆←(X0,YOP) Dec∆Select sMXX
[82]      sMXX∆l←sMXX∆×s∆l←1+0.01×ZWB sPOSTMEMB
[83]      RFX←(⍴sMXX∆l) OVERTAKE (sMORTIMPR aosterm) RedFactCalc MortImps,X0
[84]      QX←1⌊sMXX∆l×RFX ⋄ QY←QX×YsinceRA←0
[85]      ⍝⍀⍝ '' 'Spouse Member Mortality Rates' FOURDIT 'sMXX sMXX∆← sPOSTMEMB s∆l← sMXX∆l← sPOSTRATE salpha sbeta sBETAYRS sBASE sCSC sSSC sIMPORIG sIMPTBL⊃ RFX← QX←'
[86]  :else
[87]      ⍝ Set up service table
[88]      PMXX∆←(X0,YOP) Dec∆Select PMXX
[89]      PMXX∆l←PMXX∆×M∆l←1+0.01×ZWB PPOSTMEMB
[90]      ⍝⍝⍝ RFX←(⍴PMXX∆l) OVERTAKE PMORTIMPR RedFactPen MortImpP,X0
[91]      RFX←(⍴PMXX∆l) OVERTAKE (PMORTIMPR aosterm) RedFactCalc MortImpP,X0
[92]      QX←1⌊PMXX∆l×RFX ⋄ QY←QX×0
[93]      ⍝⍀⍝ '' 'Member Mortality Rates' FOURDIT 'PMXX PMXX∆← PPOSTMEMB M∆l← PMXX∆l← PPOSTRATE Palpha Pbeta PBETAYRS PBASE PSMSL PCMSL PIMPORIG PIMPTBL⊃ RFX← QX←'
[94]  
[95]      :if YsinceRA←SpouseProj^NotSpouse^(~MS∊'MSW')
[96]          :if ~mt SpouseRA ⋄ YsinceRA←0⌈X0-ZWB SpouseRA
[97]          :else            ⋄ YsinceRA←0⌈'YN' DURN (⍎SpouseDate),VDATE
[98]          :endif
[99]      :endif
[100] 
[101]     ⍝ Now the same for Spouse if applicable
[102]     :if NotSpouse ⋄ :andif SpouseProj∨ppf∨0≠(1,2 3/H,0)['MU SW'⍳MS]
[103]         :if ppf ⋄ :orif ^/SDOB=' ' ⋄ SDOB←0⌈DOB+0,0,AGEDIF[X0] ⋄ Y0←X0-AGEDIF[X0]
[104]         :else   ⋄ SpAge←Y0←17⌈(100×Y0<0)+Y0←'YN' DURN SDOB,VDATE ⍝ Calculate age Y
[105]         :endif
[106]         ⍝⍀⍝ '' 'Ages/Terms' FOURDIT 'SDOB← Y0←'
[107]         ⍝ Set up service table
[108]         SMXX∆←(Y0,0) Dec∆Select SMXX
[109]         SMXX∆l←SMXX∆×F∆l←1+0.01×ZWB SPOSTMEMB
[110]     ⍝⍝⍝    RFY←(⍴SMXX∆l) OVERTAKE SMORTIMPR RedFactPen MortImpS,Y0
[111]         RFY←(⍴SMXX∆l) OVERTAKE (SMORTIMPR aosterm) RedFactCalc MortImpS,Y0
[112]     ⍝⍝⍝    :if 1<⍴,AGEDIF
[113]     ⍝⍝⍝        QY←1⌊(19,⍴SMXX∆l)⍴F∆l×SMXX∆l×(⍴SMXX∆l) OVERTAKE RFY
[114]     ⍝⍝⍝        LE←LE⌈⍴ly←1,×\1-Y0↓QY[0;] ⍝??⍝
[115]     ⍝⍝⍝    :else
[116]         QY←1⌊SMXX∆l×RFY
[117]         ⍝⍀⍝ '' 'Spouse Mortality Rates' FOURDIT 'SMXX SMXX∆← SPOSTMEMB F∆l← SMXX∆l← SPOSTRATE Salpha Sbeta SBETAYRS SBASE SCSC SSSC SIMPORIG SIMPTBL⊃ RFY← QY←'
[118]     ⍝⍝⍝    :endif
[119]     ⍝⍝⍝    ⍝ Spouse's service table for death in deferment
[120]     ⍝⍝⍝    LY←MID(ly←1,×\1-QY),0 ⋄ LE←LE⌈⍴LY
[121]     ⍝⍝⍝    LX←LE↑LX ⋄ LY←LE↑LY ⋄ lx←LE↑lx ⋄ ly←LE↑ly
[122]     ⍝⍝⍝    LXY←LX×LY ⍝ Set LXY as LY×LX
[123]     :endif
[124] :endif
[125] 
[126] LE←⍴lx←1,×\1-X0↓QX,0 ⋄ LE←LE⌈⍴ly←1,×\1-Y0↓QY ⋄ lx←LE↑lx ⋄ ly←LE↑ly
[127] 
[128] :if KnownExit<0 ⍝ Spouse on or before Valn Date
[129]     NotSpouse←0 ⋄ dbXe←dbX0←Xe←X0←Y0 ⋄ AgeMult←1 ⋄ SpAge←Y0←0
[130]     MS←'S' ⋄ QX←QY ⋄ QY←LE/0 ⋄ DEF←0
[131]     (GMP0 GMPE0)←GMP0 GMPE0×0.5×(Male∨ppf),1 ⍝ Always 50% Pre for PPF
[132]     BAGE←BAGE×~REVdef ⋄ ANP←REV×ANP ⋄ REV←0×REV
[133] :elseif 0≠KnownExit
[134]     FreqAdj←⍬⍴(FREQ+¯1+2×MODE)÷2×FREQ
[135]     QX←(⍴QX) OVERTAKE ((X0+⌊KnownExit)↑QX),(0.99999⌊(1-1∣KnownExit)÷1-FreqAdj),0.99999
[136] :endif
[137] 
[138] ENX←NX←1+DEF⌈(⌈/BAGE,NotSpouse×SPA)-X0 ⋄ LNX←SNX←0
[139] 
[140] ⍝ Initialise Member Output
[141] Memb∆Output←X0 dbX0 dbXe ENX LNX NX SNX MS SpAge (0⌈X0-(SpouseProj×YsinceRA)+(ppf×YOP)) QX QY QX QY QY QX AGEDIF ""
[142] :if test ⋄ Memb∆Output←(PP∆InterfaceHeader 'Memb')⍪Memb∆Output
[143] :else    ⋄ Memb∆Output←PREPARE_MembAPP Memb∆Output
[144] :endif
[145] 
[146] ⍙dbresults←(~prevind)^∨/(0≠KnownExit),EXIT[1 2],aosind ⍝ DB Results indicator
[147] :if aggopt[0]∨csvind∨summopt ⋄ MembID←-⍬⍴X0 ⍝ -ve number means "grouped" Member ID
[148] :else                        ⋄ MembID←recn
[149] :endif
[150] 
[151] ESC:→prevind/0
[152] :if ~suppressText
[153]     SUMMHEAD←MATRIX (AOSUMM←(12↑NAME),(¯3↑SEX),(¯5↑MS),(,'BI6' ⎕FMT MATRIX X0,Y0)),(¯8↑3↑'SM'[NotSpouse]) ⋄ AOSUMM←AOSUMM,¯8↑TOP
[154] :endif
[155] 
[156] :if ⍙dbopt ⋄ :andif lowerAge ⋄ :andif ~prevind ⋄ :andif aosind∨∨/EXIT[1 2]
[157]     XL_StoreMember
[158] :endif
    ∇
