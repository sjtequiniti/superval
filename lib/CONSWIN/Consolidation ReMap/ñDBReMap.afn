    ∇ newBenIDs←larg ⍙DBReMap arg;ClassID;IDs;BenDesc;ClassBase;BenNos;BasisCategoryID;ResultsCategoryID;no;BenIDs;tab;z;newno;where;sql1;CatReMap;ignoreCONSDYN;∆[1]   ⍝ CONSWIN.sf#15[2]   ⍝ Remapping of entries in the Database currently connected to 'ADOcon'[3]   ⍝  Benefit Types are remapped to Consolidation type (and these types added to BenefitType dimension table)[4]   ⍝[5]   ⍝ NOTE that the Database must not have indexes as the remapping will likely create duplicate records[6]   [7]   (CatReMap ignoreCONSDYN)←larg ⋄ newBenIDs←0 2⍴0 ''[8]   :if 0∊⍴IDs←1↓arg ⋄ :return ⋄ :endif ⍝ Nothing to remap[9]   ClassID←↑arg[10]  [11]  :if ~ignoreCONSDYN[12]      :select ClassID[13]      :caselist 1 2 3 ⍝ Actives and New Entrants and Deferreds[14]          BenDesc←'CONSB88GMPINC' 'CONSA88GMPINC' 'CONSDYNINC' 'CONSNDYNINC' 'CONSDYNINC3' 'CONSDYNINC4'[15]          BenIDs←2 3 4 5 6 7 ⋄ ClassBase←20000-10000×ClassID=3[16]      :case 4 ⍝ Pensioners[17]          BenDesc←m2n SStoMAT '/CONSB88GMPINC/CONSA88GMPINC',,'</CONSPAYINC>,LI2' ⎕fmt ⍳16[18]          BenIDs←2 3 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ⋄ ClassBase←0[19]      :endselect[20]  [21]      ⍝ Basis Item Numbers used for Re-mapping[22]      tab←1 ⍙DBadoCONCommand "SELECT BasisItemID,BasisItemName FROM BasisItem WHERE (BasisItemName IN (",(', ' join 1 ⍙DBString¨BenDesc),")) AND (BasisItemID BETWEEN ",(⍕1+ClassBase)," AND ",(⍕9999+ClassBase),")"[23]      BenNos←tab[(DLTB¨tab[;2])⍳BenDesc;1] ⍝ Cannot assume received in order requested[24]  [25]      :for ResultsCategoryID :in IDs ⍝ For each run[26]          BasisCategoryID←,1 ⍙DBadoCONCommand "SELECT BasisCategoryID FROM ResultsCategory WHERE ResultsCategoryID=",⍕ResultsCategoryID[27]          :for no :in BenNos ⍝ For each Benefit Type[28]              :if mt BenDesc←DLTB ↑1 ⍙DBadoCONCommand "SELECT BasisItemData FROM BasisData WHERE BasisCategoryID=",(⍕BasisCategoryID)," AND BasisItemID=",⍕no[29]                  :continue  ⍝ No CONSDYN for this Increase[30]              :endif[31]              no←↑(no=BenNos)/BenIDs ⍝ original value[32]              :if ∨/z←BenType∊⊂BenDesc[33]                  newno←↑z/BenTypeID[34]              :else[35]                  BenType←BenType,⊂BenDesc ⋄ BenTypeID←BenTypeID,(newno←1 100 ⍙DBNextID 'BenefitTypeID')[36]                  newBenIDs←newBenIDs⍪newno BenDesc[37]                  :if NegFlag ⋄ newBenIDs←newBenIDs⍪(-newno) (BenDesc," (Deferred)") ⋄ :endif[38]              :endif[39]              :for ∆ :in spin (⊂1,NegFlag/¯1)×¨no newno ⋄ (no newno)←∆[40]                  sql1←"UPDATE tAbLe SET BenefitTypeID=",(DLTB 'M<->I5' ⎕fmt newno)," WHERE ResultsCategoryID=",(⍕ResultsCategoryID)," AND BenefitTypeID=",DLTB 'M<->I5' ⎕fmt no[41]                                0 0⍴0 ⍙DBadoCONCommand "/tAbLe/ResultsData_NoIndex"   TEXTREPL sql1[42]                  :if ⍙dbopen ⋄ 0 0⍴0 ⍙DBadoCONCommand "/tAbLe/MemberResults_NoIndex" TEXTREPL sql1 ⋄ :endif[43]                  :if aosind  ⋄ 0 0⍴0 ⍙DBadoCONCommand "/tAbLe/AOSResults_NoIndex"    TEXTREPL sql1 ⋄ :endif[44]                  :if fscopt  ⋄ 0 0⍴0 ⍙DBadoCONCommand "/tAbLe/AltScenData_NoIndex"   TEXTREPL sql1 ⋄ :endif[45]              :endfor[46]          :endfor[47]      :endfor[48]  :endif[49]  [50]  ⍝ Copy remapped records to Database table[51]  where←"ResultsCategoryID IN (",(0 ⍙DBNumList IDs),")"[52]                1 ⍙DBCopyTables 'ResultsData'   sql where '' (CatReMap/⍕DatabaseID+ClassID) ''  ¯1[53]  :if ⍙dbopen ⋄ 1 ⍙DBCopyTables 'MemberResults' sql where '' ''                             ''  ¯1 ⋄ :endif[54]  :if aosind  ⋄ 1 ⍙DBCopyTables 'AOSResults'    sql where '' (CatReMap/⍕DatabaseID+ClassID) ''  ¯1 ⋄ :endif[55]  :if fscopt[56]      :if ~HLDII ⋄ 0 0⍴0 ⍙DBadoCONCommand "UPDATE AltScenData_NoIndex SET YearLeftService=0 WHERE ",where ⋄ :endif[57]                1 ⍙DBCopyTables 'AltScenData'   sql where '' (CatReMap/⍕DatabaseID+ClassID) ''  ¯1[58]  :endif    ∇