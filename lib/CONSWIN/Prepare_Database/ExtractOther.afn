    ∇ Z←ExtractOther contids;BenID;notes;recs;rec;ClassBase;ContIDs;cont;tab;row;rows;contid;tbl;REC;ContID;LiabID;where;ContTable;sql;benbasis;BenIDs;liab
[1]   ⍝ CONSWIN.sf#18
[2]   ⍝ Extract Other liabilities from Consolidation
[3]   
[4]   notes←noteshdr ⋄ recs←(0 benFLDS)⍴0 ⋄ ClassBase←30000
[5]   where←" WHERE BasisCategoryID=",⍕DBID
[6]   ContTable←ContingencyTable for 'Contingency' 'First Deficit Contributions' 'Second Deficit Contributions' 'Scheme Exp. Contributions' 'First Defict Cont. Expenses' 'Second Defict Cont. Expenses' 'Scheme Expenses' 'Additional Liability'
[7]   
[8]   ContIDs←contids,,1 ⍙DBadoCONCommand "SELECT DISTINCT ContingencyID FROM ResultsData WHERE ResultsCategoryID=",(⍕DBID)," AND BenefitTypeID IN (11, 32, 33)"
[9]   
[10]  :for cont :in nub ContTable at 'Contingency'
[11]      tab←ContTable for 'Contingency' cont
[12]      :if mt ContID←(∊tab at 'Member' 'Spouse') intersect ContIDs ⋄ :continue ⋄ :endif ⍝ Only Contingencies in results
[13]  
[14]      rechead[2]←⊂cont
[15]      :if     ∨/'Expense'     ⍷cont ⋄ rechead[2]←⊂'Expenses'      ⋄ LiabID←12
[16]      :elseif ∨/'Contribution'⍷cont ⋄ rechead[2]←⊂'Contributions' ⋄ LiabID←6
[17]      :else                                                       ⋄ LiabID←1 0
[18]      :endif
[19]      BenIDs←,1 ⍙DBadoCONCommand "SELECT DISTINCT BenefitTypeID FROM ResultsData WHERE ResultsCategoryID=",(⍕DBID)," AND ContingencyID IN (",(0 ⍙DBNumList ContID),")"," AND LiabilityTypeID IN (",(0 ⍙DBNumList LiabID),") ORDER BY BenefitTypeID"
[20]      :if     ∨/'First' ⍷cont ⋄ benbasis←0 GetConsData 'ameth1' ⋄ BenIDs←nub BenIDs,(1+∨/'Expense'⍷cont)⊃11 32
[21]      :elseif ∨/'Second'⍷cont ⋄ benbasis←0 GetConsData 'ameth2' ⋄ BenIDs←nub BenIDs,(1+∨/'Expense'⍷cont)⊃11 32
[22]      :else                   ⋄ benbasis←''
[23]      :endif
[24]  
[25]      :for BenID :in BenIDs
[26]          rec←(BenID=33) BenID benbasis ''                ⍝ Past Service, Benefit Basis and BenID
[27]  
[28]          ⍝ Interest and Inflation
[29]          :if     ContID≡,10 ⋄ rec←rec,1,(1 GetBasisData 'amorti1'),mtFin,'' 0,mtFin,mtFin,mtFin,⊂''
[30]          :elseif ContID≡,28 ⋄ rec←rec,1,(1 GetBasisData 'amorti2'),mtFin,'' 0,mtFin,mtFin,mtFin,⊂''
[31]          :elseif ContID≡,15 ⋄ rec←rec,1,(1 GetBasisData 'IR'     ),mtFin,'' 0,mtFin,mtFin,mtFin,⊂''
[32]          :elseif BenID=32 ⍝ Scheme Expenses
[33]              rec←rec,1,(1 GetBasisData 'IR'),mtFin       ⍝ Append Interest
[34]              rec←rec,'' 0,1 GetBasisData 'EXPf'          ⍝ Inflation
[35]              rec←rec,mtFin,mtFin,⊂''
[36]          :else        ⍝ Other liabilites
[37]              rec←rec,1,notusedFin,notusedFin,'' 0,notusedFin,notusedFin,notusedFin,⊂''
[38]          :endif
[39]  
[40]          rec←rec,0 0 ⍝ GMP indicators
[41]  
[42]          :for row :in ⍳rows←rowsIn tab
[43]              tbl←tab for row=⍳rows
[44]              :if ∨/ContID∊contid←(∊tbl at 'Member' 'Spouse')~0
[45]                  REC←rechead,contid,(tbl at 'StartYear'),rec
[46]                  sql←"SELECT SUM(SVValue) FROM ResultsData WHERE BenefitTypeID=",(⍕BenID)," AND LiabilityTypeID IN (",(0 ⍙DBNumList LiabID),") AND ContingencyID IN (",(0 ⍙DBNumList contid),") AND DataItemID=%1 AND ResultsCategoryID=",⍕DBID
[47]                  ⍝ Append Liability Figures
[48]                  liab←↑0 ⍙DBRemoveNulls ,1 ⍙DBadoCONCommand '/%1/93' TEXTREPL sql
[49]                  :if ∨/ContID∊10 28 33 ⋄ :orif 0.5<∣liab ⍝ Ignore small amounts unless Amort or Additional Liability
[50]                      recs←recs⍪REC,-liab
[51]                  :endif
[52]              :endif
[53]          :endfor
[54]      :endfor
[55]  :endfor
[56]  Z←recs notes
    ∇
