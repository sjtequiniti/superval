    ∇ res←field Consolidation parm;parent;list;value;no;z;warnings;n;SUMMREC;lramorti;ParmDesc;ParmTS;∆;nonact;runs
[1]   ⍝ CONSWIN.sf#3
[2]   ⍝ Function to allow user control on Consolidation Details
[3]   
[4]   parent←'fmSV.sConsolidation.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   
[8]   :case 'Prepare'
[9]       0 0⍴⎕ex 'pgAmortisation'
[10]      ConsIndex←CreateValnRunIndex 1
[11]      0 0⍴(SystemDir,'VALNWIN') ReadFile 'Valuation Excel'
[12]  
[13]  :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[14]  
[15]      :if 0∊⍴ClientFile ReadFile 'Expense_Rates' ⋄ MDISPLAY 'ParmsNotFound' 'Expense Rates' ''
[16]      :else                                      ⋄ FixFinFields 'Expense_Rates'
[17]      :endif
[18]  
[19]      :if ~sqlDatabase ⋄ progid←⍙DBAccessProvider 0 ⋄ :endif
[20]  
[21]      :if 0=⎕nc 'pgAmortisation'
[22]          (parent,'pgAmortisation.fAmort1.edamortprop1') ⎕wi 'onChange' ((parent,'pgAmortisation.fAmort1.edamortprop1') ⎕wi 'onExit')
[23]          (parent,'pgAmortisation.fAmort1.edamortprop2') ⎕wi 'onChange' ((parent,'pgAmortisation.fAmort1.edamortprop2') ⎕wi 'onExit')
[24]          (parent,'pgAmortisation.fAmort2.edamortprop3') ⎕wi 'onChange' ((parent,'pgAmortisation.fAmort2.edamortprop3') ⎕wi 'onExit')
[25]          (parent,'pgAmortisation.fAmort2.edamortprop4') ⎕wi 'onChange' ((parent,'pgAmortisation.fAmort2.edamortprop4') ⎕wi 'onExit')
[26]          (parent,'pgOther.fAssets.edASSETS')            ⎕wi 'onChange' ((parent,'pgOther.fAssets.edASSETS')            ⎕wi 'onExit')
[27]          Cons∆AdjustPages 'Define'
[28]          ConsIndex←CreateValnRunIndex 0
[29]      :endif
[30]  
[31]      :if 0≠⎕nc 'salind' ⍝ Conversion of % of Sals indicator
[32]          PCsalind←(salind←3↑[1]salind)[3;]
[33]          :for ∆ :in 1 2
[34]              :if 'P'=↑ameth[∆;]
[35]                  :if 'C'=↑salind[∆;] ⋄ "Percentage of Current Members' Salaries" ASSIGN∆Dict 'ameth[',(⍕∆),';]'
[36]                  :else               ⋄ "Percentage of All Members' Salaries"     ASSIGN∆Dict 'ameth[',(⍕∆),';]'
[37]                  :endif
[38]              :endif
[39]          :endfor
[40]          0 0⍴⎕ex 'salind'
[41]      :endif
[42]  
[43]      :if uk≠1
[44]          :if ~0∊⍴warnings←"Scheme Fee Inflation Rate" Win∆NumRelative "EXPf" "lrEXPf" "Scalar"
[45]              MDISPLAY DLTMB warnings
[46]          :endif
[47]  ⍝⍝⍝        (parent,'pgSelection.fCriteria.lsClients') ⎕wi 'onClick' 'Sel∆LabelUpdate "fmSV.sConsolidation.pgSelection.fCriteria.lsClients" ⋄ 0 0⍴(⊂"lsClients") Consolidation "Change"'
[48]      :else
[49]          :if 0≠⎕nc 'runs' ⋄ :andif mt runslist ⋄ runslist←runs ⋄ 0 0⍴⎕ex 'runs' ⋄ :endif
[50]          :if ∨/4 5=n←↑↑¨⍴¨SStoMAT¨m2n runslist
[51]              runslist←'⍺',runslist,↑(n=4)/'⍺' ⍝ Converison for User Name and Scenario
[52]          :endif
[53]      :endif
[54]  
[55]      ('pgAmortisation' 'pgContributions') Cons∆AdjustPages 'Open'
[56]      parent ⎕wi '∆pagetrick' ¯1
[57]      0 0⍴Consolidation 'Lock' ⍝ Lock Spreadsheet Cells
[58]  
[59]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[60]  
[61]      :if ~sqlDatabase ⋄ :andif mt progid ⋄ res←'No Microsoft Access engines installed on this machine' ⋄ :return ⋄ :endif
[62]  
[63]  :case 'Lock'
[64]      :if ~0∊⍴(parent,'pgContributions.fCoCRates.ssCoCRates') ⎕wi 'self'
[65]          (parent,'pgContributions.fCoCRates.ssCoCRates') Win∆F1SSProtectCells (⊂¯1 1 ¯1 1)
[66]      :endif
[67]  
[68]  :case 'Unlock'
[69]      :if ~0∊⍴(parent,'pgContributions.fCoCRates.ssCoCRates') ⎕wi 'self'
[70]          (parent,'pgContributions.fCoCRates.ssCoCRates') Win∆F1SSProtectCells 'Unlock'
[71]      :endif
[72]  
[73]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[74]  
[75]      :if 0∊⍴,field ⋄ :return ⋄ :endif
[76]      :repeat
[77]          :select ↑field
[78]          :case 'cbvalind'
[79]              NotPUC←~(⊂valind←3↑(parent,'pgSelection.fCriteria.cbvalind') ⎕wi 'text')∊'PUC' 'UCM'
[80]              dab←'DAB'≡valind
[81]              ((parent,'pgSelection.fCriteria.') 'cbbencap') Win∆SetRelated 'enabled' (~'PP'≡2↑valind)
[82]              ((parent,'pgSelection.fCriteria.') 'cbcontper') Win∆SetRelated 'enabled' (dab∨~NotPUC)
[83]              ((parent,'pgSelection.fCriteria.') 'cbinsind1') Win∆SetRelated 'enabled' (~NotPUC)
[84]              ((parent,'pgOther.fOutput.') 'ckinsind2') Win∆SetRelated 'enabled' NotPUC
[85]              ((parent,'pgSelection.fCriteria.') 'cbTargetBen') Win∆SetRelated 'enabled' dab
[86]              :if uk≠0
[87]                  ((parent,'pgSelection.fCriteria.') 'cbfscopt') Win∆SetRelated 'enabled' (~'PP'≡2↑valind)
[88]  ⍝⍝⍝            :else
[89]  ⍝⍝⍝                ((parent,'pgSelection.fCriteria.') 'cbPROPT') Win∆SetRelated 'enabled' (~dab)
[90]  ⍝⍝⍝                ((parent,'pgOther.fOutput.') ('cbabNO' 'edCP')) Win∆SetRelated 'enabled' dab
[91]              :endif
[92]              ((parent,'pgSelection.fCriteria.') 'cbneIND') Win∆SetRelated 'enabled' (~'PP'≡2↑valind)
[93]  
[94]              0 0⍴(⊂'pagetrick') Consolidation 'Change'
[95]              Consolid∆Change 'cbvalind'
[96]  
[97]          :caselist 'cbbencap' 'cbcontper' 'cbinsind1' 'cbTargetBen' 'cbVDATE' 'cbExactAge' 'cbfscopt' 'cbneIND' 'cbpVDATE'
[98]              Consolid∆Change ↑field
[99]  
[100]         :case 'cbaosind'
[101]             :if uk=1
[102]                 :if         'fmSV.sConsolidation.pgSelection.fCriteria.cbaosind' ⎕wi 'enabled'
[103]                 :andif 'Y'=↑'fmSV.sConsolidation.pgSelection.fCriteria.cbaosind' ⎕wi 'text'
[104]                     (⊂'pgAOS') Cons∆AdjustPages 'Open'
[105]                 :else
[106]                     (parent,'pgAOS') ⎕wi 'Delete'
[107]                 :endif
[108]             :endif
[109]             Consolid∆Change ↑field
[110] 
[111]         :caselist 'edamortprop1' 'edamortprop2'
[112]             (parent,'pgAmortisation.fAmort1.edamortprop1') Win∆Alternates (parent,'pgAmortisation.fAmort1.edamortprop2')
[113]             z←~(0=zwb (parent,'pgAmortisation.fAmort1.edamortprop1') ⎕wi 'text')^0=zwb (parent,'pgAmortisation.fAmort1.edamortprop2') ⎕wi 'text'
[114]             (parent,'pgAmortisation.fAmort1.fameth1') ⎕wi 'enabled' z
[115]             ((parent,'pgAmortisation.fAmort1.') ('cbamorti1' 'edTERMAM1')) Win∆SetRelated 'enabled' z
[116]             :if z ⋄ 0 0⍴(⊂'opameth1_1') Consolidation 'Change' ⋄ :endif
[117] 
[118]         :caselist 'edamortprop3' 'edamortprop4'
[119]             (parent,'pgAmortisation.fAmort2.edamortprop3') Win∆Alternates (parent,'pgAmortisation.fAmort2.edamortprop4')
[120]             z←~(0=zwb (parent,'pgAmortisation.fAmort2.edamortprop3') ⎕wi 'text')^0=zwb (parent,'pgAmortisation.fAmort2.edamortprop4') ⎕wi 'text'
[121]             (parent,'pgAmortisation.fAmort2.fameth2') ⎕wi 'enabled' z
[122]             ((parent,'pgAmortisation.fAmort2.') ('cbamorti2' 'edTERMAM2')) Win∆SetRelated 'enabled' z
[123]             :if z ⋄ 0 0⍴(⊂'opameth2_1') Consolidation 'Change' ⋄ :endif
[124] 
[125]         :caselist 'opameth1_1' 'opameth1_2' 'opameth1_3'
[126] 
[127]         :caselist 'opameth2_1' 'opameth2_2' 'opameth2_3'
[128] 
[129]         :case 'edASSETS'
[130] 
[131]         :case 'ckSKIP'
[132]             ((parent,'pgOther.fOutput.') 'cksummopt') Win∆SetRelated 'enabled' (~(parent,'pgOther.fOutput.ckSKIP') ⎕wi 'value')
[133] 
[134]         :case 'lvrunslist'
[135] 
[136]         :case 'pagetrick'
[137]             :if (parent ⎕wi '∆pagetrick')≠z←'AGG'≡3↑valind
[138]                 parent ⎕wi '∆pagetrick' z
[139]                 ((z⌽0 1)/'pgContributions' 'pgAmortisation') Cons∆AdjustPages 'Reset'
[140]             :endif
[141]         :endselect
[142]     :until mt field←1↓field
[143] 
[144] :case 'Valid' ⍝ Routine specific validation
[145] 
[146]     :repeat
[147]         :select DLTMB ↑field
[148]         :case 'All'
[149]             res←('pgSelection' 'pgContributions' 'pgAmortisation' 'pgOther' 'pgAOS') Consolidation 'Valid'
[150]             Consolid∆COCR
[151]             :if ∨/' '≠,GROUP ⋄ :andif ∨/^/' '=COCR
[152]                 Win∆SetFocus parent,'pgContributions.fCoCRates.ssCoCRates'
[153]                 res←'Mandatory' ⋄ :return
[154]             :endif
[155] 
[156]         :case 'pgSelection'
[157]             list←(parent,'pgSelection.lvrunslist') ⎕wi 'list'
[158]             value←(parent,'pgSelection.lvrunslist') ⎕wi 'value'
[159]             list←(list[;1]∊value)/list[;4]
[160]             :if ∨/(⊂':...........')≡¨12↑¨list ⍝ Check for NEMs
[161]                 z←(parent,'pgSelection.lvrunslist') ⎕wi '∆sortlist'
[162]                 no←⍳0
[163]                 :for n :in ⍳1↑⍴z ⋄ no←no,+/(n⊃z)∊value ⋄ :endfor
[164]                 :if ∨/no>2
[165]                     Win∆SetFocus parent,'pgSelection.lvrunslist'
[166]                     res←'1NEMrun' ⋄ :return
[167]                 :elseif ∨/(×no)^~(,⊃1↑¨z)∊value
[168]                     Win∆SetFocus parent,'pgSelection.lvrunslist'
[169]                     res←'NEMparent' ⋄ :return
[170]                 :endif
[171]             :endif
[172]         :case 'pgOther'
[173]             :if XLCtl
[174]                 :if (⊂UPPERCASE '.' Win∆Child ConsDBName)∊'XLS' 'XLSX' 'XLSM' 'MDB' 'ACCDB' 'MDF'
[175]                     ConsDBName←'.' StripText ConsDBName
[176]                 :endif
[177]                 :if   (⊂UPPERCASE ConsDBName)∊UPPERCASE¨Win∆Parent¨m2n ⎕xlib ConsolidDir,'*.*db'
[178]                 :orif (⊂UPPERCASE ConsDBName)∊UPPERCASE¨Win∆Parent¨m2n ⎕xlib OutputDir,'*.xls*'
[179]                     Win∆SetFocus parent,'pgOther.fOutput.edConsDBName'
[180]                     res←'AlreadyFile' ('Database File or Excel File named "',ConsDBName,'"') ⋄ :return
[181]                 :endif
[182]                 :if sqlDatabase ⋄ :andif ¯1↑ConsDBName ⍙DBExists 2
[183]                     Win∆SetFocus parent,'pgOther.fOutput.edConsDBName'
[184]                     res←'AlreadyFile' ('SQL Server Database named "',ConsDBName,'"') ⋄ :return
[185]                 :endif
[186]             :endif
[187]         :endselect
[188]     :until mt field←1↓field
[189] 
[190] :case 'PageChange'
[191] 
[192]     :select DLTMB ↑field
[193]     :case 'pgSelection'
[194]         value←(parent,'pgSelection.lvrunslist') ⎕wi 'value'
[195]         ARSL←CalculateARSL
[196]         Consolid∆COCR
[197]         (parent,'pgSelection') ⎕wi 'suppress' 1
[198]         Assign_Inputs 1
[199]         (parent,'pgSelection') ⎕wi 'suppress' 0
[200]         nonact←^/((ConsIndex for (⊂'ID'),, value) at 'method')∊'DEF' 'PEN' 'PPD' 'PPP'
[201]         ((⊂parent,'pgAmortisation.fAmort1.fameth1.'),¨'opameth1_1' 'opameth1_2') MultiWI 'enabled' (~nonact)
[202]         :if nonact ⋄ :andif ∨/((⊂parent,'pgAmortisation.fAmort1.fameth1.'),¨'opameth1_1' 'opameth1_2') ⎕wi¨⊂'value'
[203]             (parent,'pgAmortisation.fAmort1.fameth1.opameth1_3') ⎕wi 'value' 1
[204]         :endif
[205]         0 0⍴(⊂'edamortprop1') Consolidation 'Change'
[206]         ((⊂parent,'pgAmortisation.fAmort2.fameth2.'),¨'opameth2_1' 'opameth2_2') MultiWI 'enabled' (~nonact)
[207]         :if nonact ⋄ :andif ∨/((⊂parent,'pgAmortisation.fAmort2.fameth2.'),¨'opameth2_1' 'opameth2_2') ⎕wi¨⊂'value'
[208]             (parent,'pgAmortisation.fAmort2.fameth2.opameth2_3') ⎕wi 'value' 1
[209]         :endif
[210]         0 0⍴(⊂'edamortprop3') Consolidation 'Change'
[211]     :endselect
[212] ⍝⍝⍝    ⍝ Delete Button only on Page 1!
[213] ⍝⍝⍝    'fmSV.mConsolidationResults.mDelete' ⎕wi 'enabled' (1=1↑2⊃⎕warg)
[214]     parent ⎕wi 'Resize'
[215] 
[216] :case 'Run'
[217] 
[218]     :if 0=rowsIn ConsIndex ⋄ MDISPLAY 'NoResults' ⋄ res←'Quit' ⋄ :return ⋄ :endif
[219]     :if mt runslist
[220]         Win∆SetFocus parent,'pgSelection.lvrunslist'
[221]         MDISPLAY 'SelectionReq' ⋄ :return
[222]     :endif
[223]     runs←runs[⍋runs←'fmSV.sConsolidation.pgSelection.lvrunslist' ⎕wi 'value']
[224] 
[225]     (amorti lramorti)←2↑FinConvert amorti (lramorti1 OVER lramorti2 OVER lramorti3)
[226]     (IR     lrIR    )←2↑FinConvert IR     lrIR
[227]     (EXPf   lrEXPf  )←2↑FinConvert EXPf   lrEXPf
[228]     :if uk=1 ⋄ (Expi lrExpi)←2↑FinConvert Expi lrExpi ⋄ :endif
[229]     (ParmDesc ParmTS)←↑¨((ClientFile ReadFile 'Index') for '∆_CompNo' (↑ControlName ⎕wi '∆savecn')) at '∆_Description' '∆_TimeModified'
[230]     ParmTS←⍙DBTimeStamp ParmTS
[231] 
[232]     SUMMREC←1 HyphenSwap ClientFile CONS_RunDesc ControlName ⎕wi '∆savecn'
[233] 
[234]     :if XLCtl
[235]         0 0⍴(SystemDir,'CONSWIN') ReadFile 'Consolidation Database'
[236]         'CONSOLID∆DB' Win∆ProgressBar 'Start'
[237]         0 0⍴(SystemDir,'CONSWIN') DeleteModule 'Consolidation Database'
[238]     :else
[239]         0 0⍴(SystemDir,'CONSWIN') ReadFile 'Consolidation All'
[240]         'CONSOLID' Win∆ProgressBar 'Start'
[241]         0 0⍴(SystemDir,'CONSWIN') DeleteModule 'Consolidation All'
[242]     :endif
[243] 
[244]     :if uk≠1 ⋄ :andif ~(⊂valind)∊'PPF' 'PP3' ⍝⍝⍝
[245]         'CONSWIN' CallModule 'Cons_Review'
[246]         0 0⍴(SystemDir,'CONSWIN') DeleteModule 'Cons_Review'
[247]     :endif
[248] 
[249]     res←'Quit'
[250] 
[251] :case 'Quit' ⍝ Deleting "other" variables
[252]     0 0⍴⎕ex 'pgAmortisation pgContributions pgAOS fCoCRates ConsIndex dab NotPUC progid runs'
[253]     0 0⍴(SystemDir,'VALNWIN') DeleteModule 'Valuation Excel'
[254] 
[255] :endselect
    ∇
