    ∇ EXTRACT∆CSV type;⎕io;vars[1]   ⍝ UVALNWIN.sf#3[2]   ⍝ Valuation Extraction[3]   ⍝[4]   ⍝ Contorted flow because Accrued Benefits done before 'normal' benefits for[5]   ⍝ individual members but after 'normal' benefits for totals[6]   ⍝[7]   →prevind/⎕io←0 ⍝ Only Do Current Valuation Members[8]   [9]   :if ppf∨~type∊3 4 ⍝ Special treatment required for Accrued for PPF/Capped run[10]      :if type=2 ⋄ REC∆CSV←'TOTALS'[11]      :else      ⋄ REC∆CSV←RunTime[12]      :endif[13]      ⍝ Add Data From Record[14]      :for vars :in ⎕split (SStoMAT CharStandVars) OVER 'f',CharVars ⍝ Character first[15]          :if type∊1 2 ⋄ REC∆CSV←REC∆CSV,',' ⍝ Suppress for summary or Total line[16]          :else        ⋄ REC∆CSV←REC∆CSV,',',REC[⍎vars][17]          :endif[18]      :endfor[19]      :for vars :in ⎕split (SStoMAT DateStandVars) OVER 'f',DateVars ⍝ Dates next[20]          :if type∊1 2 ⋄ REC∆CSV←REC∆CSV,',' ⍝ Suppress for summary or Total line[21]          :else        ⋄ REC∆CSV←REC∆CSV,',',,'G<99/99/9999>' ⎕fmt 100 100 10000⊥(⍎'d',vars) DATEEXP REC[⍎vars][22]          :endif[23]      :endfor[24]      :for vars :in ⎕split (SStoMAT FixNumStandVars,VarNumStandVars) OVER 'f',TotNumVars ⍝ Number last[25]          :if type∊1 2 ⋄ REC∆CSV←REC∆CSV,',' ⍝ Suppress for summary or Total line[26]          :else        ⋄ REC∆CSV←REC∆CSV,',',REC[⍎vars][27]          :endif[28]      :endfor[29]  [30]      ⍝ Add Individual Member Totals[31]      :if ppf[32]          :if type=2  ⍝ Totals[33]              REC∆CSV←REC∆CSV,,',',,'<,>,M<->I20' ⎕fmt ATOTS[3 4 5 6 7 8 9 10] ⍝ X0 doesn't exist for Total[34]              REC∆CSV APPEND tpE[35]          :else[36]              REC∆CSV←REC∆CSV,,'<,>,M<->I20' ⎕fmt X0,SUMM[37]          :endif[38]      :else[39]          :if IsDeferred ⍝ Different Output for Enhanced Deferreds[40]              :select type[41]              :case 0     ⍝ Individual Member[42]                  REC∆CSV←REC∆CSV,,'<,>,M<->I20' ⎕fmt res,NRAPUP[43]              :case 2     ⍝ Total[44]                  REC∆CSV←REC∆CSV,,'<,>,M<->I20' ⎕fmt res,TOTNRAPUP[45]              :endselect[46]          :else[47]              :if type=2  ⍝ X0 doesn't exist for Total[48]                  REC∆CSV←REC∆CSV,,','[49]              :else[50]                  REC∆CSV←REC∆CSV,,'<,>,M<->I20' ⎕fmt X0[51]              :endif[52]              REC∆CSV←REC∆CSV,,'<,>,M<->I20' ⎕fmt Z[0;0],Z[4;6][53]              REC∆CSV←REC∆CSV,,'<,>,M<->F20.2' ⎕fmt Z[1;3],Z[1;4][54]              REC∆CSV←REC∆CSV,,'<,>,M<->I20' ⎕fmt res[⍳10],Z[5;5],Z[4;4 (5+3×dab) 1 0 3 2 16],res[10+⍳10],Z[5;17],Z[4;17][55]          :endif[56]      :endif[57]      :if 2=⎕nc 'REC∆CSVA' ⋄ :andif (~0=⍴REC∆CSVA)^~PROPT^type=2[58]          REC∆CSV←REC∆CSV,REC∆CSVA[59]      :endif[60]      :if ~PROPT^type=2[61]          REC∆CSV APPEND tpE[62]      :endif[63]  :else[64]      :if type=4[65]          REC∆CSV←REC∆CSV,,'<,>,M<->I20' ⎕fmt ATOTS[3 4 5 6 7 8 9 10][66]          REC∆CSV APPEND tpE[67]      :else[68]          REC∆CSVA←,'<,>,M<->I20' ⎕fmt SUMM[69]      :endif[70]  :endif    ∇