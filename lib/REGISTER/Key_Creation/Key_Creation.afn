    ∇ res←field Key_Creation parm;parent
[1]   ⍝ REGISTER.sf#3
[2]   ⍝ Function to allow user control on Key Creation
[3]   
[4]   parent←'fmKeyCreate.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   
[8]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[9]   
[10]      :if create
[11]          CompanyName←Client
[12]          (ukcLNTcODE eXACTvAL gadMODULE xloUTPUT dbOPEN aGGbEN almMODULE aosMODULE asmMODULE sqlSERVER altNRA qsmMODULE tRANSFERS hpcMODULE Development BLANKING)←⍕¨flags ⍝⍝⍝ (12 2 2/1 0 1)/
[13]          ukcLNTcODE←'Client Code ',⍕3×zwb ukcLNTcODE
[14]          ExpiryDate←'' ⍝ default response
[15]          ((⊂parent),¨'edCompanyName' 'fukcLNTcODE' 'ckeXACTvAL' 'ckgadMODULE' 'ckBLANKING' 'ckDevelopment' 'ckxloUTPUT' 'cksqlSERVER' 'ckdbOPEN' 'ckaGGbEN' 'ckaltNRA' 'ckalmMODULE' 'ckaosMODULE' 'ckasmMODULE' 'ckqsmMODULE' 'cktRANSFERS' 'ckhpcMODULE') MultiWI 'enabled' 0
[16]      :else
[17]          (parent 'edExpDate') Win∆SetRelated 'visible' 0
[18]      :endif
[19]  
[20]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[21]  
[22]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[23]  
[24]      :if ~create
[25]          :repeat
[26]              :select ↑field
[27]              :caselist 'opukcLNTcODE_1' 'opukcLNTcODE_2'
[28]                  (parent,'ckgadMODULE') ⎕wi 'enabled' ((parent,'fukcLNTcODE.opukcLNTcODE_2') ⎕wi 'value')
[29]                  (parent,'ckgadMODULE') ⎕wi 'value' (((parent,'ckgadMODULE') ⎕wi 'value')⌊(parent,'ckgadMODULE') ⎕wi 'enabled')
[30]                  (parent,'ckeXACTvAL') ⎕wi 'enabled' ((parent,'fukcLNTcODE.opukcLNTcODE_2') ⎕wi 'value')
[31]                  (parent,'ckeXACTvAL') ⎕wi 'value' (((parent,'ckeXACTvAL') ⎕wi 'value')⌊(parent,'ckeXACTvAL') ⎕wi 'enabled')
[32]              :case 'ckxloUTPUT'
[33]                  (parent,'ckdbOPEN') ⎕wi 'enabled' ((parent,'ckxloUTPUT') ⎕wi 'value')
[34]                  (parent,'ckdbOPEN') ⎕wi 'value' (((parent,'ckdbOPEN') ⎕wi 'value')⌊(parent,'ckdbOPEN') ⎕wi 'enabled')
[35]                  (parent,'cksqlSERVER') ⎕wi 'enabled' ((parent,'ckxloUTPUT') ⎕wi 'value')
[36]                  (parent,'cksqlSERVER') ⎕wi 'value' (((parent,'cksqlSERVER') ⎕wi 'value')⌊(parent,'cksqlSERVER') ⎕wi 'enabled')
[37]              :endselect
[38]          :until mt field←1↓field
[39]      :endif
[40]  
[41]  :case 'Valid' ⍝ Routine specific validation
[42]  
[43]      :if create ⋄ :andif (+/1 100 10000×'DD/MM/YYYY' DATEEXP ExpDate)<+/10000 100 1×3↑⎕ts
[44]          res←'Date must be in the future' ⋄ :return
[45]      :endif
[46]  
[47]  :case 'Run'
[48]  
[49]      :if create
[50]          ExpiryDate←(expiryDate←ExpDate)[9 10 4 5 1 2]
[51]      :else
[52]          RegistrationTab←RegistrationTab OVER CompanyName (DLTB 5↑version) (¯1↑DLTB ukcLNTcODE) eXACTvAL gadMODULE xloUTPUT dbOPEN aGGbEN almMODULE aosMODULE asmMODULE sqlSERVER altNRA qsmMODULE tRANSFERS hpcMODULE
[53]          'fmRegister.ckdEVELOPMENT' ⎕wi 'value' (zwb Development)
[54]          'fmRegister.ckblanking' ⎕wi 'value' (zwb BLANKING)
[55]      :endif
[56]      res←'Quit'
[57]  
[58]  :case 'Quit' ⍝ Deleting "other" variables
[59]  
[60]  :endselect
    ∇
