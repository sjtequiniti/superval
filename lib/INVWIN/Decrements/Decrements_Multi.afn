    ∇ parm Decrements∆Multi NO;enabled;text;rarg;value;list
[1]   ⍝ INVWIN.sf#2
[2]   ⍝ Make "changes" according to "parm" (type) and "NO" (page)
[3]   
[4]   :select parm
[5]   :case 'onChange' ⍝ Set Tab Names onChange
[6]       (parent,'pgGeneral.fSelection.edDecName',NO) ⎕wi 'onChange' ('0 0⍴(⊂"edTabName',NO,'") Decrements "Change"')
[7]   
[8]   :case 'ckDecSelect' ⍝ Enable/Disable Descriptor and Restore/Delete Page
[9]       enabled←(parent,'pgGeneral.fSelection.ckDecSelect',NO) ⎕wi 'value'
[10]      :if ~0∊⍴(FormName,'.mDecrementsGoTo') ⎕wi 'self'
[11]          (FormName,'.mDecrementsGoTo.mDecrement',NO) ⎕wi 'enabled' enabled
[12]      :endif
[13]      :if enabled≠zwb DecSelect[zwb NO;]
[14]          Win∆AssignVars ControlName
[15]          ((MatrixZWB DecSelect)/⍳9) Dec∆AdjustPages 'Reset'
[16]          'edTabName' Decrements∆Multi NO
[17]      :else
[18]          (parent,'pgGeneral.fData.') Win∆FileChanges 'MOE'
[19]          'Codes' Decrements∆Multi NO
[20]      :endif
[21]      ((parent,'pgGeneral.fSelection.') ('edDecName',NO)) Win∆SetRelated 'enabled' enabled
[22]  
[23]  :case 'edTabName' ⍝ Copy Description to Page caption
[24]      :if '1'=DecSelect[zwb NO;]
[25]          text←DLTB (parent,'pgGeneral.fSelection.edDecName',NO) ⎕wi 'text'
[26]          (parent,'pgDecrement',NO) ⎕wi 'caption' text
[27]          :if ~0∊⍴(FormName,'.mDecrementsGoTo') ⎕wi 'self'
[28]              (FormName,'.mDecrementsGoTo.mDecrement',NO) ⎕wi 'caption' text
[29]         :endif
[30]      :endif
[31]  
[32]  :case 'edDecName' ⍝ Copy Description to Exit Description
[33]      text←DLTB (parent,'pgGeneral.fSelection.edDecName',NO) ⎕wi 'text'
[34]      :if 0∊⍴,DLTMB (parent,'pgDecrement',NO,'.fParms.edeXITDESC',NO) ⎕wi 'text'
[35]      :andif ~'Decrement'≡9↑text
[36]          (parent,'pgDecrement',NO,'.fParms.edeXITDESC',NO) ⎕wi 'text' text
[37]      :endif
[38]  
[39]  :case 'edExpTable' ⍝ Enable/Disable Durational Weight Table
[40]      :if (parent,'pgDecrement',NO,'.fTable') ⎕wi 'enabled'
[41]      :andif ~0∊⍴(parent,'pgDecrement',NO,'.fTable.edTXX',NO) ⎕wi 'self'
[42]          ((parent,'pgDecrement',NO,'.fTable.') ('edTXX',NO)) Win∆SetRelated 'enabled' ('WLW'[1+uk]=1↑DLTMB (parent,'pgDecrement',NO,'.fTable.edExpTable',NO) ⎕wi 'text')
[43]      :endif
[44]  
[45]  :case 'pgGeneral' ⍝ Process a Page Change to any one of "Decrement" Pages
[46]      rarg←(FormName ⎕wi '∆decrdesc') (FormName ⎕wi '∆decrlist')
[47]      (parent,'pgDecrement',NO,'.fTable.edTXX'     ,NO) Win∆LabelUpdate rarg ⋄ 0 0⍴(⊂"edTXX",NO) Decrements "Change"
[48]      (parent,'pgDecrement',NO,'.fTable.edExpTable',NO) Win∆LabelUpdate rarg ⋄ 0 0⍴(⊂"edExpTable",NO) Decrements "Change"
[49]  
[50]      value←(parent,'pgDecrement',NO,'.fParms.lsCODE',NO) ⎕wi 'value'
[51]      :if ~0∊⍴value←((parent,'pgDecrement',NO,'.fParms.lsCODE',NO) ⎕wi 'list')[value;]
[52]          (,'⍺',value) ASSIGN∆Dict ('CODE[',NO,';]')
[53]      :endif
[54]      'Codes' Decrements∆Multi NO
[55]  
[56]  :case 'Codes'
[57]      :if ~0≡list←(parent,'pgGeneral.fData') ⎕wi '∆moe'
[58]          (parent,'pgDecrement',NO,'.fParms.lsCODE',NO) MakeSelections list (SStoMAT ⍎'CODE[',NO,';]')
[59]          ((parent,'pgDecrement',NO,'.fParms.') ('lsCODE',NO)) Win∆SetRelated 'enabled' (~0∊⍴list)
[60]          :if 0∊⍴list
[61]              (parent,'pgDecrement',NO,'.fParms.lsCODE',NO) ⎕wi 'value' ⍬
[62]          :endif
[63]          Sel∆LabelUpdate parent,'pgDecrement',NO,'.fParms.lsCODE',NO
[64]      :endif
[65]  
[66]  :endselect
    ∇
