    ∇ larg Win∆SortListview parm;sortorder;RowID;order;Label;sortlist;rows;parent;displaycol;listcol;Header;desc;listview;Module;headers
[1]   ⍝ MAINWIN.sf#3
[2]   ⍝ Sort the listview control according to Column clicked (or saved Defaults - either Column Header or list order)
[3]   
[4]   (listview Module)←larg
[5]   
[6]   :if ~mt RowID←(listview ⎕wi 'list')[;1]
[7]       Header←(headers←DLTB¨(Label←listview ⎕wi 'columndisplay')[;1])~¨⊂'<>'   ⍝ Remove Previous Sort Order Indicator
[8]   
[9]       :if 82=⎕dr parm ⍝ Column Header
[10]          :if ~mt DLTB parm ⋄ :andif (⍴Header)≥displaycol←Header⍳⊂parm~'<>'
[11]              order←~'>'=↑parm
[12]              larg Win∆SortListview displaycol,order
[13]          :endif
[14]          :return
[15]  
[16]      :elseif ^/0>parm ⍝ List row order (-ve to differentiate from Column Click)
[17]  
[18]          parm←-sortorder←((sortorder∊RowID)/sortorder),RowID~sortorder←-parm ⍝ Put Previous Rows in order and any new at the end
[19]  ⍝⍝⍝        Header←Header~¨⊂'<>'                                                ⍝ Remove Previous Sort Order Indicator
[20]  
[21]      :elseif 2=⍴parm ⍝ Column Click
[22]          order←×parm[2] ⋄ displaycol←parm[1] ⍝ order indicates up or down
[23]          listcol←Label[displaycol;4]
[24]  
[25]          ⍝ Indicate Sort Order in Header
[26]          :if (sortorder←1↑displaycol⊃headers)∊'<>'
[27]             order←'>'=sortorder ⍝ Reverse order if already sorted by this column
[28]          :endif
[29]  
[30]          sortorder←DLTMB (SStoMAT listview ⎕wi '∆sortorder')[listcol;] ⍝ Required Sort Order
[31]          :if 2=≡sortlist←listview ⎕wi '∆sortlist' ⋄ rows←RowID⍳parent←,⊃1↑¨sortlist
[32]          :else                                    ⋄ rows←⍳⍴parent←sortlist←,sortlist
[33]          :endif
[34]  
[35]          :select sortorder
[36]          :case 'Alpha' ⍝ Sort Alpha
[37]              sortorder←⊃(listview ⎕wi 'list')[rows;listcol+2]
[38]              :if order ⋄ sortorder←(RowID[rows])[⎕av⍒sortorder]
[39]              :else     ⋄ sortorder←(RowID[rows])[⎕av⍋sortorder]
[40]              :endif
[41]          :case 'RowID' ⍝ Sort by original row numbers (usually chronological)
[42]              :if order ⋄ sortorder←(RowID[rows])[⍒RowID[rows]]
[43]              :else     ⋄ sortorder←(RowID[rows])[⍋RowID[rows]]
[44]              :endif
[45]          :case 'SortList' ⍝ Sort by original sort (usually if rows not chronological)
[46]              sortorder←parent
[47]              :if ~order ⋄ sortorder←⌽sortorder ⋄ :endif
[48]          :endselect
[49]  
[50]          sortorder←(,⊃sortlist[parent⍳sortorder])~0
[51]  ⍝⍝⍝        Header←Header~¨⊂'<>'                                            ⍝ Remove Previous Sort Order Indicator
[52]          Header[displaycol]←⊂parm←(↑order↓'><'),DLTB ⊃Header[displaycol] ⍝ Insert New Sort Order Indicator
[53]  
[54]      :else ⍝ Unexpected argument
[55]          crash ⋄    :return
[56]      :endif
[57]  
[58]      listview ⎕wi 'sortorder' sortorder ⍝ Set Sort Order
[59]      Label[;1]←Header,¨⊂'    ' ⋄ listview ⎕wi 'columndisplay' Label
[60]  
[61]      :if 0≡desc←ControlName ⎕wi '∆savedesc' ⋄ desc←''
[62]      :else                                  ⋄ desc←DLTB desc
[63]      :endif
[64]      listviewDict←(listviewDict for (~(spin listviewDict at 'Control' 'Parameters')∊⊂listview desc)) OVER Module listview desc parm
[65]  :endif
    ∇
