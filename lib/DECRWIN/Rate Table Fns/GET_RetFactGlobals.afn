    ∇ res←larg GET∆RetFactGlobals varname;flds;success;MESS;desc;errflag;var;tab;old;new;vars;∆;list;stem;cot;parmlist;parms;idx;check;descs[1]   ⍝ DECRWIN.sf#2[2]   ⍝ Extract the Retirement Factor Global parameters using the "description" pointer "varname"[3]   ⍝ varname has the form "stem Table variable name",'Parm' and 'C' if COT factors[4]   ⍝ larg is the description of the Retirement Factors set and a valuation flag[5]   [6]   (desc errflag)←larg ⋄ var←DLTB ⍎varname[7]   [8]   :if ↑res←(success MESS)←2↑ClientFile ReadModule 'Retirement_Factors' var 'Retirement Factors' desc errflag varname[9]       tab←⍙RULESdict ReadDictFile 'Retirement_Factors'[10]      tab←tab for ⍎¨tab at 'Editable' ⍝ Exclude those not required[11]      flds←tab at 'Field'[12]  [13]      cot←'C'=¯1↑DLTB varname ⋄ stem←(-4+cot)↓varname[14]  [15]      list←m2n ⍙VALUESdict ReadDictFile 'Retirement_Factors' '' 'NAMES'[16]      list←(list∊(flds,(⊂'lr'),¨flds))/list[17]      vars←((⊂'/gRetFact/',stem) TEXTREPL¨parmlist←(~(⊂'lr')≡¨2↑¨list)/list),¨⊂cot/'C'  ⍝ Variable Names (remove labels)[18]      old←DLTB¨⍎¨vars                                                     ⍝ Currently set Variables[19]  [20]      ⍎'(',(⍕((⊂'/gRetFact/',stem) TEXTREPL¨list),¨⊂cot/'C'),')←',⍕list[21]  [22]      ∆←~(⍎comment_var,' at "variable"')∊(⊂'/gRetFact/',stem) TEXTREPL¨flds,¨⊂cot/'C'[23]      ⍎comment_var,'←',comment_var,' for ∆'[24]      :if ×rowsIn Comment_Retirement_Factors←Comment_Retirement_Factors for (⊂'variable'),flds  ⍝ Add Retirement_Factors comments[25]          Comment_Retirement_Factors←Comment_Retirement_Factors amend 'variable' (((⊂'/gRetFact/',stem) TEXTREPL¨Comment_Retirement_Factors at 'variable'),¨⊂cot/'C')[26]          ⍎comment_var,'←',comment_var,' append Comment_Retirement_Factors'[27]      :endif[28]      0 0⍴⎕ex ⍙VALUESdict ReadDictFile 'Retirement_Factors' '' 'NAMES'[29]  [30]      :if    ∨/∆←~old≡¨new←DLTB¨⍎¨vars[31]      :andif ∨/∆←∆^~∨/¨(⊂'LRTABExactAge')⍷¨vars ⍝ Remove report on Hidden field[32]          new←∆/new ⋄ parmlist←∆/parmlist ⋄ vars←∆/vars[33]  [34]          parms←⊃spin (tab for (⊂'Field'),parmlist) at 'Field' 'Type' 'Desc'[35]          check←parms[;2]≡¨⊂'Check'[36]          idx←parmlist⍳parms[;1][37]          parms[;1]←vars[idx] ⋄ new←new[idx][38]          :if ∨/check ⋄ (check/new)←CheckTranslate ¨check/new ⋄ :endif[39]          parms[;2]←new[40]  [41]          :for ∆ :in ⎕split parms ⋄ (vars new descs)←∆[42]              MESS←MESS OVER vars ⍬ ((errflag/'Warning:  '),'Value for "',descs,'" in ',desc,' has changed to "',new,'"')[43]          :endfor[44]      :endif[45]  [46]      res←success MESS[47]  :endif    ∇