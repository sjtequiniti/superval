    ∇ res←field Bulk_Annuity parm;parent;enabled;Page;z;type;accepted;new;InsertAGES;values;index;SaveCN
[1]   ⍝ DECRWIN.sf#8
[2]   ⍝ Function to allow user control on Bulk Annuity Calculator
[3]   
[4]   parent←'fmBulkAnn.sBulk_Annuity.' ⋄ res←0⍴'' ⍝ Default response
[5]   
[6]   :select parm
[7]   
[8]   :case 'Vars' ⍝ Adjustments to screen variables (particularly dynamic Dictionaries)
[9]       :if ~CallingModule≡'AnnuityCalc'
[10]          insertpkg←pack 'SSName colEdit'
[11]          SSName←'/.fCol/.f' TEXTREPL '/.ssCol/.ss' TEXTREPL SSName ⋄ colEdit←0
[12]      :endif
[13]      :if uk≠1 ⋄ :andif '-'∊PenFreq[2;]
[14]          PenFreq←PenFreq[1;] OVER DropText PenFreq[2;]
[15]      :endif
[16]  
[17]  :case 'Init'  ⍝ Initialising Routines (eg dynamic labels, country specific enabling/disabling etc)
[18]      (parent,'pgPayment.fParms.edgp') ⎕wi 'onChange' ((parent,'pgPayment.fParms.edgp') ⎕wi 'onExit')
[19]      (parent,'pgPayment.fParms.eddefage') ⎕wi 'onChange' ((parent,'pgPayment.fParms.eddefage') ⎕wi 'onExit')
[20]      (parent,'pgPayment.fParms.edtop') ⎕wi 'onChange' ((parent,'pgPayment.fParms.edtop') ⎕wi 'onExit')
[21]      (parent,'pgPayment.fReversion.edrev') ⎕wi 'onChange' ((parent,'pgPayment.fReversion.edrev') ⎕wi 'onExit')
[22]      (parent,'pgPayment.fReversion.edPropMarr') ⎕wi 'onChange' ((parent,'pgPayment.fReversion.edPropMarr') ⎕wi 'onExit')
[23]      0 0⍴('edgp' 'eddefage' 'cbPenFreq1') Bulk_Annuity 'Change'
[24]      :if uk=2 ⋄ 0 0⍴(⊂'cbImpMeth') Bulk_Annuity 'Change' ⋄ :endif
[25]  
[26]  :case 'Change' ⍝ The onChange events (disabling fields according to value of others)
[27]  
[28]      :repeat
[29]          :select ↑field
[30]          :case 'edgp'
[31]              (parent,'pgPayment.fParms.ckgpOlap') ⎕wi 'enabled' (enabled←0≠zwb (parent,'pgPayment.fParms.edgp') ⎕wi 'text')
[32]              :if uk=1
[33]                  (parent,'pgPayment.fParms.ckDISC') ⎕wi 'enabled' enabled
[34]              :endif
[35]          :case 'eddefage'
[36]              enabled←0≠zwb (parent,'pgPayment.fParms.eddefage') ⎕wi 'text'
[37]              ((⊂parent,'pgPayment.fFinancial.'),¨'ckpiind' ((1+uk=1)⊃'edPVMdef' 'cbPVMdef')) MultiWI 'enabled' enabled
[38]              0 0⍴('edrev' 'ckpiind') Bulk_Annuity 'Change'
[39]              :if uk=1 ⋄ ((⊂parent,'pgMortality.fDefer.'),¨'cbP_DDEF' 'cbP_miDDEF' 'cbS_DDEF' 'cbS_miDDEF') MultiWI 'enabled' enabled
[40]              :else    ⋄ ((⊂parent,'pgMortality.fMortality.'),¨'edPMdef1' 'edPMdef2' 'edPMdef3' 'edSMdef1' 'edSMdef2' 'edSMdef3') MultiWI 'enabled' enabled
[41]              :endif
[42]          :case 'cbPenFreq1'
[43]              (parent,'pgPayment.fParms.cbPenFreq2') ⎕wi 'enabled' ('C'≠1↑(parent,'pgPayment.fParms.cbPenFreq1') ⎕wi 'text')
[44]          :case 'edrev'
[45]              enabled←0≠zwb (parent,'pgPayment.fReversion.edrev') ⎕wi 'text'
[46]              (parent,'pgPayment.fReversion.ckrevind') ⎕wi 'enabled' enabled
[47]              (parent,'pgPayment.fReversion.ckrevdef') ⎕wi 'enabled' (enabled^0≠zwb (parent,'pgPayment.fParms.eddefage') ⎕wi 'text')
[48]              0 0⍴(⊂'edtop') Bulk_Annuity 'Change'
[49]          :case 'edH1'
[50]              (parent,'pgPayment.fReversion.edPropMarr') ⎕wi 'enabled' (mt (parent,'pgPayment.fReversion.edH1') ⎕wi 'text')
[51]          :case 'edPropMarr'
[52]              ((⊂parent,'pgPayment.fReversion.'),¨'edH1' 'edH2' 'edH3') MultiWI 'enabled' (mt (parent,'pgPayment.fReversion.edPropMarr') ⎕wi 'text')
[53]          :case 'edtop'
[54]              :if uk≠1
[55]                  (parent,'pgPayment.fReversion.cbrevterm') ⎕wi 'enabled' ((0≠zwb (parent,'pgPayment.fReversion.edrev') ⎕wi 'text')^120≠zwb (parent,'pgPayment.fParms.edtop') ⎕wi 'text')
[56]              :endif
[57]          :case 'ckpiind'
[58]              enabled←^/(parent,'pgPayment.fFinancial.ckpiind') ⎕wi 'Ref' 'value' 'enabled'
[59]              :if uk=1 ⋄ (parent,'pgPayment.fFinancial.cbdefi') ⎕wi 'enabled' enabled
[60]              :else    ⋄ (parent,'pgPayment.fFinancial.eddefi') ⎕wi 'enabled' enabled
[61]              :endif
[62]          :case 'cbImpMeth'
[63]              z←'C'=type←1↑(parent,'pgMortality.fImprove.cbImpMeth') ⎕wi 'text'
[64]              ((⊂parent,'pgMortality.fImprove.'),¨'llMB3' 'edMB3' 'llFB3' 'edFB3') MultiWI 'visible' (¯1+2×z)
[65]              ((⊂parent,'pgMortality.fImprove.'),¨'llMB1' 'edMB1' 'llFB1' 'edFB1' 'llMB2' 'edMB2' 'llFB2' 'edFB2') MultiWI 'visible' (¯1+2×~z)
[66]              (2↓(parent,'pgMortality.fImprove') ⎕wi 'children') MultiWI 'enabled' (type≠'N')
[67]          :endselect
[68]      :until mt field←1↓field
[69]  
[70]  :case 'Valid' ⍝ Routine specific validation
[71]  
[72]      :repeat
[73]        :select Page←DLTMB ↑field
[74]        :case 'All' ⍝ Validate all pages
[75]           res←('pgPayment' 'pgMortality') Bulk_Annuity 'Valid'
[76]  
[77]        :case 'pgPayment'
[78]           X←(zwb BAGE),zwb EAGE ⋄ GP←zwb gp ⋄ TOP←zwb top ⋄ DEF←zwb defage
[79]  
[80]           :if X[2]<X[1] ⍝ Check ages are in right order
[81]                Win∆SetFocus parent,Page,'.fParms.edBAGE'
[82]                res←'InvEntry' 'Start Age is greater than End Age' ⋄ :return
[83]           :endif
[84]           :if TOP<GP+X[2]⌈DEF ⍝ Term is beyond Guarantee period
[85]                Win∆SetFocus parent,Page,'.fParms.edtop'
[86]                res←'InvEntry' 'Guarantee Period goes beyond Ceasing Age' ⋄ :return
[87]           :endif
[88]           :if (∨/' '≠,defage)^DEF<X[1] ⍝ Age beyond deferral
[89]                Win∆SetFocus parent,Page,'.fParms.eddefage1'
[90]                res←'InvEntry' 'Deferral Age is less than Start Age' ⋄ :return
[91]           :endif
[92]           :if DEF≥TOP ⍝ Deferral Age beyond Term
[93]                Win∆SetFocus parent,Page,'.fParms.eddefage'
[94]                res←'InvEntry' 'Deferral Age is greater than Ceasing Age' ⋄ :return
[95]           :endif
[96]  
[97]        :case 'pgMortality'
[98]           :if uk=1 ⋄ res←parent Valid_UKMortality Page ⋄ :endif
[99]        :endselect
[100]     :until mt field←1↓field
[101] 
[102] :case 'Run'
[103] 
[104]     values←ANN ⋄ values←(max+1)↑((1↑InsertAGES)↑TABLE),values,(1+¯1↑InsertAGES)↓TABLE
[105]     new←(1↑InsertAGES)+0,⍳∣DIFF InsertAGES
[106]     accepted←0
[107]     :if ~mt res←OldTable RatesDisplay values
[108]         TABLE←values
[109]         parent ⎕wi '∆modified' 1
[110]         :if CallingModule≡'AnnuityCalc'
[111]         :andif ~mt SaveCN←ControlName ⎕wi '∆savecn'
[112]             index←ClientFile ReadFile 'Index'
[113]             BulkTableDesc←∊(index for SaveCN=index at '∆_CompNo') at '∆_Description'
[114]             rUNDESC←1 HyphenSwap BulkAnn_RunDesc SaveCN
[115]         :endif
[116]     :endif
[117] 
[118] :case 'Quit' ⍝ Deleting "other" variables
[119]     :if ~CallingModule≡'AnnuityCalc'
[120]         pdef insertpkg ⋄ 0 0⍴⎕ex 'insertpkg'
[121]     :endif
[122] 
[123] :endselect
    ∇
